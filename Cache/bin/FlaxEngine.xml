<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlaxEngine</name>
    </assembly>
    <members>
        <member name="T:FlaxEngine.AnimatedModel">
            <summary>
            Performs an animation and renders a skinned model.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimatedModel.Pose">
            <summary>
            Contains the snapshot of the animated model pose.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.Pose.Bones">
            <summary>
            The per-bone final transformations in actor world-space.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.Pose.GetBonePosition(System.Int32)">
            <summary>
            Gets the position of the bone in the actor local space.
            </summary>
            <param name="index">The bone index.</param>
            <returns>The bone position.</returns>
        </member>
        <member name="T:FlaxEngine.AnimatedModel.AnimationUpdateMode">
            <summary>
            Describes the animation graph updates frequency for the animated model.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Auto">
            <summary>
            The automatic updates will be used (based on platform capabilities, distance to the player, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EveryUpdate">
            <summary>
            Animation will be updated every game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EverySecondUpdate">
            <summary>
            Animation will be updated every second game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EveryFourthUpdate">
            <summary>
            Animation will be updated every fourth game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Manual">
            <summary>
            Animation can be updated manually by the user scripts. Use <see cref="M:FlaxEngine.AnimatedModel.UpdateAnimation"/> method.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Never">
            <summary>
            Animation won't be updated at all.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel._parametersHash">
            <summary>
            Helper value used to keep parameters collection in sync with actual backend data.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.Parameters">
            <summary>
            Gets or sets the animation graph parameters collection.
            </summary>
            <remarks>
            It's null or empty if the <see cref="P:FlaxEngine.AnimatedModel.AnimationGraph"/> property is null or asset is not loaded yet.
            It's highly recommended to use <see cref="M:FlaxEngine.AnimatedModel.GetParam(System.Int32)"/> and cache the returned object to improve your game logic performance.
            </remarks>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.Entries">
            <summary>
            Gets the skinned model entries collection. Each <see cref="T:FlaxEngine.ModelEntryInfo"/> contains data how to render meshes using this entry (material, shadows casting, etc.).
            </summary>
            <remarks>
            It's null if the <see cref="P:FlaxEngine.AnimatedModel.SkinnedModel"/> property is null or asset is not loaded yet.
            </remarks>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParam(System.Int32)">
            <summary>
            Gets the parameter by index.
            </summary>
            <param name="index">The index.</param>
            <returns>The material parameter.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParam(System.String)">
            <summary>
            Gets the parameter by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The animation graph parameter.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParam(System.Guid)">
            <summary>
            Gets the parameter by ID.
            </summary>
            <param name="paramId">The id.</param>
            <returns>The animation graph parameter.</returns>
        </member>
        <member name="E:FlaxEngine.AnimatedModel.EntriesChanged">
            <summary>
            Occurs when entries collection gets changed.
            It's called on <see cref="T:FlaxEngine.AnimatedModel"/> skinned model changed or when model asset gets reloaded, etc.
            </summary>
        </member>
        <member name="E:FlaxEngine.AnimatedModel.ParametersChanged">
            <summary>
            Occurs when animation graph parameters collection gets changed.
            It's called on <see cref="T:FlaxEngine.AnimatedModel"/> animation graph asset changed or when graph asset gets reloaded, etc.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetCurrentPose(FlaxEngine.AnimatedModel.Pose@)">
            <summary>
            Gets the current animated skeleton pose. Will allocate the bone transformation array memory or reuse the cached one.
            </summary>
            <param name="pose">The output pose.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.AnimatedModel"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.AnimatedModel"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.SkinnedModel">
            <summary>
            Gets or sets a skinned model asset used for rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.AnimationGraph">
            <summary>
            Gets or sets the animation graph used for the skinned mesh skeleton bones evaluation.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.PerBoneMotionBlur">
            <summary>
            If true, use per-bone motion blur on this skeletal model. It requires additional rendering, can be disabled to save performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UseTimeScale">
            <summary>
            If true, animation speed will be affected by the global time scale parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateWhenOffscreen">
            <summary>
            If true, the animation will be updated even when an actor cannot be seen by any camera. Otherwise, the animations themselves will also stop running when the actor is off-screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateMode">
            <summary>
            Gets or sets the animation update mode. Can be used to optimize the performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.BoundsScale">
            <summary>
            Gets or sets the master scale parameter for the actor bounding box. Helps reducing mesh flickering effect on screen edges.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.CustomBounds">
            <summary>
            Gets or sets the custom bounds (in actor local space). If set to empty bounds then source skinned model bind pose bounds will be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.ShadowsMode">
            <summary>
            Gets or sets the shadows casting mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.RootMotionTarget">
            <summary>
            Gets or sets the animation root motion apply target. If not specified the animated model will apply it itself.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.UpdateAnimation">
            <summary>
            Performs the full animation update.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.ResetAnimation">
            <summary>
            Resets the animation state (clears the instance state data but preserves the instance parameters values).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetMaterial(System.Int32)">
            <summary>
            Gets material used to render mesh at given index (overriden by model instance buffer or model default).
            </summary>
            <param name="meshIndex">Mesh index</param>
            <returns>Material or null if not assigned.</returns>
        </member>
        <member name="T:FlaxEngine.AudioListener">
            <summary>
            Represents a listener that hears audio sources. For spatial audio the volume and pitch of played audio is determined by the distance, orientation and velocity differences between the source and the listener.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioListener.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.AudioListener"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioListener.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.AudioListener"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="T:FlaxEngine.AudioSource">
            <summary>
            Represents a source for emitting audio. Audio can be played spatially (gun shot), or normally (music). Each audio source must have an AudioClip to play - back, and it can also have a position in the case of spatial(3D) audio.
            </summary>
            <remarks>
            Whether or not an audio source is spatial is controlled by the assigned AudioClip.The volume and the pitch of a spatial audio source is controlled by its position and the AudioListener's position/direction/velocity.
            </remarks>
        </member>
        <member name="T:FlaxEngine.AudioSource.States">
            <summary>
            Valid states in which AudioSource can be in.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Playing">
            <summary>
            The source is currently playing.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Paused">
            <summary>
            The source is currently paused (play will resume from paused point).
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Stopped">
            <summary>
            The source is currently stopped (play will resume from start).
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.AudioSource"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.AudioSource"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.AudioSource.Clip">
            <summary>
            Gets or sets the audio clip asset used as a source of the sound.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Volume">
            <summary>
            Gets or sets the volume of the audio played from this source, in [0, 1] range.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Pitch">
            <summary>
            Gets or sets the pitch of the played audio. The default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.IsLooping">
            <summary>
            Determines whether the audio clip should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.PlayOnStart">
            <summary>
            Determines whether the audio clip should auto play on level start.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.MinDistance">
            <summary>
            Gets or sets the minimum distance at which audio attenuation starts. When the listener is closer to the source than this value, audio is heard at full volume. Once farther away the audio starts attenuating.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Attenuation">
            <summary>
            Gets or sets the attenuation that controls how quickly does audio volume drop off as the listener moves further from the source.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Play">
            <summary>
            Starts playing the currently assigned audio clip.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Stop">
            <summary>
            Stops audio playback, rewinding it to the start.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.State">
            <summary>
            Gets the the current state of the audio playback (playing/paused/stopped).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Time">
            <summary>
            Gets or sets the current time of playback. If playback hasn't yet started, it specifies the time at which playback will start at. The time is in seconds, in range [0, ClipLength].
            </summary>
        </member>
        <member name="T:FlaxEngine.BoneSocket">
            <summary>
            Actor that links to the animated model skeleton bone transformation.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoneSocket.BoneName">
            <summary>
            Gets or sets the name of the skeleton bone that socket is attached to.
            For better performance use <see cref="P:FlaxEngine.BoneSocket.BoneIndex"/> as <see cref="P:FlaxEngine.BoneSocket.BoneName"/> can introduce stalls and uses string for a lookup.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoneSocket.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.BoneSocket"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoneSocket.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.BoneSocket"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.BoneSocket.BoneIndex">
            <summary>
            Gets or sets the target bone index to link to it.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoneSocket.UseScale">
            <summary>
            Gets or sets the value indicating whenever use the target bone scale. Otherwise won't override the actor scale.
            </summary>
        </member>
        <member name="T:FlaxEngine.BoxBrush">
            <summary>
            Performs CSG box brush operation that adds or removes geometry.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Surfaces">
            <summary>
            Gets the brush surfaces collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxBrush.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.BoxBrush"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxBrush.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.BoxBrush"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.BoxBrush.ScaleInLightmap">
            <summary>
            Gets or sets brush surfaces scale in lightmap parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Size">
            <summary>
            Gets or sets brush size.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Center">
            <summary>
            Gets or sets brush center location (in local space).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Mode">
            <summary>
            Gets or sets CSG brush mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="T:FlaxEngine.Camera">
            <summary>
            Describes the camera projection and view. Provides information about how to render scene (viewport location and direction, etc.).
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.MainCamera">
            <summary>
            Gets the current main camera used for scene rendering by <see cref="T:FlaxEngine.Rendering.MainRenderTask"/>. May be null if no camera is available.
            </summary>
            <remarks>If you override the main camera remember to remove the reference on object destroy or scene unload to prevent leaks and crashes.</remarks>
        </member>
        <member name="M:FlaxEngine.Camera.ProjectPoint(FlaxEngine.Vector3@,FlaxEngine.Vector2@)">
            <summary>
            Projects the point from 3D world-space to the camera screen-space (in screen pixels for default viewport calculated from <see cref="P:FlaxEngine.Camera.Viewport"/>).
            </summary>
            <param name="worldSpaceLocation">The input world-space location (XYZ in world).</param>
            <param name="screenSpaceLocation">The output screen-space location (XY in screen pixels).</param>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2)">
            <summary>
            Converts the mouse location (in screen-space) to 3D ray.
            </summary>
            <param name="location">The mouse location (screen-space).</param>
            <returns>The mouse ray (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2@,FlaxEngine.Ray@)">
            <summary>
            Converts the mouse location (in screen-space) to 3D ray.
            </summary>
            <param name="location">The mouse location (screen-space).</param>
            <param name="ray">The mouse ray (world-space).</param>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2@,FlaxEngine.Ray@,FlaxEngine.Viewport@)">
            <summary>
            Converts the mouse location (in screen-space) to 3D ray.
            </summary>
            <param name="location">The mouse location (screen-space).</param>
            <param name="ray">The mouse ray (world-space).</param>
            <param name="viewport">The custom viewport used for the camera projection matrices calculations.</param>
        </member>
        <member name="M:FlaxEngine.Camera.GetMatrices(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the view and the projection matrices for the camera. Support using custom viewport.
            </summary>
            <param name="view">The result camera view matrix.</param>
            <param name="projection">The result camera projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Camera.GetMatrices(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Viewport@)">
            <summary>
            Calculates the view and the projection matrices for the camera. Support using custom viewport.
            </summary>
            <param name="view">The result camera view matrix.</param>
            <param name="projection">The result camera projection matrix.</param>
            <param name="customViewport">The custom output viewport.</param>
        </member>
        <member name="M:FlaxEngine.Camera.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Camera.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Camera"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Camera.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Camera"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Camera.UsePerspective">
            <summary>
            Gets or sets value indicating if camera should use perspective rendering mode, otherwise it will use orthographic projection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.FieldOfView">
            <summary>
            Gets or sets camera's field of view (in degrees)
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.CustomAspectRatio">
            <summary>
            Gets or sets the custom aspect ratio. 0 if not use custom value.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.NearPlane">
            <summary>
            Gets or sets camera's near plane distance
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.FarPlane">
            <summary>
            Gets or sets camera's far plane distance
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.OrthographicScale">
            <summary>
            Gets or sets the orthographic projection scale
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Viewport">
            <summary>
            Gets camera viewport
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.View">
            <summary>
            Gets camera view matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Projection">
            <summary>
            Gets camera projection matrix.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionDelegate">
            <summary>
            Function delegate used for the collision events.
            </summary>
            <param name="collision">The collision information.</param>
        </member>
        <member name="T:FlaxEngine.TriggerDelegate">
            <summary>
            Function delegate used for the trigger events.
            </summary>
            <param name="collider">The other collider.</param>
        </member>
        <member name="T:FlaxEngine.Collider">
            <summary>
            A base class for all colliders.
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.CollisionEnter">
            <summary>
            Occurs when a collision start gets registered for this collider (it collides with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.CollisionExit">
            <summary>
            Occurs when a collision end gets registered for this collider (it ends colliding with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.TriggerEnter">
            <summary>
            Occurs when a trigger touching start gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="E:FlaxEngine.Collider.TriggerExit">
            <summary>
            Occurs when a trigger touching end gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a raycast against this collider.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single@,System.Single)">
            <summary>
            Performs a raycast against this collider.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single)">
            <summary>
            Performs a raycast against this collider, returns results in a RaycastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.ClosestPoint(FlaxEngine.Vector3)">
            <summary>
            Gets a point on the collider that is closest to a given location.
            Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <returns>The result point on the collider that is closest to the specified location.</returns>
        </member>
        <member name="P:FlaxEngine.Collider.IsTrigger">
            <summary>
            Gets or sets the 'IsTrigger' flag.
            </summary>
            <remarks>
            A trigger doesn't register a collision with an incoming Rigidbody. Instead, it sends OnTriggerEnter, OnTriggerExit and OnTriggerStay message when a rigidbody enters or exits the trigger volume.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collider.Center">
            <summary>
            Gets or sets the center of the collider, measured in the object's local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.ContactOffset">
            <summary>
            Gets or sets the contact offset.
            </summary>
            <remarks>
            Colliders whose distance is less than the sum of their ContactOffset values will generate contacts. The contact offset must be positive. Contact offset allows the collision detection system to predictively enforce the contact constraint even when the objects are slightly separated.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collider.Material">
            <summary>
            Gets or sets the physical material used by this collider.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.AttachedRigidBody">
            <summary>
            Gets the attached rigidbody.
            </summary>
        </member>
        <member name="T:FlaxEngine.Decal">
            <summary>
            Actor that draws the can be used to draw a custom decals on top of the other objects.
            </summary>
        </member>
        <member name="M:FlaxEngine.Decal.CreateAndSetVirtualMaterialInstance">
            <summary>
            Utility to crate a new virtual Material Instance asset, set its parent to the currently applied material, and assign it to the decal. Can be used to modify the decal material parameters from code.
            </summary>
            <returns>The created virtual material instance.</returns>
        </member>
        <member name="M:FlaxEngine.Decal.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Decal"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Decal.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Decal"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Decal.Material">
            <summary>
            Gets or sets the decal material.
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.SortOrder">
            <summary>
            Gets or sets the decal rendering order. The higher values are render later (on top).
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.Size">
            <summary>
            Gets or sets the decal bounds size (in local space).
            </summary>
        </member>
        <member name="T:FlaxEngine.EmptyActor">
            <summary>
            Empty actor is useful to create hierarchy and/or hold scripts. See <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.EmptyActor.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.EmptyActor"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.EmptyActor.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.EmptyActor"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="T:FlaxEngine.EnvironmentProbe">
            <summary>
            Environment Probe can capture space around the objects to provide reflections.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.HasProbe">
            <summary>
            Gets a value indicating whether this instance has probe texture assigned.
            </summary>
            <value>
              <c>true</c> if this instance has probe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.IsUsingCustomProbe">
            <summary>
            Returns true if probe is using custom cube texture (not baked one).
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.ScaledRadius">
            <summary>
            Gets the probe scaled radius parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.EnvironmentProbe"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.EnvironmentProbe"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Brightness">
            <summary>
            Gets or sets probe brightness parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Radius">
            <summary>
            Gets or sets probe radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.AutoUpdate">
            <summary>
            Gets or sets value indicating if probe should be updated automatically on change.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.CaptureNearPlane">
            <summary>
            Gets or sets the probe capture camera near plane distance..
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.CustomProbe">
            <summary>
            Gets or sets the custom probe texture to be used during reflections pass rendering. Use null if disable custom probe feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Probe">
            <summary>
            Gets the probe texture used during rendering (baked or custom one).
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.Bake">
            <summary>
            Requests probe texture baking. It won't be performed now but on async graphics rendering task.
            </summary>
        </member>
        <member name="T:FlaxEngine.ExponentialHeightFog">
            <summary>
            Used to create fogging effects such as clouds but with a density that is related to the height of the fog.
            </summary>
        </member>
        <member name="M:FlaxEngine.ExponentialHeightFog.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.ExponentialHeightFog"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.ExponentialHeightFog.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.ExponentialHeightFog"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogDensity">
            <summary>
            Gets or sets the fog density factor. Range: 0-0.6.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogInscatteringColor">
            <summary>
            Gets or sets the color of the fog.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogBaseHeightOffset">
            <summary>
            Gets or sets the offset from the fog object height where fog starts.
            </summary>
            <remarks>
            It's a bottom level of the fog where it has density equal 1 (fully dense). This parameter controls the height of the fog.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogTopHeightDensity">
            <summary>
            Gets or sets the fog density factor at top height level.
            </summary>
            <remarks>
            Should be close to 0. It get's scaled by the global density parameter.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogMaxOpacity">
            <summary>
            Gets or sets the maximum opacity of the fog.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.StartDistance">
            <summary>
            Gets or sets the distance from the camera that the fog will start, in world units.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogCutoffDistance">
            <summary>
            Gets or sets the distance past which scene elements will have no fog applied. Use value 0 to disable it.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringLight">
            <summary>
            Gets or sets the light used for Directional Inscattering.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringExponent">
            <summary>
            Gets or sets the side of the directional inscattering cone.
            </summary>
            <remarks>
            Note: there must be a directional light enabled for Directional Inscattering to be used.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringStartDistance">
            <summary>
            Gets or sets the start distance from the viewer of the directional inscattering.
            </summary>
            <remarks>
            Note: there must be a directional light enabled for Directional Inscattering to be used.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringColor">
            <summary>
            Gets or sets the color of the directional inscattering.
            </summary>
            <remarks>
            Note: there must be a directional light enabled for Directional Inscattering to be used.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogEnable">
            <summary>
            Whether to enable Volumetric fog.
            </summary>
            <remarks>
            Graphics quality settings control the resolution of the fog simulation.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogScatteringDistribution">
            <summary>
            Gets or sets the value that controls the scattering phase function - how much incoming light scatters in various directions.
            </summary>
            <remarks>
            A distribution value of 0 scatters equally in all directions, while 0.9 scatters predominantly in the light direction. In order to have visible volumetric fog light shafts from the side, the distribution will need to be closer to 0. Range: -0.9-0.9.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogAlbedo">
            <summary>
            Gets or sets the height fog particle reflectiveness used by volumetric fog.
            </summary>
            <remarks>
            Water particles in air have an albedo near white, while dust has slightly darker value.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogEmissive">
            <summary>
            Gets or sets the light emitted by height fog.
            </summary>
            <remarks>
            This is a density so more light is emitted the further you are looking through the fog. In most cases using a Skylight is a better choice, however, it may be useful in certain scenarios.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogExtinctionScale">
            <summary>
            Gets or sets the scale of the height fog particles extinction.
            </summary>
            <remarks>
            Values larger than 1 cause fog particles everywhere absorb more light. Range: 0.1-10.
            </remarks>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogDistance">
            <summary>
            Gets or sets the distance over which volumetric fog should be computed.
            </summary>
            <remarks>
            Larger values extend the effect into the distance but expose under-sampling artifacts in details.
            </remarks>
        </member>
        <member name="T:FlaxEngine.Foliage">
            <summary>
            Represents a foliage actor that contains a set of instanced meshes.
            </summary>
        </member>
        <member name="T:FlaxEngine.Foliage.Instance">
            <summary>
            The foliage instance data.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.Instance.Transform">
            <summary>
            The local-space transformation of the mesh relative to the foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.Instance.Type">
            <summary>
            The foliage type index. Foliage types are hold in foliage actor and shared by instances using the same model.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.Instance.Bounds">
            <summary>
            The cached instance bounds (in world space).
            </summary>
        </member>
        <member name="T:FlaxEngine.Foliage.ScalingModes">
            <summary>
            The foliage instances scaling modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.ScalingModes.Uniform">
            <summary>
            The uniform scaling. All axes are scaled the same.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.ScalingModes.Free">
            <summary>
            The free scaling. Each axis can have custom scale.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.ScalingModes.LockXZ">
            <summary>
            The lock XZ plane axis. Axes X and Z are constrained to-gather and axis Y is free.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.ScalingModes.LockXY">
            <summary>
            The lock XY plane axis. Axes X and Y are constrained to-gather and axis Z is free.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.ScalingModes.LockYZ">
            <summary>
            The lock YZ plane axis. Axes Y and Z are constrained to-gather and axis X is free.
            </summary>
        </member>
        <member name="T:FlaxEngine.Foliage.TypeOptions">
            <summary>
            The foliage instance type options (packed into single structure - raw data).
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.CullDistance">
            <summary>
            The per-instance cull distance.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.CullDistanceRandomRange">
            <summary>
            The per-instance cull distance randomization range (randomized per instance and added to master CullDistance value).
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintDensity">
            <summary>
            The foliage instances density defined in instances count per 1000x1000 units area.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintRadius">
            <summary>
            The minimum radius between foliage instances.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintGroundSlopeAngleMin">
            <summary>
            The minimum ground slope angle to paint foliage on it (in degrees).
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintGroundSlopeAngleMax">
            <summary>
            The maximum ground slope angle to paint foliage on it (in degrees).
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintScaling">
            <summary>
            The scaling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintScaleMin">
            <summary>
            The scale minimum values per axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PaintScaleMax">
            <summary>
            The scale maximum values per axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PlacementOffsetY">
            <summary>
            The per-instance random offset range on axis Y.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PlacementRandomPitchAngle">
            <summary>
            The random pitch angle range (uniform in both ways around normal vector).
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PlacementRandomRollAngle">
            <summary>
            The random roll angle range (uniform in both ways around normal vector).
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.DensityScalingScale">
            <summary>
            The density scaling scale applied to the global scale for the foliage instances of this type. Can be used to boost or reduce density scaling effect on this foliage type. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.ReceiveDecals">
            <summary>
            Determines whenever this meshes can receive decals.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.UseDensityScaling">
            <summary>
            Flag used to determinate whenever use global foliage density scaling for instances of this foliage type.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PlacementAlignToNormal">
            <summary>
            If checked, instances will be aligned to normal of the placed surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.Foliage.TypeOptions.PlacementRandomYaw">
            <summary>
            If checked, instances will use randomized yaw when placed. Random yaw uses will rotation range over the Y axis.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Foliage"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Foliage"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Foliage.GlobalDensityScale">
            <summary>
            Gets or sets the global density scale for all foliage instances. The default value is 1. Use values from range 0-1. Lower values decrease amount of foliage instances in-game. Use it to tweak game performance for slower devices.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.InstancesCount">
            <summary>
            Gets the total amount of foliage instances added to the actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.GetInstance(System.Int32,FlaxEngine.Foliage.Instance@)">
            <summary>
            Gets the foliage instance data.
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
            <param name="value">The result instance data.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.SetInstance(System.Int32,FlaxEngine.Foliage.Instance@)">
            <summary>
            Sets the foliage instance data (the transform only).
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
            <param name="value">The instance data.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.AddInstance(FlaxEngine.Foliage.Instance@)">
            <summary>
            Adds the foliage instance. After adding/removing foliage instances always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> to prepare internal acceleration structures.
            </summary>
            <remarks>
            Input instance bounds are ignored (recalculated).
            </remarks>
            <param name="value">The instance data.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RemoveInstance(System.Int32)">
            <summary>
            Removes the foliage instance. After adding/removing foliage instances always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> to prepare internal acceleration structures.
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
        </member>
        <member name="P:FlaxEngine.Foliage.FoliageTypesCount">
            <summary>
            Gets the amount of foliage instance types defined for the given foliage actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageTypeModel(System.Int32)">
            <summary>
            Gets the model assigned to the foliage instance type.
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.SetFoliageTypeModel(System.Int32,FlaxEngine.Model)">
            <summary>
            Sets the model assigned to the foliage instance type.
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
            <param name="model">The model to assign. It cannot be null nor already used by the other instance type (it must be unique within the given foliage actor).</param>
        </member>
        <member name="M:FlaxEngine.Foliage.AddFoliageType(FlaxEngine.Model)">
            <summary>
            Adds the new foliage instance type.
            </summary>
            <param name="model">The model to assign. It cannot be null nor already used by the other instance type (it must be unique within the given foliage actor).</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RemoveFoliageType(System.Int32)">
            <summary>
            Removes the foliage instance type and all foliage instances using this type.
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageTypeInstancesCount(System.Int32)">
            <summary>
            Gets the total amount of the instanced that use the given foliage type.
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageTypeMaterials(System.Int32,FlaxEngine.MaterialBase[])">
            <summary>
            Gets the foliage instance type materials buffer (overrides).
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
            <param name="value">The array of materials to fill. It must be valid and have size of foliage type model material slots size. When this method returns it contains a set of materials used by the foliage type.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.SetFoliageTypeMaterials(System.Int32,System.IntPtr[])">
            <summary>
            Sets the foliage instance type materials buffer (overrides).
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
            <param name="value">The array of materials to set (raw pointers to unmanaged instances). It must be valid and have size of foliage type model material slots size.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageTypeOptions(System.Int32,FlaxEngine.Foliage.TypeOptions@)">
            <summary>
            Gets the foliage instance type options.
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
            <param name="value">The result options container.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.SetFoliageTypeOptions(System.Int32,FlaxEngine.Foliage.TypeOptions@)">
            <summary>
            Sets the foliage instance type options.
            </summary>
            <param name="index">The zero-based index of the foliage instance type descriptor.</param>
            <param name="value">The options to set.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RebuildClusters">
            <summary>
            Rebuilds the clusters (quad tree structure).
            </summary>
        </member>
        <member name="T:FlaxEngine.Joint">
            <summary>
            A base class for all Joint types. Joints constrain how two rigidbodies move relative to one another (for example a door hinge). One of the bodies in the joint must always be movable (non-kinematic).
            </summary>
        </member>
        <member name="E:FlaxEngine.Joint.JointBreak">
            <summary>
            Occurs when a joint gets broken during simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.Target">
            <summary>
            Gets or sets the target actor for the joint. It has to be RigidBody or CharacterController.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.BreakForce">
            <summary>
            Gets or sets the break force. Determines the maximum force the joint can apply before breaking. Broken joints no longer participate in physics simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.BreakTorque">
            <summary>
            Gets or sets the break torque. Determines the maximum torque the joint can apply before breaking. Broken joints no longer participate in physics simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.EnableCollision">
            <summary>
            Determines whether collisions between the two bodies managed by the joint are enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.TargetAnchor">
            <summary>
            Gets or sets the target anchor.
            </summary>
            <remarks>
            This is the relative pose which locates the joint frame relative to the target actor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Joint.TargetAnchorRotation">
            <summary>
            Gets or sets the target anchor rotation.
            </summary>
            <remarks>
            This is the relative pose rotation which locates the joint frame relative to the target actor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Joint.CurrentForce">
            <summary>
            Gets the current force applied by the solver to maintain all constraints.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.CurrentTorque">
            <summary>
            Gets the current torque applied by the solver to maintain all constraints.
            </summary>
        </member>
        <member name="T:FlaxEngine.Light">
            <summary>
            Base class for all light types.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.Color">
            <summary>
            Gets or sets the light emission color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.Brightness">
            <summary>
            Gets or sets light brightness parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.ViewDistance">
            <summary>
            Gets or sets the light view distance. Controls light visibility range. The distance at which the light be completely faded. Use value 0 to always draw a light.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.IndirectLightingIntensity">
            <summary>
            Gets or sets the factor that controls how much this light will contribute indirect lighting. When set to 0, there is no GI from the light. The default value is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.VolumetricScatteringIntensity">
            <summary>
            Gets or sets the factor that controls how much this light will contribute to the Volumetric Fog. When set to 0, there is no contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.CastVolumetricShadow">
            <summary>
            Toggles whether or not to cast a volumetric shadow for lights contributing to Volumetric Fog
            </summary>
            <remarks>
            Also shadows casting by this light should be enabled in order to make it cast volumetric fog shadow.
            </remarks>
        </member>
        <member name="T:FlaxEngine.NavLink">
            <summary>
            The off-mesh link objects used to define a custom point-to-point edge within the navigation graph. An off-mesh connection is a user defined traversable connection made up to two vertices, at least one of which resides within a navigation mesh polygon allowing movement outside the navigation mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavLink.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.NavLink"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavLink.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.NavLink"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.NavLink.Start">
            <summary>
            Gets or sets the start location which transform is representing link start position. It is defined in local-space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.End">
            <summary>
            Gets or sets the end location which transform is representing link end position. It is defined in local-space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.Radius">
            <summary>
            Gets or sets the radius of the agents that can go through the link.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.BiDirectional">
            <summary>
            Gets or sets the flag used to define links that can be traversed in both directions. When set to false the link can only be traversed from start to end.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavMeshBoundsVolume">
            <summary>
            A special type of volume that defines the areas of the scene in which navigation meshes are generated.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavMeshBoundsVolume.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.NavMeshBoundsVolume"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavMeshBoundsVolume.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.NavMeshBoundsVolume"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.NavMeshBoundsVolume.Size">
            <summary>
            Gets or sets size of the volume in the local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavMeshBoundsVolume.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect">
            <summary>
            The particle system instance that plays the particles simulation in the game.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.SimulationUpdateMode">
            <summary>
            The particles simulation update modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.SimulationUpdateMode.Realtime">
            <summary>
            Use realtime simulation updates. Updates particles during every game logic update.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.SimulationUpdateMode.FixedTimestep">
            <summary>
            Use fixed timestep delta time to update particles simulation with a custom frequency.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.ParameterType">
            <summary>
            Particle effect parameter types.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Bool">
            <summary>
            The bool.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Integer">
            <summary>
            The integer.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Float">
            <summary>
            The float.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Vector2">
            <summary>
            The vector2.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Vector3">
            <summary>
            The vector3.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Vector4">
            <summary>
            The vector4.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.NormalMap">
            <summary>
            The normal map.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.String">
            <summary>
            The string.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Box">
            <summary>
            The box.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Rotation">
            <summary>
            The rotation.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Transform">
            <summary>
            The transform.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Asset">
            <summary>
            The asset.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Actor">
            <summary>
            The actor.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Rectangle">
            <summary>
            The rectangle.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.CubeTexture">
            <summary>
            The cube texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.SceneTexture">
            <summary>
            The scene texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.RenderTarget">
            <summary>
            The render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.Matrix">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.RenderTargetArray">
            <summary>
            The render target array.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.RenderTargetVolume">
            <summary>
            The render target volume.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterType.RenderTargetCube">
            <summary>
            The render target cube.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.Parameter">
            <summary>
            Particle effect variable object. Allows to modify particle effect parameter at runtime.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.Effect">
            <summary>
            Gets the parent effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.Emitter">
            <summary>
            Gets the emitter asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.EmitterIndex">
            <summary>
            Gets the index of the emitter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.ParamIndex">
            <summary>
            Gets the index of the parameter (in the emitter parameters list).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.Type">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.IsPublic">
            <summary>
            Gets a value indicating whether this parameter is public.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect._parametersHash">
            <summary>
            Helper value used to keep parameters collection in sync with actual backend data.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameters">
            <summary>
            Gets the effect parameters collection. Those parameters are instanced from the <see cref="P:FlaxEngine.ParticleEffect.ParticleSystem"/> that contains a linear list of emitters and every emitter has a list of parameters.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParam(System.String,System.String)">
            <summary>
            Gets the particle emitter parameter.
            </summary>
            <param name="emitterName">The name of the emitter.</param>
            <param name="paramName">The name of the parameter.</param>
            <returns>The found parameter or null if missing.</returns>
        </member>
        <member name="E:FlaxEngine.ParticleEffect.ParametersChanged">
            <summary>
            Occurs when particle effect parameters collection gets changed.
            It's called on <see cref="P:FlaxEngine.ParticleEffect.ParticleSystem"/> asset changed or when one of the emitters gets reloaded (eg. after edit in editor).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.ParticleEffect"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.ParticleEffect"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParticleSystem">
            <summary>
            Gets or sets the particle system to play.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UpdateMode">
            <summary>
            Gets or sets the particles simulation update mode. Defines how to update particles emitter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.FixedTimestep">
            <summary>
            Gets or sets the fixed timestep for simulation updates. Used only if UpdateMode is set to FixedTimestep.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.SimulationSpeed">
            <summary>
            Gets or sets the particles simulation speed factor. Scales the particle system update delta time. Can be used to speed up or slow down the particles.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UseTimeScale">
            <summary>
            Gets or sets the global time scale usage for particle simulation. Determines whether the particle effect should take into account the global game time scale for simulation updates..
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.IsLooping">
            <summary>
            Gets or sets the particle system play mode looping. Determines whether the particle effect should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UpdateWhenOffscreen">
            <summary>
            If true, the particle simulation will be updated even when an actor cannot be seen by any camera. Otherwise, the simulation will stop running when the actor is off-screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Time">
            <summary>
            Gets or sets the current time position of the particle system timeline animation playback (in seconds).
            </summary>
            <remarks>
            Please not that setting time value does not perform proper reving operation but changes the current animation position (editing value might result in flickered update).
            </remarks>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.CustomViewRenderTask">
            <summary>
            Gets or sets the custom render task used as a view information source (effect will use its render buffers and rendering resolution information for particles simulation).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.LastUpdateTime">
            <summary>
            Gets or sets the last game time when particle system was updated. Value 01 indicates no previous updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.CPUParticlesCount">
            <summary>
            Gets the CPU particles count (total).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.ResetSimulation">
            <summary>
            Resets the particles simulation state (clears the instance state data but preserves the instance parameters values).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.UpdateSimulation">
            <summary>
            Performs the full particles simulation update (postponed for the next particle manager update).
            </summary>
        </member>
        <member name="T:FlaxEngine.StaticModel">
            <summary>
            Renders model on the screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.Entries">
            <summary>
            Gets the model entries collection. Each <see cref="T:FlaxEngine.ModelEntryInfo"/> contains data how to render meshes using this entry (transformation, material, shadows casting, etc.).
            </summary>
            <remarks>
            It's null if the <see cref="P:FlaxEngine.StaticModel.Model"/> property is null or asset is not loaded yet.
            </remarks>
        </member>
        <member name="E:FlaxEngine.StaticModel.EntriesChanged">
            <summary>
            Occurs when entries collection gets changed.
            It's called on <see cref="T:FlaxEngine.StaticModel"/> model changed or when model asset gets reloaded, etc.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.StaticModel"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.StaticModel"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.StaticModel.ScaleInLightmap">
            <summary>
            Gets or sets model scale in lightmap parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.BoundsScale">
            <summary>
            Gets or sets the model bounds scale. It is useful when using Position Offset to animate the vertices of the object outside of its bounds.
            </summary>
            <remarks>
            Increasing the bounds of an object will reduce performance and shadow quality.
            </remarks>
        </member>
        <member name="P:FlaxEngine.StaticModel.HiddenShadow">
            <summary>
            Gets or sets hidden shadow flag. If set to true, the object will cast a shadow but won't be visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.Model">
            <summary>
            Gets or sets model asset to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.LODBias">
            <summary>
            Gets or sets the model Level Of Detail bias value. Allows to increase or decrease rendered model quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.ForcedLOD">
            <summary>
            Gets or sets the model forced Level Of Detail index. Allows to bind the given model LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.GetMaterial(System.Int32,System.Int32)">
            <summary>
            Gets material used to render mesh at given index (overriden by model instance buffer or model default).
            </summary>
            <param name="meshIndex">Mesh index</param>
            <param name="lodIndex">Level of Detail index</param>
            <returns>Material or null if not assigned.</returns>
        </member>
        <member name="M:FlaxEngine.StaticModel.ResetMeshTransformations">
            <summary>
            Resets all meshes local transformations.
            </summary>
        </member>
        <member name="T:FlaxEngine.PostFxVolume">
            <summary>
            A special type of volume that blends custom set of post process settings into the rendering pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostFxVolume.Settings">
            <summary>
            Gets the post processing settings.
            </summary>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.Internal_SetData(System.IntPtr)">
            <summary>
            Updates cached Settings.data from unmanaged data
            </summary>
            <param name="ptr">The unmanaged data pointer.</param>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.Internal_GetData(System.IntPtr,System.Boolean)">
            <summary>
            Sends cached Settings.data to unmanaged data
            </summary>
            <param name="ptr">The unmanaged data pointer.</param>
            <param name="forceGet">True if get data by force, even if no change has been registered.</param>
            <returns>True if data has been modified, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.PostFxVolume"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.PostFxVolume"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.Size">
            <summary>
            Gets or sets size of the volume in the local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.Priority">
            <summary>
            Gets or sets the order in which multiple volumes are blended together. The volume with the highest priority takes precedence over all other overlapping volumes.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.BlendRadius">
            <summary>
            Gets or sets the distance inside the volume at which blending with the volume's settings occurs.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.BlendWeight">
            <summary>
            Gets or sets the amount of influence the volume's properties have. 0 is no effect; 1 is full effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.IsBounded">
            <summary>
            Gets or sets the value indicating whether the bounds of the volume are taken into account. If false, the volume affects the entire world, regardless of its bounds. If true, the volume only has an effect within its bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="T:FlaxEngine.RigidBody">
            <summary>
            Physics simulation driven object.
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.CollisionEnter">
            <summary>
            Occurs when a collision start gets registered for one of the colliders attached to this rigidbody (it collides with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.CollisionExit">
            <summary>
            Occurs when a collision end gets registered for one of the colliders attached to this rigidbody (it ends colliding with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.TriggerEnter">
            <summary>
            Occurs when a trigger touching start gets registered for one of the colliders attached to this rigidbody (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.TriggerExit">
            <summary>
            Occurs when a trigger touching end gets registered for one of the colliders attached to this rigidbody (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.ClosestPoint(FlaxEngine.Vector3)">
            <summary>
            Gets a point on one of the colliders attached to the attached that is closest to a given location. 
            Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <returns>The result point on the rigidbody shape that is closest to the specified location.</returns>
        </member>
        <member name="M:FlaxEngine.RigidBody.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.RigidBody"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.RigidBody"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.RigidBody.IsKinematic">
            <summary>
            Enables kinematic mode for the rigidbody.
            </summary>
            <remarks>
            Kinematic rigidbodies are special dynamic actors that are not influenced by forces(such as gravity), and have no momentum. They are considered to have infinite mass and can push regular dynamic actors out of the way.Kinematics will not collide with static or other kinematic objects.<para>Kinematic rigidbodies are great for moving platforms or characters, where direct motion control is desired.</para><para>Kinematic rigidbodies are incompatible with CCD.</para>
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.EnableSimulation">
            <summary>
            If true simulation and collisions detection will be enabled for the rigidbody.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.UseCCD">
            <summary>
            If true Continuous Collision Detection (CCD) will be used for this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.EnableGravity">
            <summary>
            If object should have the force of gravity applied.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.StartAwake">
            <summary>
            If object should start awake, or if it should initially be sleeping.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.LinearDamping">
            <summary>
            Gets or sets the 'drag' force added to reduce linear movement.
            </summary>
            <remarks>
            Linear damping can be used to slow down an object. The higher the drag the more the object slows down.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.AngularDamping">
            <summary>
            Gets or sets the 'drag' force added to reduce angular movement.
            </summary>
            <remarks>
            Angular damping can be used to slow down the rotation of an object. The higher the drag the more the rotation slows down.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.MaxAngularVelocity">
            <summary>
            Gets or sets the maximum angular velocity that a simulated object can achieve.
            </summary>
            <remarks>
            The angular velocity of rigidbodies is clamped to MaxAngularVelocity to avoid numerical instability with fast rotating bodies. Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.OverrideMass">
            <summary>
            Override the auto computed mass.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.Mass">
            <summary>
            Gets or sets the mass value measured in kilograms (use override value only if EnableOverrideMass is enabled).
            </summary>
            <remarks>
            The object mass value is computed from the density and attached colliders (taking into account other parameters like MassScale). Use may override it by enabling OverrideMass and providing a custom value. Setting this property automatically overrides the calculated value.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.MassScale">
            <summary>
            Gets or sets the per-instance scaling of the mass.
            </summary>
            <remarks>
            Used only for auto computed mass, not the overriden value.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.UpdateMassWhenScaleChanges">
            <summary>
            If true, it will update mass when actor scale changes.
            </summary>
            <remarks>
            Used only when mass is not being overriden.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.CenterOfMassOffset">
            <summary>
            Gets or sets the user specified offset for the center of mass of this object, from the calculated location.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.Constraints">
            <summary>
            Gets or sets the object movement constraint flags that define degrees of freedom are allowed for the simulation of object.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the rigidbody.
            </summary>
            <remarks>
            It's used mostly to get the current velocity. Manual modifications may result in unrealistic behaviour.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the rigidbody measured in radians per second.
            </summary>
            <remarks>
            It's used mostly to get the current angular velocity. Manual modifications may result in unrealistic behaviour.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.MaxDepenetrationVelocity">
            <summary>
            Gets or sets the maximum depenetration velocity when rigidbody moving out of penetrating state.
            </summary>
            <remarks>
            This value controls how much velocity the solver can introduce to correct for penetrations in contacts. Using this property can smooth objects moving out of colliding state and prevent unstable motion.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.SleepThreshold">
            <summary>
            Gets or sets the mass-normalized kinetic energy threshold below which an actor may go to sleep.
            </summary>
            <remarks>
            Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.CenterOfMass">
            <summary>
            Gets or sets the center of the mass in the local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.IsSleeping">
            <summary>
            Determines whether this rigidbody is sleeping.
            </summary>
            <remarks>
            When an actor does not move for a period of time, it is no longer simulated in order to save time. This state is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object, or one of its properties is changed by the user, the entire sleep mechanism should be transparent to the user.
            </remarks>
        </member>
        <member name="M:FlaxEngine.RigidBody.Sleep">
            <summary>
            Forces a rigidbody to sleep (for at least one frame).
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.WakeUp">
            <summary>
            Forces a rigidbody to wake up.
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddForce(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the world space to the rigidbody at its center of mass.
            </summary>
            <remarks>
            This will not induce a torque<para>ForceMode determines if the force is to be conventional or impulsive.</para><para>Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and ForceMode.VelocityChange respectively.</para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddRelativeForce(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the local space of the rigidbody (relative to its coordinate system) at its center of mass.
            </summary>
            <remarks>
            This will not induce a torque<para>ForceMode determines if the force is to be conventional or impulsive.</para><para>Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and ForceMode.VelocityChange respectively.</para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the local space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddTorque(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies an impulsive torque defined in the world space to the rigidbody.
            </summary>
            <remarks>
            ForceMode determines if the force is to be conventional or impulsive.<para>Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes ForceMode.Acceleration and ForceMode.VelocityChange respectively.The modes ForceMode.Force and ForceMode.Impulse also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then using ForceMode.Acceleration and ForceMode.VelocityChange respectively.</para>
            </remarks>
            <param name="torque">The torque to apply defined in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddRelativeTorque(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies an impulsive torque defined in the local space of the rigidbody (relative to its coordinate system).
            </summary>
            <remarks>
            ForceMode determines if the force is to be conventional or impulsive.<para>Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes ForceMode.Acceleration and ForceMode.VelocityChange respectively.The modes ForceMode.Force and ForceMode.Impulse also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then using ForceMode.Acceleration and ForceMode.VelocityChange respectively.</para>
            </remarks>
            <param name="torque">The torque to apply defined in the local space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.SetSolverIterationCounts(System.Int32,System.Int32)">
            <summary>
            Sets the solver iteration counts for the rigidbody.
            </summary>
            <remarks>
            The solver iteration count determines how accurately joints and contacts are resolved. If you are having trouble with jointed bodies oscillating and behaving erratically, then setting a higher position iteration count may improve their stability.<para>If intersecting bodies are being depenetrated too violently, increase the number of velocity  iterations. More velocity iterations will drive the relative exit velocity of the intersecting objects closer to the correct value given the restitution.</para><para>Default: 4 position iterations, 1 velocity iteration.</para>
            </remarks>
            <param name="minPositionIters">The minimum number of position iterations the solver should perform for this body.</param>
            <param name="minVelocityIters">The minimum number of velocity iterations the solver should perform for this body.</param>
        </member>
        <member name="T:FlaxEngine.Scene">
            <summary>
            Scene root actor object
            </summary>
        </member>
        <member name="F:FlaxEngine.Scene.AssetTypename">
            <summary>
            The scene asset typename. Type of the serialized scene asset data. Hidden class for the scene assets. Actors deserialization rules are strictly controlled under the hood by the C++ core parts. Mostly because scene asset has the same ID as scene root actor so loading both managed objects for scene asset and scene will crash (due to object ids conflict). This type does not exist in the engine assembly.
            </summary>
        </member>
        <member name="F:FlaxEngine.Scene.EditorPickerTypename">
            <summary>
            The scene asset typename used by the Editor asset picker control. Use it for asset reference picker filter.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.Save">
            <summary>
            Saves this scene to the asset.
            </summary>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scene.SaveAsync">
            <summary>
            Saves this scene to the asset. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.Unload">
            <summary>
            Unloads this scene.
            </summary>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scene.UnloadAsync">
            <summary>
            Unloads this scene. Done in the background.
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.LightmapSettings">
            <summary>
            Gets or sets the lightmap settings (per scene).
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Scene"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Scene"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Scene.Path">
            <summary>
            Gets path to the scene file. It's valid only in Editor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.Filename">
            <summary>
            Gets filename of the scene file. It's valid only in Editor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.DataFolderPath">
            <summary>
            Gets path to the scene data folder. It's valid only in Editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.ClearLightmaps">
            <summary>
            Removes all baked lightmap textures from the scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.BuildCSG(System.Single)">
            <summary>
            Builds the CSG geometry for the given scene.
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update.
            </remarks>
            <param name="timeoutMs">The timeout to wait before building CSG (in milliseconds).</param>
        </member>
        <member name="M:FlaxEngine.Scene.BuildNavMesh(System.Single)">
            <summary>
            Builds the navigation mesh for the given scene (discards all its tiles).
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update. Actual navmesh building in done via Thread Pool tasks in a background to prevent game thread stalls.
            </remarks>
            <param name="timeoutMs">The timeout to wait before building nav mesh (in milliseconds).</param>
        </member>
        <member name="M:FlaxEngine.Scene.BuildNavMesh(FlaxEngine.BoundingBox,System.Single)">
            <summary>
            Builds the navigation mesh for the given scene (builds only the tiles overlapping the given bounding box).
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update. Actual navmesh building in done via Thread Pool tasks in a background to prevent game thread stalls.
            </remarks>
            <param name="dirtyBounds">The bounds in world-space to build overlapping tiles.</param>
            <param name="timeoutMs">The timeout to wait before building nav mesh (in milliseconds).</param>
        </member>
        <member name="T:FlaxEngine.Sky">
            <summary>
            Sky actor renders atmosphere around the scene with fog and sky
            </summary>
        </member>
        <member name="M:FlaxEngine.Sky.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Sky"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Sky.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Sky"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Sky.SunLight">
            <summary>
            Gets or sets linked directional light actor that is used to simulate the sun.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunDiscScale">
            <summary>
            Gets or sets the sun disc scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunPower">
            <summary>
            Gets or sets the sun power.
            </summary>
        </member>
        <member name="T:FlaxEngine.Skybox">
            <summary>
            Skybox actor renders sky using custom cube texture or material
            </summary>
        </member>
        <member name="M:FlaxEngine.Skybox.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Skybox"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Skybox.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Skybox"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Skybox.CubeTexture">
            <summary>
            Gets or sets skybox cube texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.CustomMaterial">
            <summary>
            Gets or sets skybox custom material used to override default.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.Color">
            <summary>
            Gets or sets skybox color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Terrain">
            <summary>
            Represents a single terrain object.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.UnitsPerVertex">
            <summary>
            The constant amount of units per terrain geometry vertex (can be adjusted per terrain instance using non-uniform scale factor).
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.MaxLODs">
            <summary>
            The maximum amount of levels of detail for the terrain chunks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.PatchChunksCount">
            <summary>
            The constant amount of terrain chunks per terrain patch object.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.PatchEdgeChunksCount">
            <summary>
            The constant amount of terrain chunks on terrain patch object edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.MaxSplatmapsCount">
            <summary>
            The terrain splatmaps amount limit. Each splatmap can hold up to 4 layer weights.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.AddPatch(System.Int32,System.Int32)">
            <summary>
            Adds the patch.
            </summary>
            <param name="patchX">The patch X location (coordinate).</param>
            <param name="patchZ">The patch Z location (coordinate).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchHeightMap(FlaxEngine.Int2@,System.Single[],System.Byte[],System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="heightMap">The height map. Each array item contains a height value (2D inlined array). It should has size equal (chunkSize*4+1)^2.</param>
            <param name="holesMask">The holes mask (optional). Normalized to 0-1 range values with holes mask per-vertex. Must match the heightmap dimensions.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchHeightMap(FlaxEngine.Int2@,System.Int32,System.Single*,System.Byte*,System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="heightMapLength">The height map array length. It must match the terrain descriptor, so it should be equal (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="heightMap">The height map. Each array item contains a height value (2D inlined array).</param>
            <param name="holesMask">The holes mask (optional). Normalized to 0-1 range values with holes mask per-vertex. Must match the heightmap dimensions.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchSplatMap(FlaxEngine.Int2@,System.Int32,FlaxEngine.Color32[],System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="index">The zero-based index of the splatmap texture.</param>
            <param name="splatMap">The splat map. Each array item contains 4 layer weights. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchSplatMap(FlaxEngine.Int2@,System.Int32,System.Int32,FlaxEngine.Color32*,System.Boolean)">
            <summary>
            Setups the terrain patch layer weights using the specified splatmaps data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="index">The zero-based index of the splatmap texture.</param>
            <param name="splatMapLength">The splatmap map array length. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="splatMap">The splat map. Each array item contains 4 layer weights.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a raycast against terrain collider.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single@,System.Single)">
            <summary>
            Performs a raycast against terrain collider.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single)">
            <summary>
            Performs a raycast against terrain collider, returns results in a RaycastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.ClosestPoint(FlaxEngine.Vector3)">
            <summary>
            Gets a point on the terrain collision surface that is closest to a given location.
            Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <returns>The result point on the collider that is closest to the specified location.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.GetChunkOverrideMaterial(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Gets the chunk material that overrides the terrain default one.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="chunkCoord">The chunk coordinates (x and z).</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetChunkOverrideMaterial(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.MaterialBase)">
            <summary>
            Sets the chunk material to override the terrain default one.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="chunkCoord">The chunk coordinates (x and z).</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Terrain"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Terrain"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Terrain.LODBias">
            <summary>
            Gets or sets the terrain Level Of Detail bias value. Allows to increase or decrease rendered terrain quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ForcedLOD">
            <summary>
            Gets or sets the terrain forced Level Of Detail index. Allows to bind the given terrain LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODDistribution">
            <summary>
            Gets or sets the terrain LODs distribution parameter. Adjusts terrain chunks transitions distances.
            </summary>
            <remarks>
            Use lower value to increase terrain quality or higher value to increase performance. Default value is 0.6.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Terrain.Material">
            <summary>
            Gets or sets the default material used for terrain rendering (chunks can override this).
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ScaleInLightmap">
            <summary>
            Gets or sets the terrain scale in lightmap (applied to all the chunks).
            </summary>
            <remarks>
            Use value higher than 1 to increase baked lighting resolution.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Terrain.BoundsExtent">
            <summary>
            Gets or sets the terrain chunks bounds extent. Values used to expand terrain chunks bounding boxes. Use it when your terrain material is performing vertex offset operations on a GPU.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.CollisionLOD">
            <summary>
            Gets or sets the terrain geometry LOD index used for collision.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.PhysicalMaterial">
            <summary>
            Gets or sets the default physical material used to define the terrain collider physical properties.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODCount">
            <summary>
            Gets the terrain Level Of Detail count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ChunkSize">
            <summary>
            Gets the terrain chunk quads amount per edge (square).
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.PatchesCount">
            <summary>
            Gets the terrain patches count. Each patch contains 16 chunks arranged into a 4x4 square.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.HasPatch(FlaxEngine.Int2@)">
            <summary>
            Check if terrain has the patch at the given coordinates.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <returns>True if has patch added, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchCoord(System.Int32,FlaxEngine.Int2@)">
            <summary>
            Gets the terrain patch coordinates (x and z) at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchBounds(System.Int32,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the terrain patch world bounds at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="bounds">The patch world bounds.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetChunkBounds(System.Int32,System.Int32,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the terrain chunk world bounds at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="chunkIndex">The zero-based index of the terrain chunk in the terrain patches collection.</param>
            <param name="bounds">The chunk world bounds.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.Setup(System.Int32,System.Int32)">
            <summary>
            Creates the terrain.
            </summary>
            <param name="lodCount">The LODs count. The actual amount of LODs may be lower due to provided chunk size (each LOD has 4 times less quads).</param>
            <param name="chunkSize">The size of the chunk (amount of quads per edge for the highest LOD). Must be power of two minus one (eg. 63 or 127).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.AddPatch(FlaxEngine.Int2@)">
            <summary>
            Adds the patch.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.RemovePatch(FlaxEngine.Int2@)">
            <summary>
            Removes the patch.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
        </member>
        <member name="T:FlaxEngine.TextRender">
            <summary>
            Text rendering object.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.TextRender"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.TextRender"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.TextRender.Text">
            <summary>
            Gets or sets text to render.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Color">
            <summary>
            Gets or sets text color.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Material">
            <summary>
            Gets or sets the material used for the text rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Font">
            <summary>
            Gets or sets the font asset used as a text characters source.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.FontSize">
            <summary>
            Gets or sets the font characters size.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.ShadowsMode">
            <summary>
            Gets or sets the shadows casting mode by this visual element.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Bounds">
            <summary>
            Gets or sets the text layout area rectangle.
            </summary>
            <remarks>
            Layout is defined in local space of the object (on XY plane).
            </remarks>
        </member>
        <member name="P:FlaxEngine.TextRender.HorizontalAlignment">
            <summary>
            Gets or sets the text horizontal alignment inside the layout rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.VerticalAlignment">
            <summary>
            Gets or sets the text vertical alignment inside the layout rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.TextWrapping">
            <summary>
            Gets or sets the text wrapping mode inside the layout bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.BaseLinesGapScale">
            <summary>
            Gets or sets the scale parameter for lines gap size
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.UpdateLayout">
            <summary>
            Updates the text vertex buffer layout and cached data if its dirty.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.LocalBox">
            <summary>
            Gets the axis=aligned bounding box of the text vertices in the local-space of the actor.
            </summary>
        </member>
        <member name="T:FlaxEngine.CanvasRenderMode">
            <summary>
            The canvas rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.ScreenSpace">
            <summary>
            The screen space rendering mode that places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.CameraSpace">
            <summary>
            The camera space rendering mode that places Canvas in a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.WorldSpace">
            <summary>
            The world space rendering mode that places Canvas as any other object in the scene. The size of the Canvas can be set manually using its Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a "diegetic interface".
            </summary>
        </member>
        <member name="T:FlaxEngine.CanvasRenderer">
            <summary>
            PostFx used to render the <see cref="T:FlaxEngine.UICanvas"/>. Used when render mode is <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
            <seealso cref="T:FlaxEngine.Rendering.PostProcessEffect" />
        </member>
        <member name="F:FlaxEngine.CanvasRenderer.Canvas">
            <summary>
            The canvas to render.
            </summary>
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.UseSingleTarget">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.Location">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.Order">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.CanvasRenderer.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.UICanvas">
            <summary>
            Root of the UI structure. Renders GUI and handles input events forwarding.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderMode">
            <summary>
            Gets or sets the canvas rendering mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderLocation">
            <summary>
            Gets or sets the canvas rendering location within rendering pipeline. Used only in <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Order">
            <summary>
            Gets or sets the canvas rendering and input events gather order. Created GUI canvas objects are sorted before rendering (from the lowest order to the highest order). Canvas with the highest order can handle input event first.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.ReceivesEvents">
            <summary>
            Gets or sets a value indicating whether canvas can receive the input events.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Size">
            <summary>
            Gets or sets the size of the canvas. Used only in <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.IgnoreDepth">
            <summary>
            Gets or sets a value indicating whether ignore scene depth when rendering the GUI (scene objects won't cover the interface).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderCamera">
            <summary>
            Gets or sets the camera used to place the GUI when render mode is set to <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Distance">
            <summary>
            Gets or sets the distance from the <see cref="P:FlaxEngine.UICanvas.RenderCamera"/> to place the plane with GUI. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.GUI">
            <summary>
            Gets the canvas GUI root control.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas.TestCanvasIntersectionDelegate">
            <summary>
            Delegate schema for the callback used to perform custom canvas intersection test. Can be used to implement a canvas tha has a holes or non-rectangular shape.
            </summary>
            <param name="location">The location of the point to test in coordinates of the canvas root control (see <see cref="P:FlaxEngine.UICanvas.GUI"/>).</param>
            <returns>True if canvas was hit, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.UICanvas.TestCanvasIntersection">
            <summary>
            The callback used to perform custom canvas intersection test. Can be used to implement a canvas tha has a holes or non-rectangular shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas.CalculateRayDelegate">
            <summary>
            Delegate schema for callback used to evaluate the world-space ray from the screen-space position (eg. project mouse position).
            </summary>
            <param name="location">The location in screen-space.</param>
            <param name="ray">The output ray in world-space.</param>
        </member>
        <member name="F:FlaxEngine.UICanvas.CalculateRay">
            <summary>
            The current implementation of the <see cref="T:FlaxEngine.UICanvas.CalculateRayDelegate"/> used to calculate the mouse ray in 3D from the 2D location. Cannot be null.
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.DefaultCalculateRay(FlaxEngine.Vector2@,FlaxEngine.Ray@)">
            <summary>
            The default implementation of the <see cref="T:FlaxEngine.UICanvas.CalculateRayDelegate"/> that uses the <see cref="P:FlaxEngine.Camera.MainCamera"/> to evaluate the 3D ray.
            </summary>
            <param name="location">The location in screen-space.</param>
            <param name="ray">The output ray in world-space.</param>
        </member>
        <member name="P:FlaxEngine.UICanvas.Bounds">
            <summary>
            Gets the world-space oriented bounding box that contains a 3D canvas.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Is2D">
            <summary>
            Gets a value indicating whether canvas is 2D (screen-space).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Is3D">
            <summary>
            Gets a value indicating whether canvas is 3D (world-space or camera-space).
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.GetWorldMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the world matrix used to transform the GUI from the local space to the world space. Handles canvas rendering mode
            </summary>
            <param name="world">The world.</param>
        </member>
        <member name="M:FlaxEngine.UICanvas.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.UICanvas"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="T:FlaxEngine.UIControl">
            <summary>
            Contains a single GUI control.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.Control">
            <summary>
            Gets or sets the GUI control used by this actor.
            </summary>
            <remarks>
            When changing the control, the previous one is disposed. Use <see cref="M:FlaxEngine.UIControl.UnlinkControl"/> to manage it on your own.
            </remarks>
        </member>
        <member name="P:FlaxEngine.UIControl.HasControl">
            <summary>
            Gets a value indicating whether this actor has control.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.Bounds">
            <summary>
            Gets the world-space oriented bounding box that contains a 3D control.
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.Get``1">
            <summary>
            Gets the control object cased to the given type.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>The control object.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.Is``1">
            <summary>
            Checks if the control object is of the given type.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>True if control object is of the given type.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.AddChildControl``1">
            <summary>
            Creates a new UIControl with the control of the given type and links it to this control as a child.
            </summary>
            <remarks>
            The current actor has to have a valid container control.
            </remarks>
            <typeparam name="T">Type of the child control to add.</typeparam>
            <returns>The created UIControl that contains a new control of the given type.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.UnlinkControl">
            <summary>
            Unlinks the control from the actor without disposing it or modifying.
            </summary>
        </member>
        <member name="F:FlaxEngine.UIControl.FallbackParentGetDelegate">
            <summary>
            The fallback callback used to handle <see cref="T:FlaxEngine.UIControl"/> parent container control to link when it fails to find the default parent. Can be used to link the controls into a custom control.
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.UIControl"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.UIControl"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="T:FlaxEngine.BinaryAsset">
            <summary>
            Base class for all binary assets.
            </summary>
        </member>
        <member name="M:FlaxEngine.BinaryAsset.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.BinaryAsset"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.BinaryAsset.Reimport">
            <summary>
            Reimports asset from the source file.
            </summary>
        </member>
        <member name="P:FlaxEngine.BinaryAsset.ImportPath">
            <summary>
            Gets imported file path from the asset metadata (may be null or empty if not available).
            </summary>
        </member>
        <member name="T:FlaxEngine.JsonAsset">
            <summary>
            Generic type of Json-format asset. It provides the managed representation of this resource data so it can be accessed via C# API.
            </summary>
        </member>
        <member name="M:FlaxEngine.JsonAsset.CreateInstance``1">
            <summary>
            Creates the serialized object instance from the json asset data.
            </summary>
            <returns>The created object or null.</returns>
        </member>
        <member name="M:FlaxEngine.JsonAsset.CreateInstance">
            <summary>
            Creates the serialized object instance from the json asset data.
            </summary>
            <returns>The created object or null.</returns>
        </member>
        <member name="M:FlaxEngine.JsonAsset.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.JsonAsset"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAsset.DataTypeName">
            <summary>
            Gets the data type name from the header. Allows to recognize the stored data type.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAsset.Data">
            <summary>
            Gets the data from the asset. Allows to deserialize stored object properties (from json format).
            </summary>
        </member>
        <member name="T:FlaxEngine.Prefab">
            <summary>
            Json asset that stores the collection of scene objects including actors and scripts. In general, it can serve as any grouping of scene objects (for example a level) or be used as a form of a template instantiated and reused throughout the scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.Prefab.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Prefab"/> object.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animation">
            <summary>
            Asset that contains an animation spline represented by a set of keyframes, each representing an endpoint of a linear curve.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animation.Info">
            <summary>
            Contains basic information about the animation asset contents.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.Info.Length">
            <summary>
            Length of the animation in seconds.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.Info.FramesCount">
            <summary>
            Amount of animation frames (some curve tracks may use less keyframes).
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.Info.ChannelsCount">
            <summary>
            Amount of animation channel tracks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.Info.KeyframesCount">
            <summary>
            The total amount of keyframes in the animation tracks.
            </summary>
        </member>
        <member name="M:FlaxEngine.Animation.GetInfo(FlaxEngine.Animation.Info@)">
            <summary>
            Gets the animation contents information.
            </summary>
            <param name="info">The output data with info.</param>
        </member>
        <member name="M:FlaxEngine.Animation.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Animation"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Length">
            <summary>
            Gets the length of the animation (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Duration">
            <summary>
            Gets the duration of the animation (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.FramesPerSecond">
            <summary>
            Gets the amount of the animation frames per second.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph">
            <summary>
            The Animation Graph is used to evaluate a final pose for the animated model for the current frame.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNodeArchetypeFactoryAttribute">
            <summary>
            The custom attribute that allows to specify the class that contains node archetype getter methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode">
            <summary>
            Base class for all custom nodes. Allows to override it and define own Anim Graph nodes in game scripts or via plugins.
            </summary>
            <remarks>See official documentation to learn more how to use and create custom nodes in Anim Graph.</remarks>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.InitData">
            <summary>
            The initial node data container structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.InitData.Values">
            <summary>
            The node values array. The first item is always the typename of the custom node type, second one is node group name, others are customizable by editor node archetype.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.InitData.BaseModel">
            <summary>
            The skinned model asset that is a base model for the graph (source of the skeleton).
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.Context">
            <summary>
            The node evaluation context structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Graph">
            <summary>
            The graph pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Node">
            <summary>
            The node pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.NodeId">
            <summary>
            The graph node identifier (unique per graph).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.BoxId">
            <summary>
            The requested box identifier to evaluate its value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.DeltaTime">
            <summary>
            The absolute time delta since last anim graph update for the current instance (in seconds). Can be used to animate or blend node logic over time.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.CurrentFrameIndex">
            <summary>
            The index of the current update frame. Can be used to detect if custom node hasn't been updated for more than one frame to reinitialize it in some cases.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.BaseModel">
            <summary>
            The skinned model asset that is a base model for the graph (source of the skeleton).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Instance">
            <summary>
            The instance of the animated model that during update.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.Impulse">
            <summary>
            The animation graph 'impulse' connections data container (the actual transfer is done via pointer as it gives better performance). 
            Container for skeleton nodes transformation hierarchy and any other required data. 
            Unified layout for both local and world transformation spaces.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.NodesCount">
            <summary>
            The nodes array size (elements count).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Unused">
            <summary>
            The unused field.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Nodes">
            <summary>
            The skeleton nodes transformation hierarchy nodes. Size always matches the Anim Graph skeleton description (access size from <see cref="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.NodesCount"/>). It's pointer to the unmanaged allocation (read-only).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.RootMotionTranslation">
            <summary>
            The root motion data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.RootMotionRotation">
            <summary>
            The root motion data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Position">
            <summary>
            The animation time position (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Length">
            <summary>
            The animation length (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.Load(FlaxEngine.AnimationGraph.CustomNode.InitData@)">
            <summary>
            Loads the node data from the serialized values and prepares the node to run. In most cases this method is called from the content loading thread (not the main game thread).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.Evaluate(FlaxEngine.AnimationGraph.CustomNode.Context@)">
            <summary>
            Evaluates the node based on inputs and node data.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>The node value for the given context (node values, output box id, etc.).</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.HasConnection(FlaxEngine.AnimationGraph.CustomNode.Context@,System.Int32)">
            <summary>
            Checks if th box of the given ID has valid connection to get its value.
            </summary>
            <param name="context">The context.</param>
            <param name="boxId">The input box identifier.</param>
            <returns>True if has connection, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.GetInputValue(FlaxEngine.AnimationGraph.CustomNode.Context@,System.Int32)">
            <summary>
            Gets the value of the input box of the given ID. Throws the exception if box has no valid connection.
            </summary>
            <param name="context">The context.</param>
            <param name="boxId">The input box identifier.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.GetOutputImpulseData(FlaxEngine.AnimationGraph.CustomNode.Context@)">
            <summary>
            Gets the data for the output skeleton nodes hierarchy. Each node can have only one cached nodes output. Use this method if your node performs skeleton nodes modifications.
            </summary>
            <param name="context">The context.</param>
            <returns>The impulse data. It contains empty nodes hierarchy allocated per-node. Modify it to adjust output custom skeleton nodes transformations.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.CopyImpulseData(FlaxEngine.AnimationGraph.CustomNode.Impulse*,FlaxEngine.AnimationGraph.CustomNode.Impulse*)">
            <summary>
            Copies the impulse data from the source to the destination container.
            </summary>
            <param name="destination">The destination data.</param>
            <param name="source">The source data.</param>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.AnimationGraph"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraph.BaseModel">
            <summary>
            Gets the base model asset used for the animation preview and the skeleton layout source.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.LoadSurface">
            <summary>
            Tries to load the animation graph surface from the asset.
            </summary>
            <returns>Loaded surface bytes or null if cannot load it or it's missing.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.SaveSurface(System.Byte[])">
            <summary>
            Updates the animation graph surface (save new one, discard cached data, reload asset).
            </summary>
            <param name="data">Surface data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.AudioFormat">
            <summary>
            Audio data storage format used by the runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioFormat.Raw">
            <summary>
            The raw PCM data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioFormat.Vorbis">
            <summary>
            The compressed audio data stored in the Vorbis format.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioClip">
            <summary>
            Audio clip stores audio data in a compressed or uncompressed format using a binary asset. Clips can be provided to audio sources or other audio methods to be played.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioClip.AudioDataInfo">
            <summary>
            Meta-data describing a chunk of audio.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioClip.AudioDataInfo.NumSamples">
            <summary>
            The total number of audio samples in the audio data (includes all channels).
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioClip.AudioDataInfo.SampleRate">
            <summary>
            The number of audio samples per second, per channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioClip.AudioDataInfo.NumChannels">
            <summary>
            The number of channels. Each channel has its own set of samples.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioClip.AudioDataInfo.BitDepth">
            <summary>
            The number of bits per sample.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Length">
            <summary>
            Gets the length of the audio clip (in seconds).
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AudioClip.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.AudioClip"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Format">
            <summary>
            Gets the audio data format.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioClip.GetInfo(FlaxEngine.AudioClip.AudioDataInfo@)">
            <summary>
            Gets the audio data info metadata.
            </summary>
            <param name="info">The output audio data header from the asset. May be invalid if asset is not loaded.</param>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractData(System.Byte[]@,FlaxEngine.AudioClip.AudioDataInfo@)">
            <summary>
            Extracts the source audio data from the asset storage. Loads the whole asset. The result data is in an asset format.
            </summary>
            <remarks>
            Throws an exception in case of error.
            </remarks>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info.</param>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractDataRaw(System.Byte[]@,FlaxEngine.AudioClip.AudioDataInfo@)">
            <summary>
            Extracts the raw audio data (PCM format) from the asset storage. Loads the whole asset.
            </summary>
            <remarks>
            Throws an exception in case of error.
            </remarks>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info.</param>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractDataFloat(System.Single[]@,FlaxEngine.AudioClip.AudioDataInfo@)">
            <summary>
            Extracts the raw audio data (PCM format) from the asset storage and converts it to the normalized float format (in range [-1;1])). Loads the whole asset.
            </summary>
            <remarks>
            Throws an exception in case of error.
            </remarks>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info. Keep in mind that output data has 32 bits float data not the signed PCM data.</param>
        </member>
        <member name="T:FlaxEngine.CollisionDataType">
            <summary>
            A <see cref="T:FlaxEngine.CollisionData"/> storage data type.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.ConvexMesh">
            <summary>
            A convex polyhedron represented as a set of vertices and polygonal faces. The number of vertices and faces of a convex mesh is limited to 255.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.TriangleMesh">
            <summary>
            A collision triangle mesh consists of a collection of vertices and the triangle indices.
            </summary>
        </member>
        <member name="T:FlaxEngine.ConvexMeshGenerationFlags">
            <summary>
            Set of flags used to generate model convex mesh. Allows to customize process.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.SkipValidation">
            <summary>
            Disables the convex mesh validation to speed-up hull creation. 
            Creating a convex mesh with invalid input data without prior validation
            may result in undefined behavior.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.UsePlaneShifting">
             <summary>
             Enables plane shifting vertex limit algorithm. 
            
             Plane shifting is an alternative algorithm for the case when the computed hull has more vertices
             than the specified vertex limit. 
             
             The default algorithm computes the full hull, and an OBB around the input vertices. This OBB is then sliced
             with the hull planes until the vertex limit is reached. The default algorithm requires the vertex limit
             to be set to at least 8, and typically produces results that are much better quality than are produced
             by plane shifting. 
             
             When plane shifting is enabled, the hull computation stops when vertex limit is reached.The hull planes
             are then shifted to contain all input vertices, and the new plane intersection points are then used to
             generate the final hull with the given vertex limit.Plane shifting may produce sharp edges to vertices
             very far away from the input cloud, and does not guarantee that all input vertices are inside the resulting
             hull. However, it can be used with a vertex limit as low as 4.
             </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.UseFastInteriaComputation">
            <summary>
            Inertia tensor computation is faster using SIMD code, but the precision is lower, which may result 
            in incorrect inertia for very thin hulls.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.ShiftVertices">
            <summary>
            Convex hull input vertices are shifted to be around origin to provide better computation stability.
            It is recommended to provide input vertices around the origin, otherwise use this flag to improve
            numerical stability.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionData">
            <summary>
            Represents a physics mesh that can be used with a MeshCollider. Physics mesh can be a generic triangle mesh or a convex mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionData.GetCookOptions(System.Int32@,FlaxEngine.ConvexMeshGenerationFlags@,System.Int32@)">
            <summary>
            Gets the set of options used to generate a collision data mesh.
            </summary>
            <param name="modelLodIndex">Index of the model LOD index used to generate a collision data (value provided during data cooking, may be higher than actual source model LODs collection size).</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit.</param>
        </member>
        <member name="M:FlaxEngine.CollisionData.CookCollision(FlaxEngine.CollisionDataType,FlaxEngine.Model,System.Int32,FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and updates the virtual asset. action cannot be performed on a main thread.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="type">The collision data type.</param>
            <param name="model">The source model.</param>
            <param name="modelLodIndex">The source model LOD index.</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
        </member>
        <member name="M:FlaxEngine.CollisionData.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.CollisionData"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.CollisionData.Type">
            <summary>
            Gets the type of the collision data.
            </summary>
        </member>
        <member name="P:FlaxEngine.CollisionData.Model">
            <summary>
            Gets the model asset used to generate a collision data.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontAsset">
            <summary>
            Font asset contains glyph collection and cached data used to render text
            </summary>
        </member>
        <member name="M:FlaxEngine.FontAsset.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.FontAsset"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.FamilyName">
            <summary>
            Gets font family name
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.StyleName">
            <summary>
            Gets font style name
            </summary>
        </member>
        <member name="M:FlaxEngine.FontAsset.CreateFont(System.Int32)">
            <summary>
            Creates font object of given characters size.
            </summary>
            <param name="size">Characters size.</param>
            <returns>Font object.</returns>
        </member>
        <member name="T:FlaxEngine.Model">
            <summary>
            Model asset that contains model object made of meshes which can rendered on the GPU.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxLODs">
            <summary>
            The maximum amount of levels of detail for the model.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxMeshes">
            <summary>
            The maximum amount of meshes per model LOD.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxMaterialSlots">
            <summary>
            The maximum allowed amount of material slots per model resource
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.MaterialSlots">
            <summary>
            Gets the material slots collection. Each slot contains information how to render mesh or meshes using it. See <see cref="P:FlaxEngine.Mesh.MaterialSlotIndex"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.MaterialSlotsCount">
            <summary>
            Gets the amount of the material slots used by this model.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.GetSlot(System.String)">
            <summary>
            Gets the material slot by the name.
            </summary>
            <param name="name">The slot name.</param>
            <returns>The material slot with the given name or null if cannot find it (asset may be not loaded yet).</returns>
        </member>
        <member name="P:FlaxEngine.Model.LODs">
            <summary>
            Gets the model level of details collection. Each level of detail contains array of meshes.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.SetupLODs(System.Int32[])">
            <summary>
            Setups the model LODs collection including meshes creation.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="meshesCountPerLod">The meshes count per LOD. Each model LOD contains a collection of meshes which has to be specified.</param>
        </member>
        <member name="M:FlaxEngine.Model.SetupMaterialSlots(System.Int32)">
            <summary>
            Setups the material slots collection.
            </summary>
            <param name="slotsCount">The slots count.</param>
        </member>
        <member name="M:FlaxEngine.Model.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Model"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.LoadedLODs">
            <summary>
            Gets amount of loaded model LODs.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.Box">
            <summary>
            Gets the model bounding box in local space (from LOD0).
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.MinScreenSize">
            <summary>
            Gets or sets the minimum screen size to draw model (the bottom limit). Used to cull small models. Set to 0 to disable this feature.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.Save(System.Boolean,System.String)">
            <summary>
            Saves asset to the file. It must be fully loaded.
            </summary>
            <remarks>
            Supported only in Editor. If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.
            </remarks>
            <param name="withMeshData">True if save also GPU mesh buffers, otherwise will keep data in storage unmodified. Valid only if saving the same asset to the same location and it's loaded. If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.</param>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate model asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ParticlesSimulationMode">
            <summary>
            The particles simulation execution mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.Default">
            <summary>
            The default model. Select the best simulation mode based on a target platform.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.CPU">
            <summary>
            Runs particles simulation on a CPU (always supported).
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.GPU">
            <summary>
            Runs particles simulation on a GPU (if supported).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticlesSimulationSpace">
            <summary>
            The particles simulation space modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationSpace.World">
            <summary>
            Simulates particles in the world space.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationSpace.Local">
            <summary>
            Simulates particles in the local space of the actor.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEmitter">
            <summary>
            Binary asset that contains a particle emitter definition graph for running particles simulation on CPU and GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Transform,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="transform">The spawn transform.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Transform,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="transform">The spawn transform.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.ParticleEmitter"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.LoadSurface(System.Boolean)">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <param name="createDefaultIfMissing">True if create default surface if missing, otherwise won't load anything.</param>
            <returns>Loaded surface bytes or null if cannot load it or it's missing.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.SaveSurface(System.Byte[])">
            <summary>
            Update emitter surface (save new one, discard cached data, reload asset).
            </summary>
            <param name="data">Surface data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ParticleSystem">
            <summary>
            Particle system contains a composition of particle emitters and playback information.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Transform,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="transform">The spawn transform.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="transform">The spawn transform.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.ParticleSystem"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.FramesPerSecond">
            <summary>
            Gets the frames amount per second of the timeline animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.DurationFrames">
            <summary>
            Gets the animation duration (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.Duration">
            <summary>
            Gets the animation duration (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Init(FlaxEngine.ParticleEmitter,System.Single,System.Single)">
            <summary>
            Initializes the particle system that plays a single particles emitter.
            </summary>
            <remarks>
            This can be used only for virtual assets.
            </remarks>
            <param name="emitter">The emitter to playback.</param>
            <param name="duration">The timeline animation duration in seconds.</param>
            <param name="fps">The amount of frames per second of the timeline animation.</param>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.LoadTimeline">
            <summary>
            Loads the particle system timeline data from the asset.
            </summary>
            <returns>Loaded timeline bytes or null if cannot load it.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.SaveTimeline(System.Byte[])">
            <summary>
            Saves the particle system timeline data. Timeline is saved to the asset and then asset is reloaded.
            </summary>
            <remarks>
            The cannot be used by virtual assets.
            </remarks>
            <param name="data">The timeline data.</param>
        </member>
        <member name="T:FlaxEngine.RawDataAsset">
            <summary>
            Raw bytes container asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.RawDataAsset.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.RawDataAsset"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.RawDataAsset.Data">
            <summary>
            Gets or sets the bytes array stored by this data container asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.RawDataAsset.Save(System.String)">
            <summary>
            Saves asset to the file. It must be fully loaded.
            </summary>
            <remarks>
            Supported only in Editor.
            </remarks>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate model asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.SceneAnimation">
            <summary>
            Scene animation timeline for animating objects and playing cut-scenes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SceneAnimation"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.FramesPerSecond">
            <summary>
            Gets the frames amount per second of the timeline animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.DurationFrames">
            <summary>
            Gets the animation duration (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.Duration">
            <summary>
            Gets the animation duration (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.LoadTimeline">
            <summary>
            Loads the scene animation timeline data from the asset.
            </summary>
            <returns>Loaded timeline bytes or null if cannot load it.</returns>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.SaveTimeline(System.Byte[])">
            <summary>
            Saves the scene animation timeline data. Timeline is saved to the asset and then asset is reloaded.
            </summary>
            <remarks>
            The cannot be used by virtual assets.
            </remarks>
            <param name="data">The timeline data.</param>
        </member>
        <member name="T:FlaxEngine.SkeletonMask">
            <summary>
            The skinned model skeleton bones boolean masking data.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkeletonMask.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SkeletonMask"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.Skeleton">
            <summary>
            Gets the skinned model asset used for the skeleton mask reference.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkeletonMask.GetMask(System.Boolean[])">
            <summary>
            Gets the skeleton bones masking array (matches the reference skeleton bones hierarchy).
            </summary>
            <param name="buffer">The mask buffer that can be used to reuse the allocation. Method will allocate a new one if the provided is invalid or null.</param>
        </member>
        <member name="M:FlaxEngine.SkeletonMask.Save(FlaxEngine.SkinnedModel,System.Boolean[])">
            <summary>
            Updates the asset data and saves it to the file. (saves new one, discards cached data, reloads asset).
            </summary>
            <param name="skeleton">The reference skeleton.</param>
            <param name="mask">The skeleton nodes masking data.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.SkinnedModel">
            <summary>
            Skinned model asset that contains model object made of meshes that can be rendered on the GPU using skeleton bones skinning.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedModel.MaxBones">
            <summary>
            The maximum allowed amount of skeleton bones to be used with skinned model.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.MaterialSlots">
            <summary>
            Gets the material slots collection. Each slot contains information how to render mesh or meshes using it.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.MaterialSlotsCount">
            <summary>
            Gets the amount of the material slots used by this model.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetSlot(System.String)">
            <summary>
            Gets the material slot by the name.
            </summary>
            <param name="name">The slot name.</param>
            <returns>The material slot with the given name or null if cannot find it (asset may be not loaded yet).</returns>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Meshes">
            <summary>
            Gets the skinned meshes collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Nodes">
            <summary>
            Gets or sets the skeleton nodes hierarchy.
            </summary>
            <remarks>
            Editing skeleton via <see cref="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[],FlaxEngine.SkeletonBone[],System.Boolean)"/> is only supported for the virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Bones">
            <summary>
            Gets or sets the skeleton bones hierarchy.
            </summary>
            <remarks>
            Editing skeleton via <see cref="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[],FlaxEngine.SkeletonBone[],System.Boolean)"/> is only supported for the virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupMeshes(System.Int32)">
            <summary>
            Setups the skinned model including meshes creation and skeleton definition setup. Ensure to init SkeletonData manually after the call.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="meshesCount">The meshes count.</param>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[],FlaxEngine.SkeletonBone[],System.Boolean)">
            <summary>
            Setups the skinned model skeleton.
            </summary>
            <param name="nodes">The nodes hierarchy. The first node must be a root one (with parent index equal -1).</param>
            <param name="bones">The bones hierarchy.</param>
            <param name="autoCalculateOffsetMatrix">If true then the OffsetMatrix for each bone will be auto-calculated by the engine, otherwise the provided values will be used.</param>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[])">
            <summary>
            Setups the skinned model skeleton. Uses the same nodes layout for skeleton bones and calculates the offset matrix by auto.
            </summary>
            <param name="nodes">The nodes hierarchy. The first node must be a root one (with parent index equal -1).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupMaterialSlots(System.Int32)">
            <summary>
            Setups the material slots collection.
            </summary>
            <param name="slotsCount">The slots count.</param>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetNodeByName(System.String,System.Int32@)">
            <summary>
            Gets the skeleton node index by node name.
            </summary>
            <param name="name">The node name.</param>
            <param name="index">The found node index or -1 if not found.</param>
            <returns>True if found that node, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetBoneByName(System.String,System.Int32@)">
            <summary>
            Gets the skeleton bone index by node name.
            </summary>
            <param name="name">The node name.</param>
            <param name="index">The found bone index or -1 if not found.</param>
            <returns>True if found that bone, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SkinnedModel"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Box">
            <summary>
            Gets the model bounding box in local space (rig pose, not animated).
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.MinScreenSize">
            <summary>
            Gets or sets the minimum screen size to draw model (the bottom limit). Used to cull small models. Set to 0 to disable this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.MeshesCount">
            <summary>
            Gets the amount of the skinned meshes contained in a model. Valid only if asset is loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.HasMeshesLoaded">
            <summary>
            Determines whether this skinned has all the meshes loaded (vertex/index buffers data is on a GPU).
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.Save(System.Boolean,System.String)">
            <summary>
            Saves asset to the file. It must be fully loaded.
            </summary>
            <remarks>
            Supported only in Editor. If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.
            </remarks>
            <param name="withMeshData">True if save also GPU mesh buffers, otherwise will keep data in storage unmodified. Valid only if saving the same asset to the same location and it's loaded. If you use saving with the GPU mesh data then the call has to be provided from the thread other than the main game thread.</param>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate model asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.BoxCollider">
            <summary>
            A box-shaped primitive collider.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxCollider.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.BoxCollider"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxCollider.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.BoxCollider"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.BoxCollider.Size">
            <summary>
            Gets or sets the size of the box, measured in the object's local space.
            </summary>
            <remarks>
            The box size will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.BoxCollider.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="T:FlaxEngine.CapsuleCollider">
            <summary>
            A capsule-shaped primitive collider.
            </summary>
            <remarks>
            Capsules are cylinders with a half-sphere at each end.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CapsuleCollider.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.CapsuleCollider"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.CapsuleCollider.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.CapsuleCollider"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.CapsuleCollider.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space.
            </summary>
            <remarks>
            The sphere radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CapsuleCollider.Height">
            <summary>
            Gets or sets the height of the capsule, measured in the object's local space.
            </summary>
            <remarks>
            The capsule height will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="T:FlaxEngine.CharacterController">
            <summary>
            Physical objects that allows to easily do player movement constrained by collisions without having to deal with a rigidbody.
            </summary>
        </member>
        <member name="T:FlaxEngine.CharacterController.CollisionFlags">
            <summary>
            Specifies which sides a character is colliding with.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.None">
            <summary>
            The character is not colliding.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Sides">
            <summary>
            The character is colliding to the sides.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Above">
            <summary>
            The character has collision above.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Below">
            <summary>
            The character has collision below.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.IsGrounded">
            <summary>
            Gets a value indicating whether this characters is grounded.
            </summary>
            <remarks>
            Returns true is the CharacterController was touching the ground during the last move.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CharacterController.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.CharacterController"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.CharacterController.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.CharacterController"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.CharacterController.Radius">
            <summary>
            Gets or sets the radius of the character capsule, measured in the object's local space.
            </summary>
            <remarks>
            The character capsule radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CharacterController.Height">
            <summary>
            Gets or sets the height of the character, measured in the object's local space.
            </summary>
            <remarks>
            The character height will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CharacterController.SlopeLimit">
            <summary>
            Gets or sets the slope limit (in degrees).
            </summary>
            <remarks>
            Limits the collider to only climb slopes that are less steep (in degrees) than the indicated value.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CharacterController.StepOffset">
            <summary>
            Gets or sets the step height.
            </summary>
            <remarks>
            The character will step up a stair only if it is closer to the ground than the indicated value. This should not be greater than the Character Controller's height or it will generate an error.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CharacterController.MinMoveDistance">
            <summary>
            Gets or sets the minimum move distance of the character controller.
            </summary>
            <remarks>
            The minimum travelled distance to consider. If travelled distance is smaller, the character doesn't move. This is used to stop the recursive motion algorithm when remaining distance to travel is small.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CharacterController.Velocity">
            <summary>
            Gets the current linear velocity of the Character Controller.
            </summary>
            <remarks>
            This allows tracking how fast the character is actually moving, for instance when it is stuck at a wall this value will be the near zero vector.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CharacterController.Flags">
            <summary>
            Gets the current collision flags.
            </summary>
            <remarks>
            Tells which parts of the character capsule collided with the environment during the last move call. It can be used to trigger various character animations.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CharacterController.SimpleMove(FlaxEngine.Vector3)">
            <summary>
            Moves the character with the given speed.
            </summary>
            <remarks>
            Velocity along the y-axis is ignored and the gravity is automatically applied. It will slide along colliders. Result collision flags is the summary of collisions that occurred during the Move.
            </remarks>
            <param name="speed">The speed (in cm/s).</param>
            <returns>The collision flags. It can be used to trigger various character animations.</returns>
        </member>
        <member name="M:FlaxEngine.CharacterController.Move(FlaxEngine.Vector3)">
            <summary>
            Moves the character with the given speed.
            </summary>
            <remarks>
            Velocity along the y-axis is ignored and the gravity is automatically applied. It will slide along colliders. Result collision flags is the summary of collisions that occurred during the Move.
            </remarks>
            <param name="speed">The displacement vector (in cm).</param>
            <returns>The collision flags. It can be used to trigger various character animations.</returns>
        </member>
        <member name="T:FlaxEngine.MeshCollider">
            <summary>
            A collider represented by an arbitrary mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.MeshCollider.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.MeshCollider"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.MeshCollider.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.MeshCollider"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.MeshCollider.CollisionData">
            <summary>
            Gets or sets the linked collision mesh data asset.
            </summary>
            <remarks>
            Linked collision data asset that contains convex mesh or triangle mesh used to represent a mesh collider shape.
            </remarks>
        </member>
        <member name="T:FlaxEngine.SphereCollider">
            <summary>
            A sphere-shaped primitive collider.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphereCollider.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SphereCollider"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphereCollider.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.SphereCollider"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.SphereCollider.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space.
            </summary>
            <remarks>
            The sphere radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="T:FlaxEngine.CreateWindowSettings">
            <summary>
            Settings for new window creation.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ParentPtr">
            <summary>
            The native parent window pointer.
            </summary>
        </member>
        <member name="P:FlaxEngine.CreateWindowSettings.Parent">
            <summary>
            The parent window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.MinimumSize">
            <summary>
            The minimum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.MaximumSize">
            <summary>
            The maximum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.StartPosition">
            <summary>
            The start position.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Fullscreen">
            <summary>
            True if show window fullscreen on show.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.HasBorder">
            <summary>
            Enable/disable window border.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.SupportsTransparency">
            <summary>
            Enable/disable window transparency support. Required to change window opacity property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ShowInTaskbar">
            <summary>
            True if show window on taskbar, otherwise it will be hidden.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ActivateWhenFirstShown">
            <summary>
            Auto activate window after show.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowInput">
            <summary>
            Allow window to capture input.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowMinimize">
            <summary>
            Allow window minimize action.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowMaximize">
            <summary>
            Allow window maximize action.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowDragAndDrop">
            <summary>
            Enable/disable drag and drop actions over the window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.IsTopmost">
            <summary>
            True if window topmost.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.IsRegularWindow">
            <summary>
            True if it's a regular window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.HasSizingFrame">
            <summary>
            Enable/disable window sizing frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ShowAfterFirstPaint">
            <summary>
            Enable/disable window auto-show after the first paint.
            </summary>
        </member>
        <member name="P:FlaxEngine.CreateWindowSettings.Default">
            <summary>
            Gets the default settings.
            </summary>
            <value>
            The default settings.
            </value>
        </member>
        <member name="T:FlaxEngine.D6JointAxis">
            <summary>
            Specifies axes that the D6 joint can constrain motion on.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.X">
            <summary>
            Movement on the X axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Y">
            <summary>
            Movement on the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Z">
            <summary>
            Movement on the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Twist">
            <summary>
            Rotation around the X axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.SwingY">
            <summary>
            Rotation around the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.SwingZ">
            <summary>
            Rotation around the Z axis.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointMotion">
            <summary>
            Specifies type of constraint placed on a specific axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Locked">
            <summary>
            Axis is immovable.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Limited">
            <summary>
            Axis will be constrained by the specified limits.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Free">
            <summary>
            Axis will not be constrained.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointDriveType">
            <summary>
            Type of drives that can be used for moving or rotating bodies attached to the joint.
            </summary>
            <remarks>
            Each drive is an implicit force-limited damped spring:
            force = spring * (target position - position) + damping * (targetVelocity - velocity)
            
            Alternatively, the spring may be configured to generate a specified acceleration instead of a force.
            
            A linear axis is affected by drive only if the corresponding drive flag is set.There are two possible models
            for angular drive : swing / twist, which may be used to drive one or more angular degrees of freedom, or slerp,
            which may only be used to drive all three angular degrees simultaneously.
            </remarks>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.X">
            <summary>
            Linear movement on the X axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Y">
            <summary>
            Linear movement on the Y axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Z">
            <summary>
            Linear movement on the Z axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Swing">
            <summary>
            Rotation around the Y axis using the twist/swing angular drive model. Should not be used together with Slerp mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Twist">
            <summary>
            Rotation around the Z axis using the twist/swing angular drive model. Should not be used together with Slerp mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Slerp">
            <summary>
            Rotation using spherical linear interpolation. Uses the SLERP angular drive mode which performs rotation
            by interpolating the quaternion values directly over the shortest path (applies to all three axes, which
            they all must be unlocked).
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointDrive">
            <summary>
            Specifies parameters for a drive that will attempt to move the joint bodies to the specified drive position and velocity.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Stiffness">
            <summary>
            The spring strength. Force proportional to the position error.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Damping">
            <summary>
            Damping strength. Force proportional to the velocity error.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.ForceLimit">
            <summary>
            The maximum force the drive can apply.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Acceleration">
            <summary>
            If true the drive will generate acceleration instead of forces. Acceleration drives are easier to tune as
            they account for the masses of the actors to which the joint is attached.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Default">
            <summary>
            The default <see cref="T:FlaxEngine.D6JointDrive"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6JointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.D6JointDrive"/> struct.
            </summary>
            <param name="stiffness">The stiffness.</param>
            <param name="damping">The damping.</param>
            <param name="forceLimit">The force limit.</param>
            <param name="acceleration">if set to <c>true</c> the drive will generate acceleration instead of forces.</param>
        </member>
        <member name="T:FlaxEngine.D6Joint">
            <summary>
            Physics joint that is the most customizable type of joint. This joint type can be used to create all other built-in joint types, and to design your own custom ones, but is less intuitive to use. Allows a specification of a linear constraint (for example for a slider), twist constraint (rotating around X) and swing constraint (rotating around Y and Z). It also allows you to constrain limits to only specific axes or completely lock specific axes.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6Joint.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.D6Joint"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6Joint.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.D6Joint"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.GetMotion(FlaxEngine.D6JointAxis)">
            <summary>
            Gets the motion type around the specified axis.
            </summary>
            <remarks>
            Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.
            </remarks>
            <param name="axis">The axis the degree of freedom around which the motion type is specified.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.SetMotion(FlaxEngine.D6JointAxis,FlaxEngine.D6JointMotion)">
            <summary>
            Sets the motion type around the specified axis.
            </summary>
            <remarks>
            Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.
            </remarks>
            <param name="axis">The axis the degree of freedom around which the motion type is specified.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.D6Joint.GetDrive(FlaxEngine.D6JointDriveType)">
            <summary>
            Gets the drive parameters for the specified drive type.
            </summary>
            <param name="index">The type of drive being specified.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.SetDrive(FlaxEngine.D6JointDriveType,FlaxEngine.D6JointDrive)">
            <summary>
            Sets the drive parameters for the specified drive type.
            </summary>
            <param name="index">The type of drive being specified.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitLinear">
            <summary>
            Determines the linear limit used for constraining translation degrees of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitTwist">
            <summary>
            Determines the angular limit used for constraining the twist (rotation around X) degree of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitSwing">
            <summary>
            Determines the cone limit used for constraining the swing (rotation around Y and Z) degree of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DrivePosition">
            <summary>
            Gets or sets the drive's target position relative to the joint's first body.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveRotation">
            <summary>
            Gets or sets the drive's target rotation relative to the joint's first body.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveLinearVelocity">
            <summary>
            Gets or sets the drive's target linear velocity.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveAngularVelocity">
            <summary>
            Gets or sets the drive's target angular velocity.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentTwist">
            <summary>
            Gets the twist angle of the joint.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentSwingYAngle">
            <summary>
            Gets the current swing angle of the joint from the Y axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentSwingZAngle">
            <summary>
            Gets the current swing angle of the joint from the Z axis.
            </summary>
        </member>
        <member name="T:FlaxEngine.DistanceJointFlag">
            <summary>
            Controls distance joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.None">
            <summary>
            The none limits.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.MinDistance">
            <summary>
            The minimum distance limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.MaxDistance">
            <summary>
            Uses the maximum distance limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.Spring">
            <summary>
            Uses the spring when maintaining limits
            </summary>
        </member>
        <member name="T:FlaxEngine.DistanceJoint">
            <summary>
            Physics joint that maintains an upper or lower (or both) bound on the distance between two bodies.
            </summary>
        </member>
        <member name="M:FlaxEngine.DistanceJoint.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.DistanceJoint"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.DistanceJoint.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.DistanceJoint"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.MinDistance">
            <summary>
            Gets or sets the allowed minimum distance for the joint.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.MinDistance flag is set. The minimum distance must be no more than the maximum distance. Default: 0, Range: [0, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.MaxDistance">
            <summary>
            Gets or sets the allowed maximum distance for the joint.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.MaxDistance flag is set. The maximum distance must be no less than the minimum distance. Default: 0, Range: [0, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.Tolerance">
            <summary>
            Gets or sets the error tolerance of the joint.
            </summary>
            <remarks>
            The distance beyond the joint's [min, max] range before the joint becomes active. Default: 25, Range: [0.1, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.SpringParameters">
            <summary>
            Gets or sets the spring parameters.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.Spring flag is set.
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.CurrentDistance">
            <summary>
            Gets the current distance of the joint.
            </summary>
        </member>
        <member name="T:FlaxEngine.FixedJoint">
            <summary>
            Physics joint that maintains a fixed distance and orientation between its two attached bodies.
            </summary>
        </member>
        <member name="M:FlaxEngine.FixedJoint.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.FixedJoint"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.FixedJoint.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.FixedJoint"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="T:FlaxEngine.HingeJointFlag">
            <summary>
            Flags that control hinge joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.Limit">
            <summary>
            The joint limit is enabled.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.Drive">
            <summary>
            The joint drive is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.HingeJointDrive">
            <summary>
            Properties of a drive that drives the joint's angular velocity towards a particular value.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.Velocity">
            <summary>
            Target velocity of the joint.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.ForceLimit">
            <summary>
            Maximum torque the drive is allowed to apply.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.GearRatio">
            <summary>
            Scales the velocity of the first body, and its response to drive torque is scaled down.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.FreeSpin">
            <summary>
            If the joint is moving faster than the drive's target speed, the drive will try to break.
            If you don't want the breaking to happen set this to true.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.Default">
            <summary>
            The default <see cref="T:FlaxEngine.HingeJointDrive"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.HingeJointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HingeJointDrive"/> struct.
            </summary>
            <param name="velocity">The velocity.</param>
            <param name="forceLimit">The force limit.</param>
            <param name="gearRatio">The gear ratio.</param>
            <param name="freeSpin">if set to <c>true</c> [free spin].</param>
        </member>
        <member name="T:FlaxEngine.HingeJoint">
            <summary>
            Physics joint that removes all but a single rotation degree of freedom from its two attached bodies (for example a door hinge).
            </summary>
        </member>
        <member name="M:FlaxEngine.HingeJoint.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.HingeJoint"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.HingeJoint.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.HingeJoint"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Drive">
            <summary>
            Gets or sets the joint drive properties.
            </summary>
            <remarks>
            Determines the drive properties of the joint. It drives the joint's angular velocity towards a particular value. You must enable the drive flag on the joint in order for the drive to be active.
            </remarks>
        </member>
        <member name="P:FlaxEngine.HingeJoint.CurrentAngle">
            <summary>
            Gets the current angle of the joint (in radians, in the range (-Pi, Pi]).
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.CurrentVelocity">
            <summary>
            Gets the current velocity of the joint.
            </summary>
        </member>
        <member name="T:FlaxEngine.SliderJointFlag">
            <summary>
            Flags that control slider joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.SliderJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.SliderJointFlag.Limit">
            <summary>
            The joint linear range limit is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.SliderJoint">
            <summary>
            Physics joint that removes all but a single translational degree of freedom. Bodies are allowed to move along a single axis.
            </summary>
        </member>
        <member name="M:FlaxEngine.SliderJoint.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SliderJoint"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SliderJoint.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.SliderJoint"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.SliderJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="P:FlaxEngine.SliderJoint.CurrentPosition">
            <summary>
            Gets the current displacement of the joint along its axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.CurrentVelocity">
            <summary>
            Gets the current velocity of the joint along its axis.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphericalJointFlag">
            <summary>
            Flags that control spherical joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalJointFlag.Limit">
            <summary>
            The joint cone range limit is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphericalJoint">
            <summary>
            Physics joint that removes all translational degrees of freedom but allows all rotational degrees of freedom. Essentially this ensures that the anchor points of the two bodies are always coincident. Bodies are allowed to rotate around the anchor points, and their rotation can be limited by an elliptical cone.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalJoint.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SphericalJoint"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalJoint.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.SphericalJoint"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.SphericalJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines a limit that constrains the movement of the joint to a specific minimum and maximum distance. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="T:FlaxEngine.LightWithShadow">
            <summary>
            Base class for all light types that can cast dynamic or static shadow. Contains more shared properties for point/spot/directional lights.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.MinimumRoughness">
            <summary>
            Gets or sets the minimum roughness value used to clamp material surface roughness during shading pixel.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsDistance">
            <summary>
            Gets or sets light shadows casting distance from view.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsFadeDistance">
            <summary>
            Gets light shadows fade off distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsMode">
            <summary>
            Gets or sets value indicating if how visual element casts shadows.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsSharpness">
            <summary>
            Gets or sets shadows sharpness value.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsStrength">
            <summary>
            Gets or sets shadows strength value.
            </summary>
            <remarks>
            Dynamic shadows blending strength. Default is 1 for fully opaque shadows, value 0 disables shadows.
            </remarks>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsDepthBias">
            <summary>
            Gets or sets depth bias used for shadow map comparison..
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsNormalOffsetScale">
            <summary>
            Gets or sets factor specifying the offset to add to the calculated shadow map depth with respect to the surface normal.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkyLight">
            <summary>
            Sky light captures the distant parts of the scene and applies it as a light. Allows to add ambient light.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkyLight.Modes">
            <summary>
            Sky light source mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkyLight.Modes.CaptureScene">
            <summary>
            The captured scene will be used as a light source.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkyLight.Modes.CustomTexture">
            <summary>
            The custom cube texture will be used as a light source.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SkyLight"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.SkyLight"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.SkyLight.AdditiveColor">
            <summary>
            Gets or sets the additional color to add. Source texture colors are sumed with it. Can be used to apply custom ambient color.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.Radius">
            <summary>
            Gets or sets light radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.Mode">
            <summary>
            Gets or sets the sky light source mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.SkyDistanceThreshold">
            <summary>
            Gets or sets the distance from the light at which any geometry should be treated as part of the sky.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.CustomTexture">
            <summary>
            Gets or sets the custom cube texture to be used during sky light rendering. Used only if Mode is set to CustomTexture.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.Bake">
            <summary>
            Requests probe texture baking. It won't be performed now but on async graphics rendering task.
            </summary>
        </member>
        <member name="T:FlaxEngine.DirectionalLight">
            <summary>
            Directional light emits light from direction in space.
            </summary>
        </member>
        <member name="M:FlaxEngine.DirectionalLight.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.DirectionalLight"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.DirectionalLight.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.DirectionalLight"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.DirectionalLight.CascadeCount">
            <summary>
            Gets or sets the number of cascades used for slicing the range of depth covered by the light during rendering shadows.
            </summary>
            <remarks>
            Values are 1, 2 or 4 cascades; a typical scene uses 4 cascades.
            </remarks>
        </member>
        <member name="T:FlaxEngine.PointLight">
            <summary>
            Point light emits light from point in all directions.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.ScaledRadius">
            <summary>
            Gets the light scaled radius parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.PointLight.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.PointLight"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.PointLight.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.PointLight"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.PointLight.Radius">
            <summary>
            Gets or sets light radius parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.SourceRadius">
            <summary>
            Gets or sets light source bulb radius parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.SourceLength">
            <summary>
            Gets or sets light source bulb length parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.FallOffExponent">
            <summary>
            Gets or sets light source radial falloff parameter. Controls the radial falloff of light when UseInverseSquaredFalloff is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.UseInverseSquaredFalloff">
            <summary>
            Gets or sets the value indicating whether to use physically based inverse squared distance falloff.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.IESTexture">
            <summary>
            Gets or sets the IES texture (light profiles from real world measured data).
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.UseIESBrightness">
            <summary>
            Enables or disables using light brightness from IES profile.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.IESBrightnessScale">
            <summary>
            Gets or sets the global scale for IES brightness contribution.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpotLight">
            <summary>
            Spot light emits light from the point in a given direction.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.ScaledRadius">
            <summary>
            Gets the light scaled radius parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpotLight.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SpotLight"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpotLight.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.SpotLight"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.SpotLight.Radius">
            <summary>
            Gets or sets light radius parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.SourceRadius">
            <summary>
            Gets or sets light source bulb radius parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.FallOffExponent">
            <summary>
            Gets or sets light source radial falloff parameter. Controls the radial falloff of light when UseInverseSquaredFalloff is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.UseInverseSquaredFalloff">
            <summary>
            Gets or sets the value indicating whether to use physically based inverse squared distance falloff.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.InnerConeAngle">
            <summary>
            Gets or sets the spot light's inner cone angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.OuterConeAngle">
            <summary>
            Gets or sets the spot light's outer cone angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.IESTexture">
            <summary>
            Gets or sets the IES texture (light profiles from real world measured data).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.UseIESBrightness">
            <summary>
            Enables or disables using light brightness from IES profile.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.IESBrightnessScale">
            <summary>
            Gets or sets the global scale for IES brightness contribution.
            </summary>
        </member>
        <member name="T:FlaxEngine.Material">
            <summary>
            Material asset that contains shader for rendering models on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.Material.CreateVirtualInstance">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Material.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Material"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Material.LoadSurface(System.Boolean)">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <param name="createDefaultIfMissing">True if create default surface if missing, otherwise won't load anything.</param>
            <returns>Loaded surface bytes or null if cannot load it or it's missing.</returns>
        </member>
        <member name="M:FlaxEngine.Material.SaveSurface(System.Byte[],FlaxEngine.Rendering.MaterialInfo)">
            <summary>
            Update material surface (save new one, discard cached data, reload asset).
            </summary>
            <param name="data">Surface data.</param>
            <param name="info">Material info structure.</param>
            <returns>True if cannot save it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.MaterialInstance">
            <summary>
            Instance of the <seealso cref="T:FlaxEngine.Material" /> with custom set of material parameter values.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInstance.CreateVirtualInstance">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.MaterialInstance.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.MaterialInstance"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialInstance.BaseMaterial">
            <summary>
            Gets or sets the base material. If value gets changed parameters collection is restored to the default values of the new material.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInstance.Save">
            <summary>
            Saves asset to the file.
            </summary>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Actor">
            <summary>
            Base class for all actor types on the scene
            </summary>
            <summary>
            Base class for all actor types on the scene
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsStatic">
            <summary>
            Returns true if object is fully static on the scene
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.EulerAngles">
            <summary>
            The rotation as Euler angles in degrees.
            </summary>
            <remarks>
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees
            around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Actor.LocalEulerAngles">
            <summary>
            The local rotation as Euler angles in degrees.
            </summary>
            <remarks>
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees
            around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Actor.Direction">
            <summary>
            Gets or sets the actor direction vector (aka forward direction).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scripts">
            <summary>
            Gets a list of all scripts attached to this object. It's read-only array. Use AddScript/RemoveScript to modify
            collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HasParent">
            <summary>
            Returns true if actor has parent
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HasChildren">
            <summary>
            Returns true if actor has any children
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.ResetLocalTransform">
            <summary>
            Resets actor local transform
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Actor)">
            <summary>
            Rotates the actor so the forward vector points at target's current position.
            </summary>
            <param name="target">The target object to point towards.</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Actor,FlaxEngine.Vector3)">
            <summary>
            Rotates the actor so the forward vector points at target's current position.
            </summary>
            <param name="target">The target object to point towards.</param>
            <param name="worldUp">The upward direction vector (in world space).</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Vector3)">
            <summary>
            Rotates the actor so the forward vector points at target's current position.
            </summary>
            <param name="worldPosition">The target point to look at.</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Rotates the actor so the forward vector points at target's current position.
            </summary>
            <param name="worldPosition">The target point to look at.</param>
            <param name="worldUp">The upward direction vector (in world space).</param>
        </member>
        <member name="M:FlaxEngine.Actor.As``1">
            <summary>
            Casts this actor instance to the given actor type.
            </summary>
            <typeparam name="T">The actor type.</typeparam>
            <returns>The actor instance cast to the given actor type.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.HasChild(System.String)">
            <summary>
            Returns true if actor object has child actor with given name
            </summary>
            <param name="name">Actor name</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor``1">
            <summary>
            Tries to find the actor of the given type in this actor tree (checks this actor and all children trees).
            </summary>
            <typeparam name="T">The type of the actor to find.</typeparam>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindScript``1">
            <summary>
            Tries to find the script of the given type in this script tree (checks this actor and all children trees).
            </summary>
            <typeparam name="T">The type of the script to find.</typeparam>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Find``1">
            <summary>
            Tries to find the actor of the given type in all the loaded scenes.
            </summary>
            <typeparam name="T">The type of the actor to find.</typeparam>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild(FlaxEngine.Actor,System.Boolean)">
            <summary>
            Sets actor parent to this object
            </summary>
            <param name="actor">Actor to link</param>
            <param name="worldPositionStays">Should actor world positions remain the same after parent change?</param>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild(System.Type)">
            <summary>
            Creates a new child actor of the given type.
            </summary>
            <param name="type">Type of the actor.</param>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild``1">
            <summary>
            Creates a new child actor of the given type.
            </summary>
            <typeparam name="T">Type of the actor.</typeparam>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetOrAddChild``1">
            <summary>
            Finds the child actor of the given type or creates a new one.
            </summary>
            <typeparam name="T">Type of the actor.</typeparam>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript(System.Type)">
            <summary>
            Creates a new script of a specific type and adds it to the actor.
            </summary>
            <param name="type">Type of the script to create.</param>
            <returns>The created script instance, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript``1">
            <summary>
            Creates a new script of a specific type and adds it to the actor.
            </summary>
            <typeparam name="T">Type of the script to create.</typeparam>
            <returns>The created script instance, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.IntersectsItself(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the actor and a ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.IntersectsItself(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the actor and a ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.ToBytes(FlaxEngine.Actor)">
            <summary>
            Serializes the actor object to the raw bytes. Serialized are actor properties and scripts but no child actors.
            Serializes references to the other objects in a proper way using IDs.
            </summary>
            <param name="actor">The actor.</param>
            <returns>The bytes array with serialized actor data. Returns null if fails.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Serialize(FlaxEngine.Actor)">
            <summary>
            Serializes the actor object to the Json string. Serialized are only actor properties but no child actors nor scripts. 
            Serializes references to the other objects in a proper way using IDs.
            </summary>
            <param name="actor">The actor to serialize.</param>
            <returns>The Json container with serialized actor data. Returns null if fails.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Deserialize(FlaxEngine.Actor,System.String)">
            <summary>
            Deserializes the actor object to the Json string. Deserializes are only actor properties but no child actors nor scripts. 
            </summary>
            <param name="actor">The actor to deserialize.</param>
            <param name="data">The serialized actor data (state).</param>
            <returns>The Json container with serialized actor data. Returns null if fails.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.ToBytes(FlaxEngine.Actor[])">
            <summary>
            Serializes the actor objects to the raw bytes. Serialized are actor properties and scripts but no child actors.
            Serializes references to the other objects in a proper way using IDs.
            </summary>
            <param name="actors">The actors.</param>
            <returns>The bytes array with serialized actors data. Returns null if fails.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromBytes(System.Byte[],System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Deserializes the actor objects from the raw bytes. Deserialized are actor properties and scripts but no child actors.
            </summary>
            <param name="data">The data.</param>
            <param name="idsMapping">
            The serialized objects ids mapping table used to change object ids and keep valid reference
            links. Use null value to skip ids mapping. To generate a new ids for the loaded objects use <see cref="M:FlaxEngine.Actor.TryGetSerializedObjectsIds(System.Byte[])"/> to extract the object ids from the data.
            </param>
            <returns>Spawned actors deserialized from the data. Returns null if fails.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild``1">
            <summary>
            Searches for a child actor of a specific type. If there are multiple actors matching the type, only the first one found is returned.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>Actor instance if found, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren``1">
            <summary>
            Searches for all actors of a specific type.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>All actors matching the specified type</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript``1">
            <summary>
            Searches for a child script of a specific type. If there are multiple scripts matching the type, only the first one found is returned.
            </summary>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScripts``1">
            <summary>
            Searches for all scripts of a specific type.
            </summary>
            <typeparam name="T">Type of the scripts to search for. Includes any scripts derived from the type.</typeparam>
            <returns>All scripts matching the specified type.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScriptInChildren``1(System.Boolean)">
            <summary>
            Searches for a child script of a specific type in this actor or any of its children. If there are multiple scripts matching the type, only the first one found is returned.
            </summary>
            <param name="includeDisabled">Determines whether include disabled scripts into results (disabled scripts and/or inactive actors).</param>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScriptsInChildren``1(System.Boolean)">
            <summary>
            Searches for all scripts of a specific type in this actor and any of its children.
            </summary>
            <param name="includeDisabled">Determines whether include inactive scripts into results (disabled scripts and/or inactive actors).</param>
            <typeparam name="T">Type of the scripts to search for. Includes any scripts derived from the type.</typeparam>
            <returns>All scripts matching the specified type and query options.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.DestroyChildren(System.Single)">
            <summary>
            Destroys the children. Calls Object.Destroy on every child actor and unlink them for the parent.
            </summary>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="P:FlaxEngine.Actor.WorldToLocalMatrix">
            <summary>
            Gets the matrix that transforms a point from the world space to local space of the actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.GetWorldToLocalMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the matrix that transforms a point from the world space to local space of the actor.
            </summary>
            <param name="worldToLocal">The world to local matrix.</param>
        </member>
        <member name="P:FlaxEngine.Actor.LocalToWorldMatrix">
            <summary>
            Gets the matrix that transforms a point from the local space of the actor to world space.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.GetLocalToWorldMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the matrix that transforms a point from the local space of the actor to world space.
            </summary>
            <param name="localToWorld">The world to local matrix.</param>
        </member>
        <member name="M:FlaxEngine.Actor.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Actor.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Actor"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scene">
            <summary>
            Gets the scene object which contains this actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Parent">
            <summary>
            Gets or sets parent actor (or null if actor has no parent)
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.SetParent(FlaxEngine.Actor,System.Boolean)">
            <summary>
            Sets parent actor with parameters
            </summary>
            <param name="newParent">New parent to assign</param>
            <param name="worldPositionLock">Should actor world positions remain the same after parent change</param>
        </member>
        <member name="P:FlaxEngine.Actor.OrderInParent">
            <summary>
            Gets or sets zero-based index in parent actor children list.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HideFlags">
            <summary>
            Gets or sets object hide flags.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Name">
            <summary>
            Gets or sets the actor name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.StaticFlags">
            <summary>
            Gets or sets actor static fags
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Layer">
            <summary>
            Gets or sets the layer actor is in. Can be used for selective rendering or ignoring raycasts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Tag">
            <summary>
            Gets or sets the object tag. Can be used to identify the objects.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsActive">
            <summary>
            Gets or sets active state of actor
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsActiveInHierarchy">
            <summary>
            Gets actor activation state in hierarchy
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Position">
            <summary>
            Gets or sets actor's world transform position
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Orientation">
            <summary>
            Gets or sets actor's world transform orientation
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scale">
            <summary>
            Gets or sets actor's world transform scale
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Transform">
            <summary>
            Gets or sets actor's world a three dimensional mathematical transformation
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalPosition">
            <summary>
            Gets or sets actor's local transform position
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalOrientation">
            <summary>
            Gets or sets actor's local transform orientation
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalScale">
            <summary>
            Gets or sets actor's local transform scale
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalTransform">
            <summary>
            Gets or sets actor's world a three dimensional mathematical transformation
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.ChildrenCount">
            <summary>
            Gets amount of children
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.Int32)">
            <summary>
            Gets child actor at given index
            </summary>
            <param name="index">Child's actor index</param>
            <returns>Child actor</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.String)">
            <summary>
            Gets child actor with given name
            </summary>
            <param name="name">Child's actor name</param>
            <returns>Child actor</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor(System.String)">
            <summary>
            Tries to find the actor with the given name in this actor tree (checks this actor and all children trees).
            </summary>
            <param name="name">The name of the actor to find.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor(System.Type)">
            <summary>
            Tries to find the actor of the given type in this actor tree (checks this actor and all children trees).
            </summary>
            <param name="type">The type of the actor to find.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindScript(System.Type)">
            <summary>
            Tries to find the script of the given type in this actor tree (checks this actor and all children trees).
            </summary>
            <param name="type">The type of the script to find.</param>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Find(System.String)">
            <summary>
            Tries to find the actor with the given name in all the loaded scenes.
            </summary>
            <param name="name">The name of the actor to find.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Find(System.Type)">
            <summary>
            Tries to find the actor of the given type in all the loaded scenes.
            </summary>
            <param name="type">The type of the actor to find.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.Type)">
            <summary>
            Searches for a child actor of a specific type. If there are multiple actors matching the type, only the first one found is returned.
            </summary>
            <param name="actorType">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Actor instance if found, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren(System.Type)">
            <summary>
            Searches for all actors of a specific type.
            </summary>
            <param name="actorType">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>All actors matching the specified type</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren">
            <summary>
            Returns a list of all actors attached to this object. It's read-only array.
            </summary>
            <returns>All actors attached to this object.</returns>
        </member>
        <member name="P:FlaxEngine.Actor.ScriptsCount">
            <summary>
            Gets amount of scripts added to this actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript(System.Int32)">
            <summary>
            Gets the child script at given index.
            </summary>
            <param name="index">The zero-based index of the script in the actor scripts array.</param>
            <returns>The script instance.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript(System.Type)">
            <summary>
            Searches for a child script of a specific type. If there are multiple scripts matching the type, only the first one found is returned.
            </summary>
            <param name="scriptType">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScripts(System.Type)">
            <summary>
            Searches for all scripts of a specific type.
            </summary>
            <param name="scriptType">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>All scripts matching the specified type.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScriptInChildren(System.Type,System.Boolean)">
            <summary>
            Searches for a child script of a specific type in this actor or any of its children. If there are multiple scripts matching the type, only the first one found is returned.
            </summary>
            <param name="scriptType">Type of the script to search for. Includes any scripts derived from the type.</param>
            <param name="includeDisabled">Determines whether include disabled scripts into results (disabled scripts and/or inactive actors).</param>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScriptsInChildren(System.Type,System.Boolean)">
            <summary>
            Searches for all scripts of a specific type in this actor and any of its children.
            </summary>
            <param name="scriptType">Type of the script to search for. Includes any scripts derived from the type.</param>
            <param name="includeDisabled">Determines whether include inactive scripts into results (disabled scripts and/or inactive actors).</param>
            <returns>All scripts matching the specified type and query options.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript(FlaxEngine.Script)">
            <summary>
            Adds a script to the actor.
            </summary>
            <param name="script">The script to add</param>
        </member>
        <member name="M:FlaxEngine.Actor.RemoveScript(FlaxEngine.Script)">
            <summary>
            Removes a script from the actor. Use Object.Destroy to delete unlinked script and prevent from leaks.
            </summary>
            <param name="script">The script to remove</param>
        </member>
        <member name="M:FlaxEngine.Actor.DeleteScript(System.Int32)">
            <summary>
            Detaches script from the actor and deletes the object.
            </summary>
            <param name="index">The index of the script to remove.</param>
        </member>
        <member name="P:FlaxEngine.Actor.Box">
            <summary>
            Gets bounding box that contains actor object (single actor, no children included)
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.BoxWithChildren">
            <summary>
            Gets bounding box that contains actor object and all it's children (children included in recursive way)
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HasContentLoaded">
            <summary>
            Returns true if actor has loaded content
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HasPrefabLink">
            <summary>
            Gets a value indicating whether this actor has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsPrefabRoot">
            <summary>
            Gets a value indicating whether this actor is a prefab instance root object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.PrefabID">
            <summary>
            Gets the prefab asset ID. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.PrefabObjectID">
            <summary>
            Gets the ID of the object within a prefab that is used for synchronization with this actor. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.BreakPrefabLink">
            <summary>
            Breaks the prefab linkage for this actor, all its scripts, and all child actors.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.ContainsInHierarchy(FlaxEngine.Actor)">
            <summary>
            Determines whether the specified object is in a hierarchy (one of the children or lower).
            </summary>
            <param name="actor">The actor to check,</param>
            <returns>True if given actor is part of the hierarchy, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.ContainsChild(FlaxEngine.Actor)">
            <summary>
            Determines whether the specified object is one of the children.
            </summary>
            <param name="actor">The actor to check,</param>
            <returns>True if given actor is a child, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.TryGetSerializedObjectsIds(System.Byte[])">
            <summary>
            Tries the get serialized objects ids from the raw bytes.
            </summary>
            <param name="data">The data.</param>
            <returns>Collection of serialized objects ids or null if cannot gather information from the bytes (invalid format).</returns>
        </member>
        <member name="T:FlaxEngine.Asset">
            <summary>
            Assets objects base class.
            </summary>
            <summary>
            Asset objects base class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Asset.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Asset"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.Path">
            <summary>
            Gets the asset path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.IsLoaded">
            <summary>
            Returns true if asset is loaded, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.IsVirtual">
            <summary>
            Determines whether this asset is virtual (generated or temporary, has no storage so it won't be saved).
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.RefCount">
            <summary>
            Gets amount of references to that asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.WaitForLoaded(System.Double)">
            <summary>
            Stops the current thread execution and waits until asset will be loaded (loading will fail, success or be cancelled).
            </summary>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>True if cannot load that asset (failed or has been cancelled), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Asset.Reload">
            <summary>
            Reloads the asset.
            </summary>
        </member>
        <member name="T:FlaxEngine.BasePersistentData">
            <summary>
            Class for management of data stored in a file.
            </summary>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.File``1(System.String,System.Boolean)">
            <summary>
            Gets persistant data from desired file.
            </summary>
            <param name="fileName">File to get persistant data from.</param>
            <param name="createNew">If file was not found, should method create new file.</param>
            <typeparam name="T">PersistentData expected type</typeparam>
            <returns>null if file was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.FileByName``1(System.String,System.Boolean)">
            <summary>
            Gets persistant data from desired file by its config mapped name.
            </summary>
            <param name="fileName">File to get persistant data from by name from internal dictionary. Has to be mapped in config file.</param>
            <param name="createNew">If file was not found, should method create new file.</param>
            <typeparam name="T">PersistentData expected type</typeparam>
            <returns>null if file was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.Increment(System.Int32)">
            <summary>
            Internal counter for amount of changes insinde persistent data collection. 
            </summary>
            <remarks>
            Increments number of changes made to current <see cref="T:FlaxEngine.BasePersistentData"/> and based on <see cref="T:FlaxEngine.PersistentDataConfig"/> 
            if number is exceeded <see cref="M:FlaxEngine.BasePersistentData.Flush"/> is called. Multiple methods of automatic flush can be combined.
            </remarks>
            <param name="amount"></param>
            <seealso cref="T:FlaxEngine.PersistentDataConfig"/>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.Clear">
            <summary>
            Clears file content.
            </summary>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.Flush">
            <summary>
            Saves all pending changes to the persistant data file.
            </summary>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.Get(System.String)">
            <summary>
            Gets value form persistent data file.
            </summary>
            <param name="key">Key to find in persistent data file.</param>
            <returns>null if value was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.Get``1(System.String)">
            <summary>
            Gets value form persistent data file.
            </summary>
            <param name="key">Key to find in persistent data file.</param>
            <typeparam name="T">Data expected value type</typeparam>
            <returns>default(T) if value was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.GetOrCreate(System.String)">
            <summary>
            Gets value form persistent data file. Creates file and value if not exists.
            </summary>
            <param name="key">Key to find in persistent data file.</param>
            <returns>null if value was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.GetOrCreate``1(System.String)">
            <summary>
            Gets value form persistent data file. Creates file and value if not exists.
            </summary>
            <param name="key">Key to find in persistent data file.</param>
            <typeparam name="T">Data expected value type</typeparam>
            <returns>default(T) if value was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.File(System.String,System.Boolean)">
            <summary>
            Gets persistant data from desired file.
            </summary>
            <param name="fileName">File to get persistant data from.</param>
            <param name="createNew">If file was not found, should method create new file.</param>
            <returns>null if file was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.FileByName(System.String,System.Boolean)">
            <summary>
            Gets persistant data from desired file by its config mapped name.
            </summary>
            <param name="fileName">File to get persistant data from by name from internal dictionary. Has to be mapped in config file.</param>
            <param name="createNew">If file was not found, should method create new file.</param>
            <returns>null if file was not found.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.FileCreate(System.String)">
            <summary>
            Creates new file for persistant data.
            </summary>
            <param name="fileName">File name to create file at.</param>
            <returns>Newly created file.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.FileCreateByName(System.String)">
            <summary>
            Creates new file for persistant data.
            </summary>
            <param name="fileName">File name to create file at.</param>
            <returns>Newly created file.</returns>
        </member>
        <member name="M:FlaxEngine.BasePersistentData.FileCreateByName(System.String,System.String)">
            <summary>
            Creates new file for persistant data.
            </summary>
            <param name="fileName">File name to create file at.</param>
            <param name="fileConfigName">Config name that this file will be mapped to.</param>
            <returns>Newly created file.</returns>
        </member>
        <member name="T:FlaxEngine.Font">
            <summary>
            Represents font object that can be using during text rendering (it uses Font Asset but with precached data for chosen font properties).
            </summary>
            <summary>
            Represents font object that can be using during text rendering (it uses Font Asset but with precached data for chosen font properties).
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Font"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Asset">
            <summary>
            Gets parent font asset that contains font family used by this font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Size">
            <summary>
            Gets font size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Height">
            <summary>
            Gets characters height.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Ascender">
            <summary>
            Gets the largest vertical distance above the baseline for any character in the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Descender">
            <summary>
            Gets the largest vertical distance below the baseline for any character in the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.LineGap">
            <summary>
            Gets the line gap property.
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.GetKerning(System.Char,System.Char)">
            <summary>
            Gets the kerning amount for a pair of characters.
            </summary>
            <param name="first">The first character in the pair.</param>
            <param name="second">The second character in the pair.</param>
            <returns>The kerning amount or 0 if no kerning.</returns>
        </member>
        <member name="M:FlaxEngine.Font.CacheText(System.Int32)">
            <summary>
            Creates font object of given characters size.
            </summary>
            <param name="size">Characters size.</param>
        </member>
        <member name="M:FlaxEngine.Font.MeasureText(System.String)">
            <summary>
            Measures minimum size of the rectangle that will be needed to draw given text.
            </summary>
            <param name="text">Input text.</param>
            <returns>Minimum size for that text and fot to render properly.</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,System.Int32,FlaxEngine.TextLayoutOptions)">
            <summary>
            Calculates character position for given text and character index.
            </summary>
            <param name="text">Input text.</param>
            <param name="index">The text position to get it's coordinates.</param>
            <param name="layout">Layout properties.</param>
            <returns>Character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,System.Int32)">
            <summary>
            Calculates character position for given text and character index.
            </summary>
            <param name="text">Input text.</param>
            <param name="index">The text position to get it's coordinates.</param>
            <returns>Character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.Vector2,FlaxEngine.TextLayoutOptions)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">Input text to test.</param>
            <param name="location">Location to test.</param>
            <param name="layout">Layout properties.</param>
            <returns>Selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">Input text to test.</param>
            <param name="location">Location to test.</param>
            <returns>Selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="T:FlaxEngine.Rendering.ActorsSources">
            <summary>
            Defines actors to draw sources.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ActorsSources.Scenes">
            <summary>
            The actors from the loaded scenes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ActorsSources.CustomActors">
            <summary>
            The actors from the custom collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ActorsSources.ScenesAndCustomActors">
            <summary>
            The actors from the loaded scenes and custom collection.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.GPUContext">
            <summary>
            Allows to perform custom graphics commands using GPU device and rendering pipeline.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.Draw(FlaxEngine.Rendering.RenderTarget,FlaxEngine.SpriteAtlas)">
            <summary>
            Draws sprite atlas texture to render target. Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="dst">Target surface.</param>
            <param name="src">Source sprite atlas.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawScene(FlaxEngine.Rendering.RenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderBuffers,FlaxEngine.Rendering.RenderView@,FlaxEngine.Rendering.ViewFlags,FlaxEngine.Rendering.ViewMode,FlaxEngine.Actor[],FlaxEngine.Rendering.ActorsSources,System.Collections.Generic.HashSet{FlaxEngine.Rendering.PostProcessEffect})">
            <summary>
            Draws scene.
            </summary>
            <param name="task">Calling render task.</param>
            <param name="output">Output texture.</param>
            <param name="buffers">Frame rendering buffers.</param>
            <param name="view">Rendering view description structure.</param>
            <param name="flags">Custom view flags collection.</param>
            <param name="mode">Custom view mode option.</param>
            <param name="customActors">Custom set of actors to render.</param>
            <param name="actorsSource">Actors source to use during rendering.</param>
            <param name="customPostFx">The set of custom post effects to use during rendering. Use null to skip it.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawScene(FlaxEngine.Rendering.RenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderBuffers,FlaxEngine.Rendering.RenderView@,FlaxEngine.Rendering.ViewFlags,FlaxEngine.Rendering.ViewMode,System.Collections.Generic.List{FlaxEngine.Actor},FlaxEngine.Rendering.ActorsSources,System.Collections.Generic.HashSet{FlaxEngine.Rendering.PostProcessEffect})">
            <summary>
            Draws scene.
            </summary>
            <param name="task">Calling render task.</param>
            <param name="output">Output texture.</param>
            <param name="buffers">Frame rendering buffers.</param>
            <param name="view">Rendering view description structure.</param>
            <param name="flags">Custom view flags collection.</param>
            <param name="mode">Custom view mode option.</param>
            <param name="customActors">Custom set of actors to render.</param>
            <param name="actorsSource">Actors source to use during rendering.</param>
            <param name="customPostFx">The set of custom post effects to use during rendering. Use null to skip it.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawSceneDepth(FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,System.Boolean,FlaxEngine.Actor[],FlaxEngine.Rendering.ActorsSources)">
            <summary>
            Draws scene objects depth (to the output Z buffer).
            </summary>
            <param name="task">Calling render task. Uses it's cache, buffers and the view properties.</param>
            <param name="output">Output depth buffer.</param>
            <param name="drawTransparency">True if render both opaque and semi-transparent objects.</param>
            <param name="customActors">Custom set of actors to render. If set to null default scene will be rendered.</param>
            <param name="actorsSource">Actors source to use during rendering.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.Clear(FlaxEngine.Rendering.RenderTarget,FlaxEngine.Color)">
            <summary>
            Clears texture surface with a color.
            </summary>
            <param name="renderTarget">The render target to clear. Must be valid and created.</param>
            <param name="color">Clear color.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawSceneDepth(FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,System.Boolean,System.Collections.Generic.List{FlaxEngine.Actor},FlaxEngine.Rendering.ActorsSources)">
            <summary>
            Draws scene objects depth (to the output Z buffer).
            </summary>
            <param name="task">Calling render task. Uses it's cache, buffers and the view properties.</param>
            <param name="output">Output depth buffer.</param>
            <param name="drawTransparency">True if render both opaque and semi-transparent objects.</param>
            <param name="customActors">Custom set of actors to render. If set to null default scene will be rendered.</param>
            <param name="actorsSource">Actors source to use during rendering.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawPostFxMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.SceneRenderTask)">
            <summary>
            Draws postFx material to the render target.
            </summary>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="input">The input texture. It's optional.</param>
            <param name="sceneRenderTask">Render task to use it's view description and the render buffers.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawPostFxMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Draws postFx material to the render target.
            </summary>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="input">The input texture. It's optional.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Rendering.GPUContext"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.Clear(FlaxEngine.Rendering.RenderTargetView,FlaxEngine.Color)">
            <summary>
            Clears texture surface with a color.
            </summary>
            <param name="view">The render target view to clear. Must be valid and created.</param>
            <param name="color">Clear color.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.ClearDepth(FlaxEngine.Rendering.RenderTarget,System.Single)">
            <summary>
            Clears depth buffer.
            </summary>
            <param name="depthBuffer">Depth buffer to clear.</param>
            <param name="depthValue">Clear depth value.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.ResolveMultisample(FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget,System.Int32,System.Int32,FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Resolves the multisampled texture by performing a copy of the resource into a non-multisampled resource.
            </summary>
            <param name="sourceMultisampleTexture">The source multisample texture. Must be multisampled.</param>
            <param name="destTexture">The destination texture. Must be single-sampled.</param>
            <param name="sourceSubResource">The source sub-resource index.</param>
            <param name="destSubResource">The destination sub-resource index.</param>
            <param name="format">The format. Indicates how the multisampled resource will be resolved to a single-sampled resource.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.Draw(FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Draws render target to other render target. Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="dst">Target surface.</param>
            <param name="src">Source surface.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.Draw(FlaxEngine.Rendering.RenderTarget,FlaxEngine.Texture)">
            <summary>
            Draws texture to render target. Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="dst">Target surface.</param>
            <param name="src">Source texture.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawPostFxMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderView,FlaxEngine.Rendering.RenderBuffers)">
            <summary>
            Draws postFx material to the render target.
            </summary>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="input">The input texture. It's optional.</param>
            <param name="view">Rendering view description structure.</param>
            <param name="buffers">Frame rendering buffers. Can be used by the material to gather per pixel surface properties.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawPostFxMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rendering.RenderTargetView,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Draws postFx material to the render target view. Can be used to draw material to subarea of the texture.
            </summary>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="view">The output render target view. Must be valid and created.</param>
            <param name="input">The input texture. It's optional.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.GPUContext.DrawPostFxMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rendering.RenderTargetView,FlaxEngine.Viewport@,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Draws postFx material to the render target view using a custom viewport. Can be used to draw material to subarea of the texture.
            </summary>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="view">The output render target view. Must be valid and created.</param>
            <param name="viewport">The custom rendering viewport to use.</param>
            <param name="input">The input texture. It's optional.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.RenderBuffers">
            <summary>
            Allows to perform custom rendering to texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderBuffers.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Rendering.RenderBuffers"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderBuffers.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Rendering.RenderBuffers"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderBuffers.Width">
            <summary>
            Gets buffer textures width (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderBuffers.Height">
            <summary>
            Gets buffer textures height (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderBuffers.AspectRatio">
            <summary>
            Gets buffer textures aspect ratio (width / height).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderBuffers.Size">
            <summary>
            Gets or sets buffer textures size (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderBuffers.DepthBuffer">
            <summary>
            Gets the depth buffer render target allocated within this render buffers collection (read only).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderBuffers.MotionVectors">
            <summary>
            Gets the motion vectors render target allocated within this render buffers collection (read only).
            </summary>
            <remarks>
            Texture ca be null or not initialized if motion blur is disabled or not yet rendered.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderBuffers.Init(System.Int32,System.Int32)">
            <summary>
            Initializes render buffers.
            </summary>
            <param name="width">The surface width in pixels.</param>
            <param name="height">The surface height in pixels.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderBuffers.Dispose">
            <summary>
            Disposes render buffers data.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.RenderTargetView">
            <summary>
            Defines a view for the <see cref="T:FlaxEngine.Rendering.RenderTarget"/> surface or full resource or any of the sub-parts. Can be used to define a single subresource of the texture, volume texture or texture array.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.RenderTarget">
            <summary>
            Allows to perform custom rendering to texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.IsPowerOfTwo">
            <summary>
            Returns true if texture has size that is power of two.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.View">
            <summary>
            Gets the view to the first surface (only for 2D textures).
            </summary>
            <returns>The view for the render target.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.View(System.Int32)">
            <summary>
            Gets the view to the surface at index in an array.
            </summary>
            <remarks>
            To use per depth/array slice view you need to specify the TextureFlags.PerSliceHandles when creating the resource.
            </remarks>
            <param name="arrayOrDepthIndex">The index of the surface in an array (or depth slice index).</param>
            <returns>The view for the render target.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.View(System.Int32,System.Int32)">
            <summary>
            Gets the view to the surface at index in an array.
            </summary>
            <remarks>
            To use per mip map view you need to specify the TextureFlags.PerMipHandles when creating the resource.
            </remarks>
            <param name="arrayOrDepthIndex">The index of the surface in an array (or depth slice index).</param>
            <param name="mipMapIndex">The index of the mip level.</param>
            <returns>The view for the render target.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.ViewArray">
            <summary>
            Gets the view to the array of surfaces.
            </summary>
            <remarks>
            To use array texture view you need to create render target as an array.
            </remarks>
            <returns>The view for the render target.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.ViewVolume">
            <summary>
            Gets the view to the volume texture (3D).
            </summary>
            <remarks>
            To use volume texture view you need to create render target as a volume resource (3D texture with Depth > 1).
            </remarks>
            <returns>The view for the render target.</returns>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderTarget.UnusedTemporaryRenderTargetLifeTime">
            <summary>
            The timeout value for unused temporary render targets (in seconds).
            When render target is not used for a given amount of time, it's being released.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.GetTemporary(FlaxEngine.Rendering.PixelFormat,System.Int32,System.Int32,FlaxEngine.Rendering.TextureFlags,FlaxEngine.Rendering.MSAALevel)">
            <summary>
            Allocates a temporary render target.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="flags">The texture usage flags.</param>
            <param name="msaa">The texture multisampling level.</param>
            <returns>Created texture.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.ReleaseTemporary(FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Releases a temporary render target allocated using <see cref="M:FlaxEngine.Rendering.RenderTarget.GetTemporary(FlaxEngine.Rendering.PixelFormat,System.Int32,System.Int32,FlaxEngine.Rendering.TextureFlags,FlaxEngine.Rendering.MSAALevel)"/>.
            Later calls to <see cref="M:FlaxEngine.Rendering.RenderTarget.GetTemporary(FlaxEngine.Rendering.PixelFormat,System.Int32,System.Int32,FlaxEngine.Rendering.TextureFlags,FlaxEngine.Rendering.MSAALevel)"/> will reuse the RenderTexture created earlier if possible.
            When no one has requested the temporary RenderTexture for a few frames it will be destroyed.
            </summary>
            <param name="temp">The temporary.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.Init(FlaxEngine.Rendering.PixelFormat,FlaxEngine.Vector2,FlaxEngine.Rendering.TextureFlags,System.Int32,FlaxEngine.Rendering.MSAALevel)">
            <summary>
            Initializes render target texture.
            </summary>
            <param name="format">The surface pixels format.</param>
            <param name="size">The surface size in pixels (width, height).</param>
            <param name="flags">The surface usage flags.</param>
            <param name="mipMaps">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="multiSampleLevel">The surface multisampling level.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Rendering.RenderTarget"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.New">
            <summary>
            Creates new instance of <see cref="T:FlaxEngine.Rendering.RenderTarget"/> object.
            </summary>
            <returns>Created object.</returns>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Dimensions">
            <summary>
            Gets texture dimensions.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Format">
            <summary>
            Gets texture surface format.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.MultiSampleLevel">
            <summary>
            Gets texture surface multisample level.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.MipLevels">
            <summary>
            Gets number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Flags">
            <summary>
            Gets the texture surface flags.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.IsAllocated">
            <summary>
            Gets a value indicating whether this texture has been allocated.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.NativePtr">
            <summary>
            Gets the native pointer to the underlying resource. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Width">
            <summary>
            Gets or sets texture surface width (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Height">
            <summary>
            Gets or sets texture surface height (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Depth">
            <summary>
            Gets or sets texture surface depth (in pixels). Used only by volume textures. For 1D and 2D textures it defaults to 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.ArraySize">
            <summary>
            Gets or sets texture array size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTarget.Size">
            <summary>
            Gets or sets texture surface size (in pixels).
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.Init(FlaxEngine.Rendering.PixelFormat,System.Int32,System.Int32,FlaxEngine.Rendering.TextureFlags,System.Int32,FlaxEngine.Rendering.MSAALevel,System.Int32)">
            <summary>
            Initializes render target texture (2D texture or 2D texture array).
            </summary>
            <param name="format">The surface pixels format.</param>
            <param name="width">The surface width in pixels.</param>
            <param name="height">The surface height in pixels.</param>
            <param name="flags">The surface usage flags.</param>
            <param name="mipMaps">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="multiSampleLevel">The surface multisampling level.</param>
            <param name="arraySize">Size of the texture 2D array. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.InitCube(FlaxEngine.Rendering.PixelFormat,System.Int32,FlaxEngine.Rendering.TextureFlags,System.Int32)">
            <summary>
            Initializes render target texture (cube map).
            </summary>
            <param name="format">The surface pixels format.</param>
            <param name="size">The surface size in pixels (width and height).</param>
            <param name="flags">The surface usage flags.</param>
            <param name="mipMaps">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.Init3D(FlaxEngine.Rendering.PixelFormat,System.Int32,System.Int32,System.Int32,FlaxEngine.Rendering.TextureFlags,System.Int32)">
            <summary>
            Initializes render target texture (3D volume texture).
            </summary>
            <param name="format">The surface pixels format.</param>
            <param name="width">The surface width in pixels.</param>
            <param name="height">The surface height in pixels.</param>
            <param name="depth">The surface depth in pixels.</param>
            <param name="flags">The surface usage flags.</param>
            <param name="mipMaps">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTarget.Dispose">
            <summary>
            Disposes render target surface data.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.RenderTask">
            <summary>
            Allows to perform custom rendering using graphics pipeline.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTask.Dispose">
            <summary>
            Disposes render task data and child components (output and buffers).
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTask.ComputeModelLOD(FlaxEngine.Model,FlaxEngine.BoundingSphere@)">
            <summary>
            Computes the model Level of Detail index to use during rendering in the current view.
            </summary>
            <param name="model">The model.</param>
            <param name="bounds">The object bounds (transformed model instance bounds).</param>
            <returns>The LOD.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTask.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Rendering.RenderTask"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTask.Enabled">
            <summary>
            Gets or sets a value indicating whether task is enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.RenderTask.Order">
            <summary>
            Gets or sets task order. Tasks with lower order are rendered first.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTask.CameraCut">
            <summary>
            Marks the next rendered frame as camera cut. Used to clear the temporal effects history and prevent visual artifacts blended from the previous frames.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderTask.Create``1">
            <summary>
            Creates the new task object.
            </summary>
            <typeparam name="T">Type of the render task to create. Includes any task derived from the type.</typeparam>
            <returns>Created task object or null if cannot do it.</returns>
        </member>
        <member name="T:FlaxEngine.Rendering.GraphicsDevice">
            <summary>
            Graphics Device is a basic GPU work manager that is responsible to manage graphics resources as well as perform scene rendering and submit frames to the user.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits">
            <summary>
            Graphics device limits description.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.IsComputeSupported">
            <summary>
            True if device supports Compute shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.IsSupportingSeparateRTBlendState">
            <summary>
            True if device supports separate render target blending states.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.HasDepthAsSRV">
            <summary>
            True if device supports depth buffer texture as a shader resource view.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.HasReadOnlyDepth">
            <summary>
            True if device supports depth buffer texture as a readonly depth buffer (can be sampled in the shader while performing depth-test).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.HasMultisampleDepthAsSRV">
            <summary>
            True if device supports multisampled depth buffer texture as a shader resource view.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumMipLevelsCount">
            <summary>
            The maximum amount of texture mip levels.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumTexture1DSize">
            <summary>
            The maximum size of the 1D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumTexture1DArraySize">
            <summary>
            The maximum length of 1D textures array.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumTexture2DSize">
            <summary>
            The maximum size of the 2D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumTexture2DArraySize">
            <summary>
            The maximum length of 2D textures array.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumTexture3DSize">
            <summary>
            The maximum size of the 3D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.GraphicsDevice.DeviceLimits.MaximumTextureCubeSize">
            <summary>
            The maximum size of the cube texture (both width and height).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.Limits">
            <summary>
            Gets the graphics device limits description.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.GraphicsDevice.GetFeatures(FlaxEngine.Rendering.PixelFormat,FlaxEngine.Rendering.FormatFeatures@)">
            <summary>
            Gets the supported features for the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="result">The format features description.</param>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.RendererType">
            <summary>
            Gets the graphics device rendering backend type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.ShaderProfile">
            <summary>
            Gets the graphics device shaders profile type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.MemoryUsage">
            <summary>
            Gets the total estimated graphics memory usage (in bytes).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.NativePtr">
            <summary>
            Gets the native pointer to the underlying graphics device. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.VendorId">
            <summary>
            Gets the GPU vendor identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsDevice.Description">
            <summary>
            Gets a string that contains the GPU adapter description. Used for presentation to the user.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.GraphicsDevice.DumpResourcesToLog">
            <summary>
            Dumps all resources information to the log.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.GraphicsQuality">
            <summary>
            Graphics rendering quality settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.AAQuality">
            <summary>
            Anti Aliasing quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.SSRQuality">
            <summary>
            Screen Space Reflections quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.GraphicsQuality.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.CullMode">
            <summary>
            Primitives culling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.CullMode.Normal">
            <summary>
            Cull back-facing geometry.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.CullMode.Inverted">
            <summary>
            Cull front-facing geometry.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.CullMode.TwoSided">
            <summary>
            Disable culling.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.CustomRenderTask">
            <summary>
            Provides ability to perform custom rendering using <see cref="T:FlaxEngine.Rendering.GPUContext"/>.
            </summary>
            <seealso cref="T:FlaxEngine.Rendering.RenderTask" />
        </member>
        <member name="F:FlaxEngine.Rendering.CustomRenderTask.Render">
            <summary>
            The custom action to perform during rendering.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.DrawCallsCollector">
            <summary>
            Helper class to collect GPU drawing requests and send them back to the Engine.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.AddDrawCall(FlaxEngine.Model,FlaxEngine.MaterialBase,FlaxEngine.BoundingSphere@,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Adds the draw calls. Calculates target mesh level of detail and picks a proper meshes to draw.
            </summary>
            <param name="model">The model mesh to render. Cannot be null.</param>
            <param name="material">The material to apply during rendering. Cannot be null.</param>
            <param name="bounds">The bounds of the model instance that is being drawn (model instance bounds).</param>
            <param name="world">The world matrix used to transform mesh geometry during rendering. Use <see cref="F:FlaxEngine.Matrix.Identity"/> to render mesh 'as is'.</param>
            <param name="flags">The static flags. Used to describe type of the geometry.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.AddDrawCall(FlaxEngine.Model,System.Int32,FlaxEngine.MaterialBase,FlaxEngine.BoundingSphere@,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Adds the draw call (single model drawing). Calculates target mesh level of detail and picks a proper meshes to draw (based on a material slot index).
            </summary>
            <param name="model">The model mesh to render. Cannot be null.</param>
            <param name="materialSlotIndex">The material slot index to draw.</param>
            <param name="material">The material to apply during rendering. Cannot be null.</param>
            <param name="bounds">The bounds of the model instance that is being drawn (model instance bounds).</param>
            <param name="world">The world matrix used to transform mesh geometry during rendering. Use <see cref="F:FlaxEngine.Matrix.Identity"/> to render mesh 'as is'.</param>
            <param name="flags">The static flags. Used to describe type of the geometry.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.AddDrawCall(FlaxEngine.Model,System.Int32,FlaxEngine.MaterialBase,System.Int32,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Adds the draw call (single model drawing). Calculates target mesh level of detail and picks a proper meshes to draw (based on a material slot index).
            </summary>
            <param name="model">The model mesh to render. Cannot be null.</param>
            <param name="materialSlotIndex">The material slot index to draw.</param>
            <param name="material">The material to apply during rendering. Cannot be null.</param>
            <param name="lodIndex">The model Level Of Detail to draw (zero-based index).</param>
            <param name="world">The world matrix used to transform mesh geometry during rendering. Use <see cref="F:FlaxEngine.Matrix.Identity"/> to render mesh 'as is'.</param>
            <param name="flags">The static flags. Used to describe type of the geometry.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.AddDrawCall(FlaxEngine.Mesh,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Adds the draw call (single mesh drawing).
            </summary>
            <param name="mesh">The mesh to render. Cannot be null.</param>
            <param name="material">The material to apply during rendering. Cannot be null.</param>
            <param name="world">The world matrix used to transform mesh geometry during rendering. Use <see cref="F:FlaxEngine.Matrix.Identity"/> to render mesh 'as is'.</param>
            <param name="flags">The static flags. Used to describe type of the geometry.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.AddDrawCall(FlaxEngine.Terrain,FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.MaterialBase,System.Int32)">
            <summary>
            Adds the draw call (single terrain chunk drawing).
            </summary>
            <param name="terrain">The terrain to render. Cannot be null.</param>
            <param name="patchCoord">The terrain patch coordinates.</param>
            <param name="chunkCoord">The terrain chunk coordinates.</param>
            <param name="material">The material to apply during rendering. Cannot be null.</param>
            <param name="lodIndex">The geometry Level Of Detail index.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.AddDrawCall(FlaxEngine.Terrain,FlaxEngine.Int2@,FlaxEngine.MaterialBase,System.Int32)">
            <summary>
            Adds the draw call (single terrain patch drawing).
            </summary>
            <param name="terrain">The terrain to render. Cannot be null.</param>
            <param name="patchCoord">The terrain patch coordinates.</param>
            <param name="material">The material to apply during rendering. Cannot be null.</param>
            <param name="lodIndex">The geometry Level Of Detail index.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.ExecuteDrawCalls(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.RenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderPass)">
            <summary>
            Executes the draw calls.
            </summary>
            <param name="context">The GPU command context.</param>
            <param name="task">The render task.</param>
            <param name="output">The output texture.</param>
            <param name="pass">The rendering pass mode.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.DrawCallsCollector.ExecuteDrawCalls(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.RenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderPass)">
            <summary>
            Executes the draw calls.
            </summary>
            <param name="context">The GPU command context.</param>
            <param name="task">The render task.</param>
            <param name="output">The output texture.</param>
            <param name="outputDepth">The output depth texture.</param>
            <param name="pass">The rendering pass mode.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.RendererType">
            <summary>
            Graphics rendering backend system types.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.DirectX10">
            <summary>
            DirectX 10
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.DirectX10_1">
            <summary>
            DirectX 10.1
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.DirectX11">
            <summary>
            DirectX 11
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.DirectX12">
            <summary>
            DirectX 12
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.OpenGL4_1">
            <summary>
            OpenGL 4.1
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.OpenGL4_4">
            <summary>
            OpenGL 4.4
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.OpenGLES3">
            <summary>
            OpenGL ES 3
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.OpenGLES3_1">
            <summary>
            OpenGL ES 3.1
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.Null">
            <summary>
            Null backend
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RendererType.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.ShaderProfile">
            <summary>
            Shader profile types define the version and type of the shading language used by the graphics backend.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ShaderProfile.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ShaderProfile.ShaderModel4">
            <summary>
            Shader Model 4.0
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ShaderProfile.ShaderModel5">
            <summary>
            Shader Model 5.0
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ShaderProfile.GLSL_410">
            <summary>
            GLSL 410
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ShaderProfile.GLSL_440">
            <summary>
            GLSL 440
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ShaderProfile.Vulkan_SM5">
            <summary>
            Vulkan (Shader Model 5 compatible)
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.FeatureLevel">
            <summary>
            Graphics feature levels indicates what level of support can be relied upon. 
            They are named after the graphics API to indicate the minimum level of the features set to support. 
            Feature levels are ordered from the lowest to the most high-end so feature level enum can be used to switch between feature levels (e.g. don't use geometry shader if not supported).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FeatureLevel.ES2">
            <summary>
            The features set defined by the core capabilities of OpenGL ES2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FeatureLevel.ES3">
            <summary>
            The features set defined by the core capabilities of OpenGL ES3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FeatureLevel.ES3_1">
            <summary>
            The features set defined by the core capabilities of OpenGL ES3.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FeatureLevel.SM4">
            <summary>
            The features set defined by the core capabilities of DirectX 10 Shader Model 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FeatureLevel.SM5">
            <summary>
            The features set defined by the core capabilities of DirectX 11 Shader Model 5.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.IDrawable">
            <summary>
            Draw method within this interface is used for <see cref="T:FlaxEngine.Render2D"/>.CallDrawing single DrawCall
            <remarks>Each frame new Queue is sent to GPU from this CPU bound method</remarks>
            </summary>
            <seealso cref="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.Rendering.IDrawable,FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.RenderTarget)"/>
            <seealso cref="M:FlaxEngine.Rendering.PostProcessEffect.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)"/>
        </member>
        <member name="M:FlaxEngine.Rendering.IDrawable.Draw">
            <summary>
            Render2D drawing methods should be used within this method during render phase to be visible. 
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.FormatFeatures">
            <summary>
            The features exposed for a particular format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatFeatures.Format">
            <summary>
            The format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatFeatures.MSAALevelMax">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:FlaxEngine.Rendering.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatFeatures.Support">
            <summary>
            Support of a given format on the installed video device.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.FormatFeatures.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Rendering.FormatSupport">
            <summary>
            Which resources are supported for a given format and given device.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.None">
            <summary>
            No features supported.	
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Buffer">
            <summary>
            Buffer resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.InputAssemblyVertexBuffer">
            <summary>
            Vertex buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.InputAssemblyIndexBuffer">
            <summary>
            Index buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.StreamOutputBuffer">
            <summary>
            Streaming output buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Texture1D">
            <summary>
            1D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Texture2D">
            <summary>
            2D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Texture3D">
            <summary>
            3D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.TextureCube">
            <summary>
            Cube texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.ShaderLoad">
            <summary>
            The shader Load function for texture objects is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.ShaderSample">
            <summary>
            The shader Sample function for texture objects is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.ShaderSampleComparison">
            <summary>
            The shader SampleCmp and SampleCmpLevelZero functions for texture objects are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.ShaderSampleMonoText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Mip">
            <summary>
            Mipmaps are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.MipAutogen">
            <summary>
            Automatic generation of mipmaps is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.RenderTarget">
            <summary>
            Render targets are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Blendable">
            <summary>
            Blend operations supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.DepthStencil">
            <summary>
            Depth stencils supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.CpuLockable">
            <summary>
            CPU locking supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.MultisampleResolve">
            <summary>
            Multisample antialiasing (MSAA) resolve operations are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.Display">
            <summary>
            Format can be displayed on screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.CastWithinBitLayout">
            <summary>
            Format can't be cast to another format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.MultisampleRenderTarget">
            <summary>
            Format can be used as a multi-sampled render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.MultisampleLoad">
            <summary>
            Format can be used as a multi-sampled texture and read into a shader with the shader Load function.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.ShaderGather">
            <summary>
            Format can be used with the shader gather function.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.BackBufferCast">
            <summary>
            Format supports casting when the resource is a back buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.TypedUnorderedAccessView">
            <summary>
            Format can be used for an unordered access view.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.ShaderGatherComparison">
            <summary>
            Format can be used with the shader gather with comparison function.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.DecoderOutput">
            <summary>
            Format can be used with the decoder output.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.VideoProcessorOutput">
            <summary>
            Format can be used with the video processor output.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.VideoProcessorInput">
            <summary>
            Format can be used with the video processor input.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.FormatSupport.VideoEncoder">
            <summary>
            Format can be used with the video encoder.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.LightmapSettings">
            <summary>
            Describes lightmap generation options
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.LightmapSettings.AtlasSizes">
            <summary>
            Lightmap atlas sizes to use
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._64">
            <summary>
            64x64
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._128">
            <summary>
            128x128
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._256">
            <summary>
            256x256
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._512">
            <summary>
            512x512
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._1024">
            <summary>
            1024x1024
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._2048">
            <summary>
            2048x2048
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSizes._4096">
            <summary>
            4096x4096
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.IndirectLightingIntensity">
            <summary>
            Controls how much all lights will contribute indirect lighting.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.GlobalObjectsScale">
            <summary>
            Global scale for objects in lightmap to increase quality
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.ChartsPadding">
            <summary>
            Amount of pixels space between charts in lightmap atlas
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.AtlasSize">
            <summary>
            Single lightmap atlas size (width and height)
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.BounceCount">
            <summary>
            Amount of indirect light GI bounce passes
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.UseGeometryWithNoMaterials">
            <summary>
            Enable/disable rendering static light for geometry with missing or empty material slots
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.LightmapSettings.Quality">
            <summary>
            GI quality (range  [0;100])
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MainRenderTask">
            <summary>
            The main game rendering task used by the engine.
            </summary>
            <remarks>
            For Main Render Task its <see cref="F:FlaxEngine.Rendering.SceneRenderTask.Output"/> may be null because game can be rendered directly to the native window backbuffer.
            This allows to increase game rendering performance (reduced memory usage and data transfer).
            User should use post effects pipeline to modify the final frame.
            </remarks>
            <seealso cref="T:FlaxEngine.Rendering.SceneRenderTask" />
        </member>
        <member name="P:FlaxEngine.Rendering.MainRenderTask.Instance">
            <summary>
            Gets the main game rendering task. Use it to plug custom rendering logic for your game.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.MainRenderTask.OnBegin(FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialDomain">
            <summary>
            Material domain type. Material domain defines the target usage of the material shader.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDomain.Surface">
            <summary>
            The surface material. Can be used to render the scene geometry including models and skinned models.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDomain.PostProcess">
            <summary>
            The post process material. Can be used to perform custom post-processing of the rendered frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDomain.Decal">
            <summary>
            The deferred decal material. Can be used to apply custom overlay or surface modifications to the object surfaces in the world.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDomain.GUI">
            <summary>
            The GUI shader. Can be used to draw custom control interface elements or to add custom effects to the GUI.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDomain.Terrain">
            <summary>
            The terrain shader. Can be used only with landscape chunks geometry that use optimized vertex data and support multi-layered blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDomain.Particle">
            <summary>
            The particle shader. Can be used only with particles geometry (sprites, trails and ribbons). Supports reading particle data on a GPU.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialBlendMode">
            <summary>
            Material blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialBlendMode.Opaque">
            <summary>
            The opaque material. Used during GBuffer pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialBlendMode.Transparent">
            <summary>
            The transparent material. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialBlendMode.Additive">
            <summary>
            The additive blend. Material color is used to add to color of the objects behind the surface. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialBlendMode.Multiply">
            <summary>
            The multiply blend. Material color is used to multiply color of the objects behind the surface. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialShadingModel">
            <summary>
            Material shading models. Defines how material inputs and properties are combined to result the final surface color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialShadingModel.Unlit">
            <summary>
            The unlit material. Emissive channel is used as an output color. Can perform custom lighting operations or just glow. Won't be affected by the lighting pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialShadingModel.Lit">
            <summary>
            The default lit material. The most common choice for the material surfaces.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialShadingModel.Subsurface">
            <summary>
            The subsurface material. Intended for materials like vax or skin that need light scattering to transport simulation through the object.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialPostFxLocation">
            <summary>
            Post Fx material rendering locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialPostFxLocation.AfterPostProcessingPass">
            <summary>
            The after post processing pass using LDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialPostFxLocation.BeforePostProcessingPass">
            <summary>
            The before post processing pass using HDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialPostFxLocation.BeforeForwardPass">
            <summary>
            The before forward pass but after GBuffer with HDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialPostFxLocation.AfterCustomPostEffects">
            <summary>
            The after custom post effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialPostFxLocation.BeforeReflectionsPass">
            <summary>
            The 'before' Reflections pass. After the Light pass. Can be used to implement a custom light types that accumulate lighting to the light buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialPostFxLocation.AfterAntiAliasingPass">
            <summary>
            The 'after' AA filter pass. Rendering is done to the output backbuffer.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialDecalBlendingMode">
            <summary>
            Decal material blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDecalBlendingMode.Translucent">
            <summary>
            Decal will be fully blended with the material surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDecalBlendingMode.Stain">
            <summary>
            Decal color will be blended with the material surface color (using multiplication).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDecalBlendingMode.Normal">
            <summary>
            Decal will blend the normal vector only.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialDecalBlendingMode.Emissive">
            <summary>
            Decal will apply the emissive light only.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialSceneTextures">
            <summary>
            Material input scene textures. Special inputs from the graphics pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.SceneColor">
            <summary>
            The scene color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.SceneDepth">
            <summary>
            The scene depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.DiffuseColor">
            <summary>
            The material diffuse color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.SpecularColor">
            <summary>
            The material specular color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.WorldNormal">
            <summary>
            The material world space normal.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.AmbientOcclusion">
            <summary>
            The ambient occlusion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.Metalness">
            <summary>
            The material metalness value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.Roughness">
            <summary>
            The material roughness value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.Specular">
            <summary>
            The material specular value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.BaseColor">
            <summary>
            The material color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialSceneTextures.ShadingModel">
            <summary>
            The material shading model.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialFeaturesFlags">
            <summary>
            Material features flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.Wireframe">
            <summary>
            The wireframe material.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.DisableDepthTest">
            <summary>
            The depth test is disabled (material ignores depth).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.DisableDepthWrite">
            <summary>
            Disable depth buffer write (won't modify depth buffer value during rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.InputWorldSpaceNormal">
            <summary>
            The flag used to indicate that material input normal vector is defined in the world space rather than tangent space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.DitheredLODTransition">
            <summary>
            The flag used to indicate that material uses dithered model LOD transition for smoother LODs switching.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.DisableFog">
            <summary>
            The flag used to disable fog. The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.DisableReflections">
            <summary>
            The flag used to disable reflections. The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialFeaturesFlags.DisableDistortion">
            <summary>
            The flag used to disable distortion effect (light refraction). The Forward Pass materials option.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialUsageFlags">
            <summary>
            Material features usage flags. Detected by the material generator to help graphics pipeline optimize rendering of material shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UseMask">
            <summary>
            Material is using mask to discard some pixels. Masked materials are using full vertex buffer during shadow maps and depth pass rendering (need UVs).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UseEmissive">
            <summary>
            The material is using emissive light.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UsePositionOffset">
            <summary>
            The material is using world position offset (it may be animated inside a shader).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UseVertexColor">
            <summary>
            The material is using vertex colors. The render will try to feed the pipeline with a proper buffer so material can gather valid data.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UseNormal">
            <summary>
            The material is using per-pixel normal mapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UseDisplacement">
            <summary>
            The material is using position displacement (in domain shader).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialUsageFlags.UseRefraction">
            <summary>
            The flag used to indicate that material uses refraction feature.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialInfo">
            <summary>
            Structure with basic information about the material surface.
            It describes how material is reacting on light and which graphical features of it requires to render.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.Domain">
            <summary>
            The domain.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.BlendMode">
            <summary>
            The blend mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.ShadingModel">
            <summary>
            The shading mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.UsageFlags">
            <summary>
            The usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.FeaturesFlags">
            <summary>
            The features flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.DecalBlendingMode">
            <summary>
            The decal material blending mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.PostFxLocation">
            <summary>
            The post fx material rendering location.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.CullMode">
            <summary>
            The primitives culling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.MaskThreshold">
            <summary>
            The mask threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.OpacityThreshold">
            <summary>
            The opacity threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.TessellationMode">
            <summary>
            The tessellation mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialInfo.MaxTessellationFactor">
            <summary>
            The maximum tessellation factor (used only if material uses tessellation).
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.MaterialInfo.CreateDefault">
            <summary>
            Creates the default <see cref="T:FlaxEngine.Rendering.MaterialInfo"/>.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.MaterialInfo.op_Equality(FlaxEngine.Rendering.MaterialInfo,FlaxEngine.Rendering.MaterialInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rendering.MaterialInfo.op_Inequality(FlaxEngine.Rendering.MaterialInfo,FlaxEngine.Rendering.MaterialInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rendering.MaterialInfo.Equals(FlaxEngine.Rendering.MaterialInfo)">
            <summary>
            Compares with the other material info and returns true if both values are equal.
            </summary>
            <param name="other">The other info.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.MaterialInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rendering.MaterialInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialParameterType">
            <summary>
            Material parameters types.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Invalid">
            <summary>
            The invalid type.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Bool">
            <summary>
            The bool.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Integer">
            <summary>
            The integer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Float">
            <summary>
            The float.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Vector2">
            <summary>
            The vector2
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Vector3">
            <summary>
            The vector3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Vector4">
            <summary>
            The vector4.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.CubeTexture">
            <summary>
            The cube texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.NormalMap">
            <summary>
            The normal map texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.SceneTexture">
            <summary>
            The scene texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.RenderTarget">
            <summary>
            The render target (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.Matrix">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.RenderTargetArray">
            <summary>
            The render target array (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.RenderTargetVolume">
            <summary>
            The volume render target (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MaterialParameterType.RenderTargetCube">
            <summary>
            The cube render target (created from code).
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MaterialParameter">
            <summary>
            Material variable object. Allows to modify material parameter at runtime.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.MaterialParameter.Material">
            <summary>
            Gets the parent material.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.MaterialParameter.Type">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.MaterialParameter.IsPublic">
            <summary>
            Gets a value indicating whether this parameter is public.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.MaterialParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.MaterialParameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.MSAALevel">
            <summary>
            Multisample count level.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MSAALevel.None">
            <summary>
            Disabled multisampling.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MSAALevel.X2">
            <summary>
            Two samples per pixel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MSAALevel.X4">
            <summary>
            Four samples per pixel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.MSAALevel.X8">
            <summary>
            Eight samples per pixel.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.PixelFormat">
            <summary>
            Enumeration with all pixel formats used by the graphics pipeline.
            </summary>
            <remarks>
            Reference: https://msdn.microsoft.com/en-us/library/windows/desktop/bb173059(v=vs.85).aspx
            </remarks>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.Unknown">
            <summary>
            The format is not known.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32A32_Typeless">
            <summary>
            A four-component, 128-bit typeless format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32A32_Float">
            <summary>
            A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32A32_UInt">
            <summary>
            A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32A32_SInt">
            <summary>
            A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32_Typeless">
            <summary>
            A three-component, 96-bit typeless format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32_Float">
            <summary>
            A three-component, 96-bit floating-point format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32_UInt">
            <summary>
            A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32B32_SInt">
            <summary>
            A three-component, 96-bit signed-integer format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16B16A16_Typeless">
            <summary>
            A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16B16A16_Float">
            <summary>
            A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16B16A16_UNorm">
            <summary>
            A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16B16A16_UInt">
            <summary>
            A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16B16A16_SNorm">
            <summary>
            A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16B16A16_SInt">
            <summary>
            A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32_Typeless">
            <summary>
            A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32_Float">
            <summary>
            A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32_UInt">
            <summary>
            A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G32_SInt">
            <summary>
            A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32G8X24_Typeless">
            <summary>
            A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.D32_Float_S8X24_UInt">
            <summary>
            A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32_Float_X8X24_Typeless">
            <summary>
            A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.X32_Typeless_G8X24_UInt">
            <summary>
            A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R10G10B10A2_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R10G10B10A2_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R10G10B10A2_UInt">
            <summary>
            A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R11G11B10_Float">
            <summary>
            Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8B8A8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8B8A8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8B8A8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8B8A8_UInt">
            <summary>
            A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8B8A8_SNorm">
            <summary>
            A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8B8A8_SInt">
            <summary>
            A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16_Typeless">
            <summary>
            A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16_Float">
            <summary>
            A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16_UNorm">
            <summary>
            A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16_UInt">
            <summary>
            A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16_SNorm">
            <summary>
            A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16G16_SInt">
            <summary>
            A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32_Typeless">
            <summary>
            A single-component, 32-bit typeless format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.D32_Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32_Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32_UInt">
            <summary>
            A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R32_SInt">
            <summary>
            A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R24G8_Typeless">
            <summary>
            A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.D24_UNorm_S8_UInt">
            <summary>
            A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R24_UNorm_X8_Typeless">
            <summary>
            A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.X24_Typeless_G8_UInt">
            <summary>
            A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8_Typeless">
            <summary>
            A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8_UNorm">
            <summary>
            A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8_UInt">
            <summary>
            A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8_SNorm">
            <summary>
            A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8_SInt">
            <summary>
            A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16_Typeless">
            <summary>
            A single-component, 16-bit typeless format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16_Float">
            <summary>
            A single-component, 16-bit floating-point format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.D16_UNorm">
            <summary>
            A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16_UNorm">
            <summary>
            A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16_UInt">
            <summary>
            A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16_SNorm">
            <summary>
            A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R16_SInt">
            <summary>
            A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8_Typeless">
            <summary>
            A single-component, 8-bit typeless format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8_UNorm">
            <summary>
            A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8_UInt">
            <summary>
            A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8_SNorm">
            <summary>
            A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8_SInt">
            <summary>
            A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.A8_UNorm">
            <summary>
            A single-component, 8-bit unsigned-normalized-integer format for alpha only.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R1_UNorm">
            <summary>
            A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R9G9B9E5_SharedExp">
            <summary>
            Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R8G8_B8G8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. ³
            Width must be even.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.G8R8_G8B8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. ³
            Width must be even.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC1_Typeless">
            <summary>
            Four-component typeless block-compression format
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC1_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC1_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC2_Typeless">
            <summary>
            Four-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC2_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC2_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC3_Typeless">
            <summary>
            Four-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC3_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC3_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC4_Typeless">
            <summary>
            One-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC4_UNorm">
            <summary>
            One-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC4_SNorm">
            <summary>
            One-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC5_Typeless">
            <summary>
            Two-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC5_UNorm">
            <summary>
            Two-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC5_SNorm">
            <summary>
            Two-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B5G6R5_UNorm">
            <summary>
            A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B5G5R5A1_UNorm">
            <summary>
            A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B8G8R8A8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B8G8R8X8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>
            A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B8G8R8A8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B8G8R8A8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B8G8R8X8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.B8G8R8X8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC6H_Typeless">
            <summary>
            A typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC6H_Uf16">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC6H_Sf16">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC7_Typeless">
            <summary>
            A typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC7_UNorm">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.BC7_UNorm_sRGB">
            <summary>
            A block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PixelFormat.Maximum">
            <summary>
            The maximum format value (for internal use only).
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.PixelFormatExtensions">
            <summary>
            Extensions to <see cref="T:FlaxEngine.Rendering.PixelFormat"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.#cctor">
            <summary>
            Initializes the static <see cref="T:FlaxEngine.Rendering.PixelFormatExtensions"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.SizeInBytes(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Calculates the size of a <see cref="T:FlaxEngine.Rendering.PixelFormat"/> in bytes.
            </summary>
            <param name="format">The Pixel format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.SizeInBits(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Calculates the size of a <see cref="T:FlaxEngine.Rendering.PixelFormat"/> in bits.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>The size in bits</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.AlphaSizeInBits(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Calculate the size of the alpha channel in bits depending on the pixel format.
            </summary>
            <param name="format">The pixel format</param>
            <returns>The size in bits</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.HasAlpha(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> contains alpha channel.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> has alpha; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsDepthStencil(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is depth stencil.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is depth stencil; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.HasStencil(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> has stencil bits.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> has stencil bits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsTypeless(FlaxEngine.Rendering.PixelFormat,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is Typeless.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.Rendering.PixelFormat"/>.</param>
            <param name="partialTypeless">Enable/disable prtially typeless formats.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is Typeless; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsValid(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is valid.
            </summary>
            <param name="format">A format to validate</param>
            <returns>True if the <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is valid.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsCompressed(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is a compressed format.
            </summary>
            <param name="format">The format to check for compressed.</param>
            <returns>True if the <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is a compressed format</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsPacked(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is packed.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is packed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsPlanar(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is planar.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is planar; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsVideo(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is video.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.Rendering.PixelFormat"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is video; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsSRGB(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is a sRGB format.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.Rendering.PixelFormat"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is a sRGB format; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsHDR(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rendering.PixelFormat"/> is HDR (either 16 or 32bits Float)
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified pixel format is HDR (Floating poInt); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsRgbAOrder(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified format is in RGBA order.
            </summary>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the specified format is in RGBA order; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.IsBGRAOrder(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Determines whether the specified format is in BGRA order.
            </summary>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the specified format is in BGRA order; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.ComputeScanlineCount(FlaxEngine.Rendering.PixelFormat,System.Int32)">
            <summary>
            Computes the scanline count (number of scanlines).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.Rendering.PixelFormat"/>.</param>
            <param name="height">The height.</param>
            <returns>The scanline count.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.TosRGB(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Find the equivalent sRGB format to the provided format.
            </summary>
            <param name="format">The non sRGB format.</param>
            <returns>The equivalent sRGB format if any, the provided format else.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PixelFormatExtensions.ToNonsRGB(FlaxEngine.Rendering.PixelFormat)">
            <summary>
            Find the equivalent non sRGB format to the provided sRGB format.
            </summary>
            <param name="format">The non sRGB format.</param>
            <returns>The equivalent non sRGB format if any, the provided format else.</returns>
        </member>
        <member name="T:FlaxEngine.Rendering.PostProcessEffectLocation">
            <summary>
            The Post Process effect rendering location within the rendering pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessEffectLocation.Default">
            <summary>
            The default location after the in-build PostFx pass (bloom, color grading, etc.) but before anti-aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessEffectLocation.BeforePostProcessingPass">
            <summary>
            The 'before' in-build PostFx pass (bloom, color grading, etc.). After Forward Pass (transparency) and fog effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessEffectLocation.BeforeForwardPass">
            <summary>
            The 'before' Forward pass (transparency) and fog effects. After the Light pass and Reflections pass.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessEffectLocation.BeforeReflectionsPass">
            <summary>
            The 'before' Reflections pass. After the Light pass. Can be used to affect Screen Space Reflections by the GUI.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessEffectLocation.AfterAntiAliasingPass">
            <summary>
            The 'after' AA filter pass. Rendering is done to the output backbuffer.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.PostProcessEffect">
            <summary>
            Custom postFx which can modify final image by processing it with material based filters.
            The base class for all post process effects used by the graphics pipeline.
            Allows to extend frame rendering logic and apply custom effects such as outline, night vision, contrast etc.
            </summary>
            <remarks>
            Override this class and implement custom post fx logic.
            Use <b>MainRenderTask.Instance.CustomPostFx.Add(myPostFx)</b> to attach your script to rendering.
            Or add script to camera.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessEffect.CanRender">
            <summary>
            Gets a value indicating whether this effect can be rendered.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessEffect.UseSingleTarget">
            <summary>
            Gets a value indicating whether use a single render target as both input and output. Use this if your effect doesn't need to copy the input buffer to the output but can render directly to the single texture. Can be used to optimize game performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessEffect.Location">
            <summary>
            Gets the effect rendering location within rendering pipeline.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessEffect.Order">
            <summary>
            Gets the effect rendering order. Registered post effects are sorted before rendering (from the lowest order to the highest order).
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessEffect.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Performs custom postFx rendering.
            </summary>
            <param name="context">The GPU commands context.</param>
            <param name="task">The current rendering task.</param>
            <param name="input">The input texture.</param>
            <param name="output">The output texture.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.EyeAdaptationTechnique">
            <summary>
            Eye adaptation technique.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.EyeAdaptationTechnique.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.EyeAdaptationTechnique.Manual">
            <summary>
            The manual.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.EyeAdaptationTechnique.Auto">
            <summary>
            The automatic.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.BokehShapeType">
            <summary>
            Depth of field bokeh shape types.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.BokehShapeType.Hexagon">
            <summary>
            The hexagon shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.BokehShapeType.Octagon">
            <summary>
            The octagon shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.BokehShapeType.Circle">
            <summary>
            The circle shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.BokehShapeType.Cross">
            <summary>
            The cross shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.BokehShapeType.Custom">
            <summary>
            The custom texture shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.AntialiasingMode">
            <summary>
            Anti-aliasing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.AntialiasingMode.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.AntialiasingMode.FastApproximateAntialiasing">
            <summary>
            Fast-Approximate Anti-Aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.AntialiasingMode.TemporalAntialiasing">
            <summary>
            Temporal Anti-Aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.AntialiasingMode.SubpixelMorphologicalAntialiasing">
            <summary>
            Subpixel Morphological Anti-Aliasing effect.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.ResolutionMode">
            <summary>
            The effect pass resolution.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ResolutionMode.Full">
            <summary>
            Full resolution
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ResolutionMode.Half">
            <summary>
            Half resolution
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.PostProcessSettings">
            <summary>
            Contains settings for rendering advanced visual effects and post effects.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.PostProcessSettings.Data">
            <summary>
            Packed settings storage container used with C++ interop.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessSettings.MaxPostFxMaterials">
            <summary>
            The maximum allowed amount custom post fx materials assigned to <see cref="T:FlaxEngine.Rendering.PostProcessSettings"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.GetOverrideFlag(System.Reflection.PropertyInfo)">
            <summary>
            Gets the override flag for the given property.
            </summary>
            <param name="p">The property.</param>
            <returns>True if property value is being overriden, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.SetOverrideFlag(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Sets the override flag for the given property.
            </summary>
            <param name="p">The property.</param>
            <param name="value">True if override the property value, otherwise false..</param>
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.GetOverrideFlag(System.Int32)">
            <summary>
            Gets the override flag for the given property.
            </summary>
            <param name="order">The property order (see <see cref="T:FlaxEngine.EditorOrderAttribute"/> order value for properties).</param>
            <returns>True if property value is being overriden, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.SetOverrideFlag(System.Int32,System.Boolean)">
            <summary>
            Sets the override flag for the given property.
            </summary>
            <param name="order">The property order (see <see cref="T:FlaxEngine.EditorOrderAttribute"/> order value for properties.</param>
            <param name="value">True if override the property value, otherwise false..</param>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AO_Enabled">
            <summary>
            Enable/disable ambient occlusion effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AO_Intensity">
            <summary>
            Gets or sets the ambient occlusion intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AO_Power">
            <summary>
            Gets or sets the ambient occlusion power.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AO_Radius">
            <summary>
            Gets or sets the ambient occlusion check range radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AO_FadeOutDistance">
            <summary>
            Gets or sets the ambient occlusion fade out end distance from camera (in world units).
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AO_FadeDistance">
            <summary>
            Gets or sets the ambient occlusion fade distance (in world units). Defines the size of the effect fade from fully visible to fully invisible at FadeOutDistance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Bloom_Enabled">
            <summary>
            Enables/disables bloom effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Bloom_Intensity">
            <summary>
            Gets or sets the bloom intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Bloom_Threshold">
            <summary>
            Gets or sets the bloom threshold. Pixels with higher luminance are glowing.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Bloom_BlurSigma">
            <summary>
            Gets or sets the bloom blur sigma parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Bloom_Scale">
            <summary>
            Gets or sets the bloom blur scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_WhiteTemp">
            <summary>
            Gets or sets the white color temperature. Default is 6500.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_WhiteTint">
            <summary>
            Gets or sets the white tint. Default is 0.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_FilmSlope">
            <summary>
            Gets or sets the film curve slope. Default is 0.88.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_FilmToe">
            <summary>
            Gets or sets the film curve toe. Default is 0.55.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_FilmShoulder">
            <summary>
            Gets or sets the film curve shoulder. Default is 0.26.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_FilmBlackClip">
            <summary>
            Gets or sets the film curve black clip. Default is 0.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ToneMap_FilmWhiteClip">
            <summary>
            Gets or sets the film curve white clip. Default is 0.04.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_Technique">
            <summary>
            Gets or sets the eye adaptation mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_SpeedUp">
            <summary>
            Gets or sets the speed up of the eye adaptation effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_SpeedDown">
            <summary>
            Gets or sets the speed up of the eye adaptation effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_Exposure">
            <summary>
            Gets or sets the camera exposure.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_KeyValue">
            <summary>
            Gets or sets the pixels light value to achieve.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_MinLuminance">
            <summary>
            Gets or sets the minimum luminance value used for tone mapping.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Eye_MaxLuminance">
            <summary>
            Gets or sets the maximum luminance value used for tone mapping.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_VignetteIntensity">
            <summary>
            Gets or sets the vignette intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_VignetteColor">
            <summary>
            Gets or sets the vignette color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_VignetteShapeFactor">
            <summary>
            Gets or sets the vignette shape factor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_GrainAmount">
            <summary>
            Gets or sets the grain noise amount.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_GrainParticleSize">
            <summary>
            Gets or sets the grain noise particles size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_GrainSpeed">
            <summary>
            Gets or sets the grain noise particles size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Cam_ChromaticDistortion">
            <summary>
            Gets or sets the chromatic aberration distortion intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_Intensity">
            <summary>
            Gets or sets the lens flares intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_Ghosts">
            <summary>
            Gets or sets the amount of lens flares ghosts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_HaloWidth">
            <summary>
            Gets or sets the lens flares halo size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_HaloIntensity">
            <summary>
            Gets or sets the lens flares halo intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_GhostDispersal">
            <summary>
            Gets or sets the lens flares ghosts dispersal.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_Distortion">
            <summary>
            Gets or sets the lens flares distortion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_ThresholdBias">
            <summary>
            Gets or sets the lens flares threshold bias.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_ThresholdScale">
            <summary>
            Gets or sets the lens flares threshold scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_LensDirt">
            <summary>
            Gets or sets the camera lens dirt texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_LensDirtIntensity">
            <summary>
            Gets or sets the lens dirt intensity.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_LensColor">
            <summary>
            Gets or sets the camera lens color lookup texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.Flare_LensStar">
            <summary>
            Gets or sets the lens star lookup texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_Enabled">
            <summary>
            Gets or sets a value indicating whether Depth of Field is enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BlurStrength">
            <summary>
            Gets or sets the blur intensity in the out-of-focus areas. Allows reducing blur amount by scaling down the Gaussian Blur radius. Normalized to range 0-1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_FocalDistance">
            <summary>
            Gets or sets the distance in World Units from the camera that acts as the center of the region where the scene is perfectly in focus and no blurring occurs.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_FocalRegion">
            <summary>
            Gets or sets the distance in World Units beyond the focal distance where the scene is perfectly in focus and no blurring occurs.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_NearTransitionRange">
            <summary>
            Gets or sets the distance in World Units from the focal region on the side nearer to the camera over which the scene transitions from focused to blurred.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_FarTransitionRange">
            <summary>
            Gets or sets the distance in World Units from the focal region on the side farther from the camera over which the scene transitions from focused to blurred.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_DepthLimit">
            <summary>
            Gets or sets the distance in World Units which describes border after that there is no blur (useful to disable DoF on sky). Use 0 to disable that feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehEnabled">
            <summary>
            Enables/disables generating Bokeh shapes.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehSize">
            <summary>
            Controls Bokeh shapes maximum size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehShape">
            <summary>
            Gets or sets the Bokeh shapes style.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehShapeCustom">
            <summary>
            Gets or sets the custom texture for bokeh shapes.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehBrightnessThreshold">
            <summary>
            Controls Bokeh shapes generating minimum pixel brightness to appear.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehBlurThreshold">
            <summary>
            Controls Bokeh shapes blur threshold.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehFalloff">
            <summary>
            Controls Bokeh shapes brightness falloff parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.DOF_BokehDepthCutoff">
            <summary>
            Controls Bokeh shapes depth cutoff parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_Intensity">
            <summary>
            Gets or sets the effect intensity (normalized to range [0;1]). Use 0 to disable it.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_DepthResolution">
            <summary>
            Gets or sets the input depth resolution mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_RayTracePassResolution">
            <summary>
            Gets or sets the ray trace pass resolution mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_BRDFBias">
            <summary>
            Gets or sets the BRDF bias. This value controls source roughness effect on reflections blur.
            Smaller values produce wider reflections spread but also introduce more noise.
            Higher values provide more mirror-like reflections. Default value is 0.8.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_RoughnessThreshold">
            <summary>
            Minimum allowed surface roughness value to use local reflections.
            Pixels with higher values won't be affected by the effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_WorldAntiSelfOcclusionBias">
            <summary>
            Ray tracing starting position is offset by a percent of the normal in world space to avoid self occlusions.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_ResolvePassResolution">
            <summary>
            Gets or sets the resolve pass resolution mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_ResolveSamples">
            <summary>
            Gets or sets the resolve pass samples amount. Higher values provide better quality but reduce effect performance.
            Default value is 4. Use 1 for the highest speed.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_EdgeFadeFactor">
            <summary>
            Gets or sets the edge fade factor. It's used to fade off effect on screen edges to provide smoother image.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_UseColorBufferMips">
            <summary>
            Gets or sets a value indicating whether use color buffer mipmaps chain; otherwise will use raw input color buffer to sample reflections color.
            Using mipmaps improves resolve pass performance and reduces GPU cache misses.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_TemporalEffect">
            <summary>
            Gets or sets a value indicating whether use temporal effect to smooth reflections.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_TemporalScale">
            <summary>
            Gets or sets the temporal effect scale. Default is 8.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.SSR_TemporalResponse">
            <summary>
            Gets or sets the temporal response. Default is 0.8.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.PostProcessSettings.TrackBallEditorTypename">
            <summary>
            The track ball editor typename used for color grading knobs. Use custom editor alias because FlaxEditor assembly is not referenced by the FlaxEngine.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorSaturation">
            <summary>
            Gets or sets the color saturation (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorContrast">
            <summary>
            Gets or sets the color contrast (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGamma">
            <summary>
            Gets or sets the color gamma (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGain">
            <summary>
            Gets or sets the color gain (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorOffset">
            <summary>
            Gets or sets the color offset (applies globally to the whole image). Default is 0.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorSaturationShadows">
            <summary>
            Gets or sets the color saturation (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorContrastShadows">
            <summary>
            Gets or sets the color contrast (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGammaShadows">
            <summary>
            Gets or sets the color gamma (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGainShadows">
            <summary>
            Gets or sets the color gain (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorOffsetShadows">
            <summary>
            Gets or sets the color offset (applies to shadows only). Default is 0.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorSaturationMidtones">
            <summary>
            Gets or sets the color saturation (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorContrastMidtones">
            <summary>
            Gets or sets the color contrast (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGammaMidtones">
            <summary>
            Gets or sets the color gamma (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGainMidtones">
            <summary>
            Gets or sets the color gain (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorOffsetMidtones">
            <summary>
            Gets or sets the color offset (applies to midtones only). Default is 0.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorSaturationHighlights">
            <summary>
            Gets or sets the color saturation (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorContrastHighlights">
            <summary>
            Gets or sets the color contrast (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGammaHighlights">
            <summary>
            Gets or sets the color gamma (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorGainHighlights">
            <summary>
            Gets or sets the color gain (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ColorOffsetHighlights">
            <summary>
            Gets or sets the color offset (applies to highlights only). Default is 0.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_ShadowsMax">
            <summary>
            Gets or sets the shadows maximum value. Default is 0.09.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.ColorGrading_HighlightsMin">
            <summary>
            Gets or sets the highlights minimum value. Default is 0.5.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.MB_Enabled">
            <summary>
            Gets or sets a value indicating whether Motion Blur is enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.MB_Scale">
            <summary>
            Gets or sets the motion blur effect scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.MB_SampleCount">
            <summary>
            Gets or sets the amount of sample points used during motion blur rendering. It affects quality and performances.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.MB_MotionVectorsResolution">
            <summary>
            Gets or sets the motion vectors texture resolution. Motion blur uses per-pixel motion vectors buffer that contains objects movement information. Use lowe resolution to improve performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AA_Mode">
            <summary>
            Gets or sets the anti-aliasing effect mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AA_TAA_JitterSpread">
            <summary>
            Gets or sets the diameter (in texels) inside which jitter samples are spread. Smaller values result
            in crisper but more aliased output, while larger values result in more stable but
            blurrier output.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AA_TAA_Sharpness">
            <summary>
            Gets or sets the amount of sharpening applied to the color buffer. High values may introduce dark-border artifacts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AA_TAA_StationaryBlending">
            <summary>
            Gets or sets the blend coefficient for a stationary fragment. Controls the percentage of history sample blended into the final color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.AA_TAA_MotionBlending">
            <summary>
            Gets or sets the blend coefficient for a fragment with significant motion. Controls the percentage of history sample blended into the final color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rendering.PostProcessSettings.PostFxMaterials">
            <summary>
            Gets the post effect materials collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.Equals(FlaxEngine.Rendering.PostProcessSettings)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rendering.PostProcessSettings.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Rendering.RenderPass">
            <summary>
            Rendering pass types.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderPass.GBufferFill">
            <summary>
            Basic pass used to fill GBuffer with data of solid materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderPass.ForwardPass">
            <summary>
            Forward rendering pass.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderPass.DepthHW">
            <summary>
            Render hardware depth (raw depth buffer).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderPass.TransparentDistortion">
            <summary>
            Output transparent materials distortion vectors (with blending).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderPass.MotionVectors">
            <summary>
            Motion vectors rendering pass (for dynamic objects).
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.RenderView">
            <summary>
            Rendering view description object. Contains information about viewport location and orientation in space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Position">
            <summary>
            The position of the view.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Near">
            <summary>
            The near plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Direction">
            <summary>
            The direction of the view.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Far">
            <summary>
            The far plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.View">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Projection">
            <summary>
            The projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.NonJitteredProjection">
            <summary>
            The projection matrix with no camera offset (no jittering). 
            For many temporal image effects, the camera that is currently rendering needs to be slightly offset from the default projection (that is, the camera is ‘jittered’). 
            If you use motion vectors and camera jittering together, use this property to keep the motion vectors stable between frames.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.TemporalAAJitter">
            <summary>
            The temporal AA jitter packed (xy - this frame jitter, zw - previous frame jitter). Cached before rendering. Zero if TAA is disabled. The value added to projection matrix (in clip space).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.IsOfflinePass">
            <summary>
            Flag used by static, offline rendering passes (eg. reflections rendering, lightmap rendering etc.)
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.MaxShadowsQuality">
            <summary>
            Maximum allowed shadows quality for this view
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.ModelLODBias">
            <summary>
            The model LOD bias. Default is 0. Applied to all the objects in the render view.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.ModelLODDistanceFactor">
            <summary>
            The model LOD distance scale factor. Default is 1. Applied to all the objects in the render view. Higher values increase LODs quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.ShadowModelLODBias">
            <summary>
            The model LOD bias. Default is 0. Applied to all the objects in the shadow maps render views. Can be used to improve shadows rendering performance or increase quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.ShadowModelLODDistanceFactor">
            <summary>
            The model LOD distance scale factor. Default is 1. Applied to all the objects in the shadow maps render views. Higher values increase LODs quality. Can be used to improve shadows rendering performance or increase quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Flags">
            <summary>
            The view flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.RenderView.Mode">
            <summary>
            The view mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderView.SetUp(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Initializes render view data.
            </summary>
            <param name="view">The view.</param>
            <param name="projection">The projection.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderView.SetProjector(System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Set up view for projector rendering.
            </summary>
            <param name="nearPlane">Near plane</param>
            <param name="farPlane">Far plane</param>
            <param name="position">Camera's position</param>
            <param name="direction">Camera's direction vector</param>
            <param name="up">Camera's up vector</param>
            <param name="angle">Camera's FOV angle (in degrees)</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderView.CopyFrom(FlaxEngine.Camera)">
            <summary>
            Copies render view data from the camera.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.RenderView.CopyFrom(FlaxEngine.Camera,FlaxEngine.Viewport@)">
            <summary>
            Copies render view data from the camera.
            </summary>
            <param name="camera">The camera.</param>
            <param name="customViewport">The custom viewport to use for view/projeection matrices override.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.SceneRenderTask">
            <summary>
            Render task which draws scene actors into the output buffer.
            </summary>
            <seealso cref="T:FlaxEngine.Rendering.RenderTask" />
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.GlobalCustomPostFx">
            <summary>
            The global custom post processing effects applied to all <see cref="T:FlaxEngine.Rendering.SceneRenderTask"/> (applied to tasks that have <see cref="F:FlaxEngine.Rendering.SceneRenderTask.AllowGlobalCustomPostFx"/> turned on).
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.SceneRenderTask.BeginDelegate">
            <summary>
            Action delegate called before scene rendering. Should prepare <see cref="F:FlaxEngine.Rendering.SceneRenderTask.View"/> structure for rendering.
            </summary>
            <param name="task">The task.</param>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.SceneRenderTask.EndDelegate">
            <summary>
            Action delegate called after scene rendering.
            </summary>
            <param name="task">The task.</param>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.SceneRenderTask.DrawDelegate">
            <summary>
            Action delegate called during rendering scene part to the view. Should submit custom draw calls using <see cref="T:FlaxEngine.Rendering.DrawCallsCollector"/>.
            </summary>
            <param name="collector">The draw calls collector.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.SceneRenderTask.CanSkipRenderingDelegate">
            <summary>
            The custom event to can skip rendering if need to. Returns true if should skip rendering a frame.
            </summary>
            <returns>True if skip rendering, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.ActorsSource">
            <summary>
            The actors source to use during rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.CustomActors">
            <summary>
            The custom set of actors to render.
            If collection is empty whole scene actors will be used.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.Output">
            <summary>
            The rendering output surface.
            It needs to be assigned by the user to perform rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.Buffers">
            <summary>
            The frame rendering buffers.
            Task is creating and resizing them during rendering if need to.
            Size of the buffers always equals size of the output.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.Flags">
            <summary>
            The view flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.Mode">
            <summary>
            The view mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.View">
            <summary>
            The rendering view description.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.Camera">
            <summary>
            The custom camera actor to use during rendering.
            If not provided the default one will be used.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.CanSkipRendering">
            <summary>
            The custom event to can skip rendering if need to. Returns true if should skip rendering a frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.CustomPostFx">
            <summary>
            The custom post processing effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.AllowGlobalCustomPostFx">
            <summary>
            True if allow using global custom PostFx when rendering this task.
            </summary>
        </member>
        <member name="E:FlaxEngine.Rendering.SceneRenderTask.Begin">
            <summary>
            The action called on rendering begin.
            </summary>
        </member>
        <member name="E:FlaxEngine.Rendering.SceneRenderTask.End">
            <summary>
            The action called on rendering end.
            </summary>
        </member>
        <member name="E:FlaxEngine.Rendering.SceneRenderTask.Draw">
            <summary>
            The action called on view rendering to collect draw calls.
            It allows to extend rendering pipeline and draw custom geometry non-existing in the scene or custom actors set.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.SceneRenderTask.FrameCount">
            <summary>
            The amount of frame rendered by this task. Is auto incremented on scene rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.Rendering.SceneRenderTask.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rendering.SceneRenderTask.OnBegin(FlaxEngine.Rendering.GPUContext)">
            <summary>
            Called when on rendering begin.
            </summary>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="M:FlaxEngine.Rendering.SceneRenderTask.OnEnd(FlaxEngine.Rendering.GPUContext)">
            <summary>
            Called when on rendering end.
            </summary>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="T:FlaxEngine.Rendering.TessellationMethod">
            <summary>
            Describes the different tessellation methods supported by the graphics system.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TessellationMethod.None">
            <summary>
            No tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TessellationMethod.Flat">
            <summary>
            Flat tessellation. Also known as dicing tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TessellationMethod.PointNormal">
            <summary>
            Point normal tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TessellationMethod.Phong">
            <summary>
            Geometric version of Phong normal interpolation, not applied on normals but on the vertex positions.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.TextureDimensions">
            <summary>
            Defines the dimension of a texture object.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureDimensions.Texture">
            <summary>
            The texture (2d).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureDimensions.VolumeTexture">
            <summary>
            The volume texture (3d texture).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureDimensions.CubeTexture">
            <summary>
            The cube texture (2d texture array of 6 items).
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.TextureFlags">
            <summary>
            GPU texture usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.None">
            <summary>
            No texture flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.ShaderResource">
            <summary>
            Create a texture that can be bound as a shader resource.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.RenderTarget">
            <summary>
            Create a texture that can be bound as a render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.UnorderedAccess">
            <summary>
            Create a texture can be bound as an unordered access buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.DepthStencil">
            <summary>
            Create a texture can be bound as a depth stencil buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.PerMipHandles">
            <summary>
            Create render target handles per texture mip map (valid only for Texture2D with ShaderResource or RenderTarget flag).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.PerSliceHandles">
            <summary>
            Create render target handles per texture array/volume slice (valid only for Texture2D and Texture3D with ShaderResource or RenderTarget flag).
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.TextureFlags.ReadOnlyDepthHandle">
            <summary>
            Create read-only handle for depth-stencil buffer. Valid only if texture uses depth-stencil and the graphics device supports it.
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.ViewFlags">
            <summary>
            Frame rendering flags used to switch between graphics features.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.EditorSprites">
            <summary>
            Shows/hides Editor sprites
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.Reflections">
            <summary>
            Shows/hides reflections
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.SSR">
            <summary>
            Shows/hides Screen Space Reflections
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.AO">
            <summary>
            Shows/hides Ambient Occlusion effect
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.GI">
            <summary>
            Shows/hides Global Illumination effect
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.DirectionalLights">
            <summary>
            Shows/hides directional lights
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.PointLights">
            <summary>
            Shows/hides point lights
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.SpotLights">
            <summary>
            Shows/hides spot lights
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.SkyLights">
            <summary>
            Shows/hides sky lights
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.Shadows">
            <summary>
            Shows/hides shadows
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.SpecularLight">
            <summary>
            Shows/hides specular light rendering
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.AntiAliasing">
            <summary>
            Shows/hides Anti-Aliasing
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.CustomPostProcess">
            <summary>
            Shows/hides custom Post-Process effects
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.Bloom">
            <summary>
            Shows/hides bloom effect
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.ToneMapping">
            <summary>
            Shows/hides tone mapping effect
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.EyeAdaptation">
            <summary>
            Shows/hides eye adaptation effect
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.CameraArtifacts">
            <summary>
            Shows/hides camera artifacts
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.LensFlares">
            <summary>
            Shows/hides lens flares
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.Decals">
            <summary>
            Shows/hides deferred decals.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.DepthOfField">
            <summary>
            Shows/hides depth of field effect
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.PhysicsDebug">
            <summary>
            Shows/hides physics debug shapes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.Fog">
            <summary>
            Shows/hides fogging effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.MotionBlur">
            <summary>
            Shows/hides the motion blur effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.DefaultGame">
            <summary>
            Default flags for Game
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.DefaultEditor">
            <summary>
            Default flags for Editor
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewFlags.DefaultAssetPreview">
            <summary>
            Default flags for materials/models previews generating
            </summary>
        </member>
        <member name="T:FlaxEngine.Rendering.ViewMode">
            <summary>
            Describes frame rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Default">
            <summary>
            Full rendering
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.NoPostFx">
            <summary>
            Without post-process pass
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Diffuse">
            <summary>
            Draw Diffuse
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Normals">
            <summary>
            Draw Normals
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Emissive">
            <summary>
            Draw Emissive
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Depth">
            <summary>
            Draw Depth
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.AmbientOcclusion">
            <summary>
            Draw Ambient Occlusion
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Metalness">
            <summary>
            Draw Material's Metalness
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Roughness">
            <summary>
            Draw Material's Roughness
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Specular">
            <summary>
            Draw Material's Specular
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.SpecularColor">
            <summary>
            Draw Material's Specular Color
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.ShadingModel">
            <summary>
            Draw Shading Model
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.LightBuffer">
            <summary>
            Draw Light buffer
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Reflections">
            <summary>
            Draw reflections buffer
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.Wireframe">
            <summary>
            Draw scene objects in wireframe mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.MotionVectors">
            <summary>
            Draw motion vectors debug view
            </summary>
        </member>
        <member name="F:FlaxEngine.Rendering.ViewMode.SubsurfaceColor">
            <summary>
            Draw materials subsurface color debug view
            </summary>
        </member>
        <member name="T:FlaxEngine.Script">
            <summary>
            Base class from which every every script derives.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Scene">
            <summary>
            Gets the scene object which contains this script.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Transform">
            <summary>
            Gets or sets the world space transformation of the actors owning this script.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.LocalTransform">
            <summary>
            Gets or sets the local space transformation of the actors owning this script.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.Find``1">
            <summary>
            Tries to find the script of the given type in all the loaded scenes.
            </summary>
            <typeparam name="T">The type of the script to find.</typeparam>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Script.OnAwake">
            <summary>
            Called after the object is loaded.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnEnable">
            <summary>
            Called when object becomes enabled and active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDisable">
            <summary>
            Called when object becomes disabled and inactive.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDestroy">
            <summary>
            Called before the object will be destroyed..
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnStart">
            <summary>
            Called when a script is enabled just before any of the Update methods is called for the first time.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnUpdate">
            <summary>
            Called every frame if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnLateUpdate">
            <summary>
            Called every frame (after gameplay Update) if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnFixedUpdate">
            <summary>
            Called every fixed framerate frame if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDebugDraw">
            <summary>
            Called during drawing debug shapes in editor. Use <see cref="T:FlaxEngine.DebugDraw"/> to draw debug shapes and other visualization.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDebugDrawSelected">
            <summary>
            Called during drawing debug shapes in editor when object is selected. Use <see cref="T:FlaxEngine.DebugDraw"/> to draw debug shapes and other visualization.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Enabled">
            <summary>
            Enable/disable script updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Actor">
            <summary>
            Gets or sets the actor owning that script.
            </summary>
            <remarks>
            Changing script parent breaks any existing prefab links.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Script.OrderInParent">
            <summary>
            Gets or sets zero-based index in parent actor scripts list.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.HasPrefabLink">
            <summary>
            Gets a value indicating whether this script has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.PrefabID">
            <summary>
            Gets the prefab asset ID. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.PrefabObjectID">
            <summary>
            Gets the ID of the object within a script that is used for synchronization with this script. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.BreakPrefabLink">
            <summary>
            Breaks the prefab linkage for this script.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.Find(System.Type)">
            <summary>
            Tries to find the script of the given type in all the loaded scenes.
            </summary>
            <param name="type">The type of the script to find.</param>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.Window">
            <summary>
            Provides the ability to create, configure, show, and manage the lifetime of windows.
            </summary>
        </member>
        <member name="T:FlaxEngine.Window.ClosingDelegate">
            <summary>
            Window closing delegate.
            </summary>
            <param name="reason">The closing reason.</param>
            <param name="cancel">If set to <c>true</c> operation will be cancelled, otherwise window will be closed.</param>
        </member>
        <member name="T:FlaxEngine.Window.HitTestDelegate">
            <summary>
            Perform window hit test delegate.
            </summary>
            <param name="mouse">The mouse position. The coordinate is relative to the upper-left corner of the screen. Use <see cref="M:FlaxEngine.Window.ScreenToClient(FlaxEngine.Vector2)"/> to convert position into client space coordinates.</param>
            <returns>Hit result.</returns>
        </member>
        <member name="T:FlaxEngine.Window.MouseButtonDelegate">
            <summary>
            Perform mouse buttons action.
            </summary>
            <param name="mouse">The mouse position.</param>
            <param name="buttons">The mouse buttons state.</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.MouseMoveDelegate">
            <summary>
            Perform mouse move action.
            </summary>
            <param name="mouse">The mouse position.</param>
        </member>
        <member name="T:FlaxEngine.Window.MouseWheelDelegate">
            <summary>
            Perform mouse wheel action.
            </summary>
            <param name="mouse">The mouse position.</param>
            <param name="delta">The mouse wheel move delta (can be positive or negative; normalized to [-1;1] range).</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.CharDelegate">
            <summary>
            Perform input character action.
            </summary>
            <param name="c">The input character.</param>
        </member>
        <member name="T:FlaxEngine.Window.KeyboardDelegate">
            <summary>
            Perform keyboard action.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="E:FlaxEngine.Window.OnCharInput">
            <summary>
            Event fired on character input.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.KeyDown">
            <summary>
            Event fired on key pressed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.KeyUp">
            <summary>
            Event fired on key released.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseDown">
            <summary>
            Event fired when mouse goes down.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseUp">
            <summary>
            Event fired when mouse goes up.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseDoubleClick">
            <summary>
            Event fired when mouse double clicks.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseWheel">
            <summary>
            Event fired when mouse wheel is scrolling.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseMove">
            <summary>
            Event fired when mouse moves
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseLeave">
            <summary>
            Event fired when mouse leaves window.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.GotFocus">
            <summary>
            Event fired when window gets focus.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.LostFocus">
            <summary>
            Event fired when window lost focus.
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.HitTest">
            <summary>
            Event fired when window performs hit test, parameter is a mouse position
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.LeftButtonHit">
            <summary>
            Event fired when left mouse button goes down (hit test performed etc.).
            Returns true if event has been processed and further actions should be canceled, otherwise false.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.Closing">
            <summary>
            Event fired when windows wants to be closed. Should return true if suspend window closing, otherwise returns false
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.Closed">
            <summary>
            Event fired when gets closed and deleted, all references to the window object should be removed at this point.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsWindowed">
            <summary>
            Gets a value indicating whether this window is in windowed mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.GUI">
            <summary>
            The window GUI root object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.TrackingMouseOffset">
            <summary>
            Gets the mouse tracking offset.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.DoDragDrop(FlaxEngine.GUI.DragData)">
            <summary>
            Starts the drag and drop operation.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:FlaxEngine.Window.Create(FlaxEngine.CreateWindowSettings)">
            <summary>
            Creates the new managed window using the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>Created window or null if failed.</returns>
        </member>
        <member name="P:FlaxEngine.Window.IsFullscreen">
            <summary>
            Gets or sets a value that indicates whether a window is in a fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsVisible">
            <summary>
            Gets or sets a value that indicates whether a window is visible (hidden or shown).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMinimized">
            <summary>
            Gets a value that indicates whether a window is minimized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMaximized">
            <summary>
            Gets a value that indicates whether a window is maximized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MousePosition">
            <summary>
            Gets or sets the position of the mouse in the window space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Handle">
            <summary>
            Gets the native window handle (platform specific).
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Restore">
            <summary>
            Restores the window state before minimizing or maximizing.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">The closing reason.</param>
        </member>
        <member name="P:FlaxEngine.Window.ClientBounds">
            <summary>
            Gets or sets the client bounds of the window (client area not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Position">
            <summary>
            Gets or sets the window position (in screen coordinates).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientPosition">
            <summary>
            Gets or sets the client position of the window (client area not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Size">
            <summary>
            Gets the window size (including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientSize">
            <summary>
            Gets or sets the size of the client area of the window (not including border).
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.ScreenToClient(FlaxEngine.Vector2)">
            <summary>
            Converts screen space location into window space coordinates.
            </summary>
            <param name="screenPos">The screen position.</param>
            <returns>The client space position.</returns>
        </member>
        <member name="M:FlaxEngine.Window.ClientToScreen(FlaxEngine.Vector2)">
            <summary>
            Converts window space location into screen space coordinates.
            </summary>
            <param name="clientPos">The client position.</param>
            <returns>The screen space position.</returns>
        </member>
        <member name="P:FlaxEngine.Window.Title">
            <summary>
            Gets or sets window title.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Opacity">
            <summary>
            Gets or set window opacity value (valid only for windows created with SupportsTransparency flag). Opacity values are normalized to range [0;1].
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsFocused">
            <summary>
            Determines whether this window is focused.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Focus">
            <summary>
            Focuses this window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.BringToFront(System.Boolean)">
            <summary>
            Brings window to the front of the Z order.
            </summary>
            <param name="force">True if move to the front by force, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Window.FlashWindow">
            <summary>
            Flashes the window to bring use attention.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.DoDragDrop(System.String)">
            <summary>
            Starts drag and drop operation
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Window.StartTrackingMouse(System.Boolean)">
            <summary>
            Starts the mouse tracking.
            </summary>
            <param name="useMouseScreenOffset">If set to true will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.Window.EndTrackingMouse">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Cursor">
            <summary>
            Gets or sets the mouse cursor.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.GetKey(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key ID to check.</param>
            <returns>True if user holds down the key identified by id, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetKeyDown(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key ID to check.</param>
            <returns>True if user starts pressing down the key, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetKeyUp(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key ID to check.</param>
            <returns>True if user releases the key, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button down state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button up state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="P:FlaxEngine.Window.RenderingEnabled">
            <summary>
            Gets or sets value indicating whenever window rendering is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.Application">
            <summary>
            Application management utilities.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.IsInMainThread">
            <summary>
            Returns true if the current code is executed on a main application thread.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.Is64bitApp">
            <summary>
            Returns true if is running 64 bit application (otherwise 32 bit).
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.IsEditor">
            <summary>
            Returns true if the game is running in the Flax Editor; false if run from any deployment target.
            </summary>
            <remarks>
            Use this property to perform Editor-related actions.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Application.Platform">
            <summary>
            Gets the platform the game is running on.
            </summary>
            <remarks>
            Use this property to perform platform dependent actions.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Application.ComputerName">
            <summary>
            Gets the name of the computer machine.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.CommandLine">
            <summary>
            Gets the command line for the application.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.UserName">
            <summary>
            Gets the name of the current user.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.UserLocaleName">
            <summary>
            Gets the current user locale culture name eg. "pl-PL" or "en-US".
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.DesktopSize">
            <summary>
            Gets size of the primary desktop.
            </summary>
        </member>
        <member name="M:FlaxEngine.Application.GetMonitorBounds(FlaxEngine.Vector2)">
            <summary>
            Gets the origin position and size of the monitor at the given screen-space location.
            </summary>
            <param name="screenPos">The screen position (in pixels).</param>
            <returns>The monitor bounds.</returns>
        </member>
        <member name="P:FlaxEngine.Application.VirtualDesktopSize">
            <summary>
            Gets the size of the virtual desktop made of all the monitors attached.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.VirtualDesktopBounds">
            <summary>
            Gets the bounds rectangle of the virtual desktop made of all the monitors attached.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.MousePosition">
            <summary>
            Gets or sets the current mouse position in the screen coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.HasFocus">
            <summary>
            True if app has focus.
            </summary>
        </member>
        <member name="M:FlaxEngine.Application.Exit">
            <summary>
            Requests normal engine exit.
            </summary>
        </member>
        <member name="M:FlaxEngine.Application.Fatal(System.String)">
            <summary>
            Immediately released all the engine resources and closes the application. Used when fatal error occurred.
            </summary>
            <param name="msg">Fatal error message. Will be saved to the log. Should contain basic information about the error.</param>
        </member>
        <member name="P:FlaxEngine.Application.ClipboardText">
            <summary>
            Gets or sets the system clipboard text.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.ClipboardRawData">
            <summary>
            Gets or sets the system clipboard raw data bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.Application.ClipboardFiles">
            <summary>
            Gets or sets the system clipboard copied files/folders.
            </summary>
        </member>
        <member name="M:FlaxEngine.Application.StartProcess(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Starts a new native process.
            </summary>
            <param name="path">Target file path.</param>
            <param name="args">Custom command line arguments to pass to the new application.</param>
            <param name="hiddenWindow">True if hide process window, otherwise false (it's not always possible).</param>
            <param name="waitForEnd">True if wait for the process end, otherwise false.</param>
            <returns>Retrieves the termination status of the specified process. Invalid if process is still running.</returns>
        </member>
        <member name="M:FlaxEngine.Application.GetCustomSettings(System.String)">
            <summary>
            Gets the custom game settings asset referenced by the given key.
            </summary>
            <param name="key">The unique key.</param>
            <returns>The returned asset. Returns null if key is invalid, cannot load asset or data is missing.</returns>
        </member>
        <member name="T:FlaxEngine.Audio">
            <summary>
            The audio service used for music and sound effects playback.
            </summary>
        </member>
        <member name="E:FlaxEngine.Audio.DevicesChanged">
            <summary>
            The audio devices collection changed event.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.Devices">
            <summary>
            Gets the audio devices collection detected by the engine.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.ActiveDevice">
            <summary>
            Gets the active audio device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.MasterVolume">
            <summary>
            Gets or sets the master volume applied to all the audio sources (normalized to range 0-1).
            </summary>
        </member>
        <member name="T:FlaxEngine.Content">
            <summary>
            Loads and manages asset objects.
            </summary>
        </member>
        <member name="E:FlaxEngine.Content.AssetDisposing">
            <summary>
            Occurs when asset is being disposed and will be unloaded (by force). All references to it should be released.
            </summary>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.Guid@)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not created (see log for error info).
            </summary>
            <param name="id">Asset unique ID.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.Guid)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load(System.Guid,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <param name="timeoutInMiliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <param name="timeoutInMiliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadInternal(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <param name="timeoutInMiliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load``1(System.Guid,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <param name="timeoutInMiliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load``1(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <param name="timeoutInMiliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadInternal``1(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder and without an asset file extension.</param>
            <param name="timeoutInMiliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAssetInfo(System.Guid,System.String@,System.String@)">
            <summary>
            Find asset info by id.
            </summary>
            <param name="id">The unique asset ID.</param>
            <param name="typeName">If method returns true, this contains found asset type name.</param>
            <param name="path">If method returns true, this contains found asset path.</param>
            <returns>True if found any asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAssetInfo(System.String,System.String@,System.Guid@)">
            <summary>
            Find asset info by path.
            </summary>
            <param name="path">The asset file path (full path).</param>
            <param name="typeName">If method returns true, this contains found asset type name.</param>
            <param name="id">If method returns true, this contains found asset id.</param>
            <returns>True if found any asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.CreateVirtualAsset``1">
            <summary>
            Creates temporary and virtual asset of the given type.
            Virtual assets have limited usage but allow to use custom assets data at runtime.
            Virtual assets are temporary and exist until application exit.
            </summary>
            <typeparam name="T">Type of the asset to create. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if created, null otherwise. See log for error message if need to.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.Guid)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not created (see log for error info).
            </summary>
            <param name="id">Asset unique ID.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not created (see log for error info).
            </summary>
            <param name="path">Path to the asset.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal``1(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset was not created (see log for error info).
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder and without an asset file extension.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.RenameAsset(System.String,System.String)">
            <summary>
            Renames the asset. Handles situation when asset is being loaded or storage file locked. Available only in editor.
            </summary>
            <param name="oldPath">The asset path to rename.</param>
            <param name="newPath">The new asset path to set.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.DeleteAsset(System.String)">
            <summary>
            Removes asset in a safe way. Available only in editor.
            </summary>
            <param name="path">The asset path.</param>
        </member>
        <member name="M:FlaxEngine.Content.GetAsset``1(System.Guid)">
            <summary>
            Gets the asset from the Content Pool if it has been loaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAsset``1(System.String)">
            <summary>
            Gets the asset from the Content Pool if it has been loaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="P:FlaxEngine.Content.AssetsCount">
            <summary>
            Gets the amount of created asset objects.
            </summary>
        </member>
        <member name="T:FlaxEngine.DebugDraw">
            <summary>
            The debug shapes rendering service. Not available in build game. For use only in the editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireSphere(FlaxEngine.BoundingSphere,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.Draw(FlaxEngine.Rendering.RenderTask,FlaxEngine.Actor[])">
            <summary>
            Draws the debug data.
            </summary>
            <param name="task">The calling rendering task.</param>
            <param name="selectedActors">The selected actors.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawLine(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireBox(FlaxEngine.BoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawBox(FlaxEngine.BoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireFrustum(FlaxEngine.BoundingFrustum,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireBox(FlaxEngine.OrientedBoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawBox(FlaxEngine.OrientedBoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe sphere.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the sphere.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireTriangle(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangle(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangles(FlaxEngine.Vector3[],FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangles.
            </summary>
            <param name="vertices">The triangle vertices buffer (3 vertices per triangle).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangles(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangles.
            </summary>
            <param name="vertices">The triangle vertices buffer.</param>
            <param name="indices">The triangle indices buffer (3 indices per triangle).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawCircle(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the circle.
            </summary>
            <param name="position">The center position.</param>
            <param name="normal">The normal vector direction.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireTube(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe tube.
            </summary>
            <param name="position">The center position.</param>
            <param name="orientation">The orientation.</param>
            <param name="radius">The radius.</param>
            <param name="length">The length.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireArrow(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Color,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe arrow.
            </summary>
            <param name="position">The arrow origin position.</param>
            <param name="orientation">The orientation (defines the arrow direction).</param>
            <param name="color">The color.</param>
            <param name="scale">The arrow scale (used to adjust the arrow size).</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.Draw(FlaxEngine.Rendering.RenderTask,System.IntPtr[],FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.RenderTarget,System.Boolean)">
            <summary>
            Draws the debug shapes to the custom texture using given GPU command context.
            </summary>
            <param name="task">The calling rendering task.</param>
            <param name="selectedActors">The selected actors.</param>
            <param name="target">The rendering output surface.</param>
            <param name="context">The GPU commands context.</param>
            <param name="depthBuffer">The custom depth texture used for depth test. Can be MSAA. Must match target surface size.</param>
            <param name="enableDepthTest">True if perform manual depth test with scene depth buffer when rendering the primitives. Uses custom shader and the scene depth buffer.</param>
        </member>
        <member name="T:FlaxEngine.Globals">
            <summary>
            Interop class used to access Flax global variables via C# API.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.StartupPath">
            <summary>
            Gets the Main engine directory path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.TemporaryFolder">
            <summary>
            Gets the Temporary folder path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectFolder">
            <summary>
            Gets the project directory path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EngineFolder">
            <summary>
            Gets the Engine private data folder path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.DevelopmentFolder">
            <summary>
            Gets the development files folder path.
            Valid only in development builds.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EditorFolder">
            <summary>
            Gets the Editor private data folder path.
            Valid only in Editor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ToolsFolder">
            <summary>
            Gets the external tools folder path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ContentFolder">
            <summary>
            Gets the content directory path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.SourceFolder">
            <summary>
            Gets the game source code directory path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectCacheFolder">
            <summary>
            Gets the project specific cache folder path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.MonoPath">
            <summary>
            Gets the Mono library folder path.
            </summary>
        </member>
        <member name="M:FlaxEngine.Globals.GetPaths">
            <summary>
            Gets Flax global paths.
            </summary>
            <returns>Array with Flax global paths.</returns>
        </member>
        <member name="P:FlaxEngine.Globals.Version">
            <summary>
            Gets the Flax version text.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.BuildNumber">
            <summary>
            Gets the Flax build number.
            </summary>
        </member>
        <member name="T:FlaxEngine.Input">
            <summary>
            The interface to get input information from Flax.
            </summary>
        </member>
        <member name="T:FlaxEngine.Input.ActionConfig">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.ActionConfig.Name">
            <summary>
            The action "friendly name" used to access it from code.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.ActionConfig.Mode">
            <summary>
            The trigger mode. Allows to specify when input event should be fired.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.ActionConfig.Key">
            <summary>
            The keyboard key to map for this action. Use <see cref="F:FlaxEngine.Keys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.ActionConfig.MouseButton">
            <summary>
            The mouse button to map for this action. Use <see cref="F:FlaxEngine.MouseButton.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.ActionConfig.GampadButton">
            <summary>
            The gamepad button to map for this action. Use <see cref="F:FlaxEngine.GamePadButton.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.ActionConfig.Gamepad">
            <summary>
            Which gamepad should be used.
            </summary>
        </member>
        <member name="T:FlaxEngine.Input.AxisConfig">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Name">
            <summary>
            The axis "friendly name" used to access it from code.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Axis">
            <summary>
            The axis type (mouse, gamepad, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Gamepad">
            <summary>
            Which gamepad should be used.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.PositiveButton">
            <summary>
            The button to be pressed for movement in positive direction. Use <see cref="F:FlaxEngine.Keys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.NegativeButton">
            <summary>
            The button to be pressed for movement in negative direction. Use <see cref="F:FlaxEngine.Keys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.DeadZone">
            <summary>
            Any positive or negative values that are less than this number will register as zero. Useful for gamepads to specify the deadzone.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Sensitivity">
            <summary>
            For keyboard input, a larger value will result in faster response time (in units/s). A lower value will be more smooth. For Mouse delta the value will scale the actual mouse delta.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Gravity">
            <summary>
            For keyboard input describes how fast will the input recenter. Speed (in units/s) that output value will rest to neutral value if not when device at rest.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Scale">
            <summary>
            Additional scale parameter applied to the axis value. Allows to invert it or modify the range.
            </summary>
        </member>
        <member name="F:FlaxEngine.Input.AxisConfig.Snap">
            <summary>
            If enabled, the axis value will be immediately reset to zero after it receives opposite inputs. For keyboard input only.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.ActionMappings">
            <summary>
            Maps a discrete button or key press events to a "friendly name" that will later be bound to event-driven behavior. The end effect is that pressing (and/or releasing) a key, mouse button, or keypad button.
            </summary>
            <remarks>
            Allocates the memory on get. Use <see cref="M:FlaxEngine.Input.GetActionMappingsCount"/> and <see cref="M:FlaxEngine.Input.GetActionMapping(System.Int32,FlaxEngine.Input.ActionConfig@)"/> to reduce dynamic memory allocations.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Input.AxisMappings">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
            <remarks>
            Allocates the memory on get. Use <see cref="M:FlaxEngine.Input.GetAxisMappingsCount"/> and <see cref="M:FlaxEngine.Input.GetAxisMapping(System.Int32,FlaxEngine.Input.AxisConfig@)"/> to reduce dynamic memory allocations.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Input.GetActionMappingsCount">
            <summary>
            Gets the amount of assigned action mappings.
            </summary>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
            <returns>The amount of mappings.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetAxisMappingsCount">
            <summary>
            Gets the amount of assigned axis mappings.
            </summary>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
            <returns>The amount of mappings.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetActionMapping(System.Int32,FlaxEngine.Input.ActionConfig@)">
            <summary>
            Gets the action mapping configuration.
            </summary>
            <param name="index">The action mapping index.</param>
            <param name="result">The result configuration.</param>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxisMapping(System.Int32,FlaxEngine.Input.AxisConfig@)">
            <summary>
            Gets the axis mapping configuration.
            </summary>
            <param name="index">The axis mapping index.</param>
            <param name="result">The result configuration.</param>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.SetActionMappings(FlaxEngine.Input.ActionConfig[])">
            <summary>
            Sets the action mapping configuration. Use <see cref="P:FlaxEngine.Input.ActionMappings"/> to get the current config.
            </summary>
            <param name="value">The value to set.</param>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.SetAxisMappings(FlaxEngine.Input.AxisConfig[])">
            <summary>
            Sets the axis mapping configuration. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="value">The value to set.</param>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAction(System.String)">
            <summary>
            Gets the value of the virtual action identified by name. Use <see cref="P:FlaxEngine.Input.ActionMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>True if action has been triggered in the current frame (e.g. button pressed), otherwise false.</returns>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxis(System.String)">
            <summary>
            Gets the value of the virtual axis identified by name. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>The current axis value (e.g for gamepads it's in the range -1..1). Value is smoothed to reduce artifacts.</returns>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxisRaw(System.String)">
            <summary>
            Gets the raw value of the virtual axis identified by name with no smoothing filtering applied. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>The current axis value (e.g for gamepads it's in the range -1..1). No smoothing applied.</returns>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="E:FlaxEngine.Input.ActionTriggered">
            <summary>
            Event fired when virtual input action is triggered. Called before scripts update. See <see cref="P:FlaxEngine.Input.ActionMappings"/> to edit configuration.
            </summary>
            <seealso cref="T:FlaxEngine.InputEvent"/>
        </member>
        <member name="E:FlaxEngine.Input.GamepadsChanged">
            <summary>
            The gamepads changed event. Called when new gamepad device gets disconnected or added. Can be called always on main thread before the scripts update.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.Gamepads">
            <summary>
            Gets the gamepad devices detected by the engine.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.InputText">
            <summary>
            Gets the text entered during the current frame (Unicode).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MousePosition">
            <summary>
            Gets or sets the current mouse position.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MousePositionDelta">
            <summary>
            Gets the mouse position delta during the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MouseScrollDelta">
            <summary>
            Gets the mouse wheel delta during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Input.GetKey(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True while the user holds down the key identified by id.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKeyDown(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user releases the key.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKeyUp(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user starts pressing down the key.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True while the user holds down the button.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button down state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user starts pressing down the button.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button up state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="T:FlaxEngine.MessageBox">
            <summary>
            Static class for simple message dialogs.
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBox.Icon">
            <summary>
            Specifies constants defining which information to display.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Asterisk">
            <summary>
            The asterisk icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Error">
            <summary>
            The error icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Exclamation">
            <summary>
            The exclamation icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Hand">
            <summary>
            The hand icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Information">
            <summary>
            The information icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.None">
            <summary>
            No icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Question">
            <summary>
            The question icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Stop">
            <summary>
            The stop sign icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Icon.Warning">
            <summary>
            The warning icon.
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBox.Buttons">
            <summary>
            Specifies constants defining which buttons to display on a Message Box.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Buttons.AbortRetryIgnore">
            <summary>
            Abort, Retry and Ignore buttons
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Buttons.OK">
            <summary>
            OK button
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Buttons.OKCancel">
            <summary>
            OK and Cancel buttons
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Buttons.RetryCancel">
            <summary>
            Retry and Cancel buttons
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Buttons.YesNo">
            <summary>
            Yes and No buttons
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBox.Buttons.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons
            </summary>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String)">
            <summary>
            Displays a message box with specified text
            </summary>
            <param name="text">The text to display in the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption
            </summary>
            <param name="text">The text to display in the message box</param>
            <param name="caption">The text to display in the title bar of the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String,FlaxEngine.MessageBox.Buttons)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon
            </summary>
            <param name="text">The text to display in the message box</param>
            <param name="caption">The text to display in the title bar of the message box</param>
            <param name="buttons">One of the Buttons values that specifies which buttons to display in the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String,FlaxEngine.MessageBox.Buttons,FlaxEngine.MessageBox.Icon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon
            </summary>
            <param name="text">The text to display in the message box</param>
            <param name="caption">The text to display in the title bar of the message box</param>
            <param name="buttons">One of the Buttons values that specifies which buttons to display in the message box</param>
            <param name="icon">One of the Icon values that specifies which icon to display in the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String)">
            <summary>
            Displays a message box with specified text
            </summary>
            <param name="parent">Parent window or null if not used</param>
            <param name="text">The text to display in the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption
            </summary>
            <param name="parent">Parent window or null if not used</param>
            <param name="text">The text to display in the message box</param>
            <param name="caption">The text to display in the title bar of the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String,FlaxEngine.MessageBox.Buttons)">
            <summary>
            Displays a message box with specified text, caption and buttons
            </summary>
            <param name="parent">Parent window or null if not used</param>
            <param name="text">The text to display in the message box</param>
            <param name="caption">The text to display in the title bar of the message box</param>
            <param name="buttons">One of the Buttons values that specifies which buttons to display in the message box</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String,FlaxEngine.MessageBox.Buttons,FlaxEngine.MessageBox.Icon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the Buttons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the Icon values that specifies which icon to display in the message box.</param>
            <returns>One of the DialogResult values</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.OpenFileDialog(FlaxEngine.Window,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Displays a standard dialog box that prompts the user to open a file(s).
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="initialDirectory">The initial directory to show.</param>
            <param name="filter">The files filter text. Eg. 'All files (*.*)\0*.*\0'.</param>
            <param name="multiselect">Enable or disable support to select more than one file.</param>
            <param name="title">The dialog window title.</param>
            <returns>Selected file path(s) or null if cancelled or not supported.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.BrowseFolderDialog(FlaxEngine.Window,System.String,System.String)">
            <summary>
            Displays a standard dialog box that prompts the user to select a folder.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="initialDirectory">The initial directory to show.</param>
            <param name="title">The dialog window title.</param>
            <returns>Selected folder path or null if cancelled or not supported.</returns>
        </member>
        <member name="T:FlaxEngine.NavMeshHit">
            <summary>
            The result information for navigation mesh queries.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Position">
            <summary>
            The hit point position.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Distance">
            <summary>
            The distance to hit point (from the query origin).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Normal">
            <summary>
            The hit point normal vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.Navigation">
            <summary>
            The navigation service used for path finding and agents navigation system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Navigation.IsBuildingNavMesh">
            <summary>
            Returns true if navigation system is during navmesh building (any request is valid or async task active).
            </summary>
        </member>
        <member name="P:FlaxEngine.Navigation.NavMeshBuildingProgress">
            <summary>
            Gets the navmesh building progress (normalized to range 0-1).
            </summary>
        </member>
        <member name="M:FlaxEngine.Navigation.FindDistanceToWall(FlaxEngine.Vector3,FlaxEngine.NavMeshHit@,System.Single)">
            <summary>
            Finds the distance from the specified start position to the nearest polygon wall.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="hitInfo">The result hit information. Valid only when query succeed.</param>
            <param name="maxDistance">The maximum distance to search for wall (search radius).</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.NavMeshHit@)">
            <summary>
            Casts a 'walkability' ray along the surface of the navigation mesh from the start position toward the end position.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="hitInfo">The result hit information. Valid only when query succeed.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.FindPath(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3[]@)">
            <summary>
            Finds the path between the two positions presented as a list of waypoints stored in the corners array.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="path">The result path.</param>
            <returns>True if found valid path between given two points (it may be partial), otherwise false if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.FindPath(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3[],System.Int32@)">
            <summary>
            Finds the path between the two positions presented as a list of waypoints stored in the corners array.
            </summary>
            <remarks>
            This method does no allocate dynamic memory.
            </remarks>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="path">The result path buffer (allocated by user to contain path waypoints).</param>
            <param name="pathSize">The result path buffer size (the amount of valid waypoints written to the buffer).</param>
            <returns>True if found valid path between given two points (it may be partial), otherwise false if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Projects the point to nav mesh surface (finds the nearest polygon).
            </summary>
            <param name="point">The source position.</param>
            <param name="result">The result position on the navmesh (valid only if method returns true).</param>
            <returns>True if found valid location on the navmesh, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Physics">
            <summary>
            Physics simulation service.
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.RayCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>The result hits.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>The result hits.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCastAll(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>The result hits.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Int32,System.Boolean)">
            <summary>
            Checks whether the given box overlaps with other colliders or not.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckSphere(FlaxEngine.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
            Checks whether the given sphere overlaps with other colliders or not.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Int32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>The result colliders that overlap with the given box.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapSphere(FlaxEngine.Vector3,System.Single,System.Int32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>The result colliders that overlap with the given sphere.</returns>
        </member>
        <member name="P:FlaxEngine.Physics.Gravity">
            <summary>
            Gets or sets the current gravity force.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.EnableCCD">
            <summary>
            Gets or sets the CCD feature enable flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.BounceThresholdVelocity">
            <summary>
            Gets or sets the minimum relative velocity required for an object to bounce.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.AutoSimulation">
            <summary>
            Gets or sets the automatic simulation feature. True if perform physics simulation after on fixed update by auto, otherwise user should do it.
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.Simulate(System.Single)">
            <summary>
            Performs physics simulation. Useful to execute physics simulation manually when AutoSimulation is disabled. If delta time is too small simulation may not be performed but time accumulated.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="T:FlaxEngine.PluginDelegate">
            <summary>
            Plugin related event delegate type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="T:FlaxEngine.PluginManager">
            <summary>
            Game and Editor plugins management service.
            </summary>
        </member>
        <member name="P:FlaxEngine.PluginManager.GamePlugins">
            <summary>
            Gets the loaded and enabled game plugins.
            </summary>
        </member>
        <member name="P:FlaxEngine.PluginManager.EditorPlugins">
            <summary>
            Gets the loaded and enabled editor plugins.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginLoading">
            <summary>
            Occurs before loading plugin.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginLoaded">
            <summary>
            Occurs when plugin gets loaded and initialized.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginUnloading">
            <summary>
            Occurs before unloading plugin.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginUnloaded">
            <summary>
            Occurs when plugin gets unloaded. It should not be used anymore.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginManager.CanLoadPluginDelegate">
            <summary>
            Determines whether can load the specified plugin.
            </summary>
            <param name="pluginDesc">The plugin description.</param>
            <returns>True if load it, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.PluginManager.CanLoadPlugin">
            <summary>
            Determines whether can load the specified plugin.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginManager.PluginDelegate">
            <summary>
            Plugin related event delegate type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:FlaxEngine.PluginManager.DefaultCanLoadPlugin(FlaxEngine.PluginDescription@)">
            <summary>
            The default implementation for <see cref="F:FlaxEngine.PluginManager.CanLoadPlugin"/>.
            </summary>
            <param name="pluginDesc">The plugin description.</param>
            <returns>True if load it, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.PrefabManager">
            <summary>
            The prefab manager handles the prefabs creation, synchronization and serialization.
            </summary>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <param name="rotation">The spawn rotation (in world space).</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <param name="rotation">The spawn rotation (in world space).</param>
            <param name="scale">The spawn scale.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Transform)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="transform">The spawn transformation in the world space.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Actor)">
            <summary>
            Spawns the instance of the prefab objects. If parent actor is specified then created actors are fully initialized. Otherwise it won't be attached to any scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="parent">The parent actor to add spawned object instance. Can be null to just deserialize contents of the prefab.</param>
            <returns>The created actor (root) or null if failed</returns>
        </member>
        <member name="T:FlaxEngine.Profiler">
            <summary>
            Provides C# scripts profiling methods.
            </summary>
            <remarks>
            Profiler is available in the editor and Debug builds. Release builds don't have profiling tools.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Profiler.BeginEvent(System.String)">
            <summary>
            Begins profiling a piece of code with a custom label.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:FlaxEngine.Profiler.EndEvent">
            <summary>
            Ends profiling an event.
            </summary>
        </member>
        <member name="M:FlaxEngine.Profiler.BeginEventGPU(System.String)">
            <summary>
            Begins GPU profiling a piece of code with a custom label.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:FlaxEngine.Profiler.EndEventGPU">
            <summary>
            Ends GPU profiling an event.
            </summary>
        </member>
        <member name="T:FlaxEngine.Render2D">
            <summary>
            The interface to render fast two dimensional graphics.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTransform(FlaxEngine.Matrix3x3@)">
            <summary>
            Pushes 2D transformation matrix on the stack.
            </summary>
            <param name="transform">The transformation.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PushClip(FlaxEngine.Rectangle@)">
            <summary>
            Push clipping rectangle mask
            </summary>
            <param name="clipRect">Axis aligned clipping mask rectangle</param>
        </member>
        <member name="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.Rendering.IDrawable,FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Calls drawing GUI to the texture.
            </summary>
            <remarks>This method should be called only during <see cref="M:FlaxEngine.Rendering.PostProcessEffect.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)"/></remarks>
            <param name="drawableElement">The root container for Draw methods.</param>
            <param name="context">The GPU context to handle graphics commands.</param>
            <param name="output">The output render target.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.Rendering.IDrawable,FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Matrix@)">
            <summary>
            Calls drawing GUI to the texture using custom View*Projection matrix.
            If depth buffer texture is provided there will be depth test performed during rendering.
            </summary>
            <remarks>This method should be called only during <see cref="M:FlaxEngine.Rendering.PostProcessEffect.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)"/></remarks>
            <param name="drawableElement">The root container for Draw methods.</param>
            <param name="context">The GPU context to handle graphics commands.</param>
            <param name="output">The output render target.</param>
            <param name="depthBuffer">The depth buffer render target. It's optional parameter but if provided must match output texture.</param>
            <param name="viewProjection">The View*Projection matrix used to transform all rendered vertices.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSprite(FlaxEngine.Sprite,FlaxEngine.Rectangle)">
            <summary>
            Draws sprite.
            </summary>
            <param name="sprite">Sprite to draw.</param>
            <param name="rect">Rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSprite(FlaxEngine.Sprite,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws sprite.
            </summary>
            <param name="sprite">Sprite to draw.</param>
            <param name="rect">Rectangle to draw.</param>
            <param name="color">Color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSpritePoint(FlaxEngine.Sprite,FlaxEngine.Rectangle)">
            <summary>
            Draws sprite (uses point sampler).
            </summary>
            <param name="sprite">Sprite to draw.</param>
            <param name="rect">Rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSpritePoint(FlaxEngine.Sprite,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws sprite (uses point sampler).
            </summary>
            <param name="sprite">Sprite to draw.</param>
            <param name="rect">Rectangle to draw.</param>
            <param name="color">Color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTransform(FlaxEngine.Matrix3x3)">
            <summary>
            Pushes 2D transformation matrix on the stack.
            </summary>
            <param name="transform">The transformation.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopTransform">
            <summary>
            Pops transformation matrix from the stack.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushClip(FlaxEngine.Rectangle)">
            <summary>
            Push clipping rectangle mask
            </summary>
            <param name="clipRect">Axis aligned clipping mask rectangle</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopClip">
            <summary>
            Pop clipping rectangle mask
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.TextAlignment,FlaxEngine.TextAlignment,FlaxEngine.TextWrapping,System.Single,System.Single)">
            <summary>
            Draw text
            </summary>
            <param name="font">Font to use</param>
            <param name="text">Text to render</param>
            <param name="layoutRect">The size and position of the area in which the text is drawn</param>
            <param name="color">Text color</param>
            <param name="horizontalAlignment">Horizontal alignment of the text in a layout rectangle</param>
            <param name="verticalAlignment">Vertical alignment of the text in a layout rectangle</param>
            <param name="textWrapping">Describes how wrap text inside a layout rectangle</param>
            <param name="baseLinesGapScale">Scale for distance one baseline from another. Default is 1.</param>
            <param name="scale">Text drawing scale. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,FlaxEngine.MaterialBase,System.String,FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.TextAlignment,FlaxEngine.TextAlignment,FlaxEngine.TextWrapping,System.Single,System.Single)">
            <summary>
            Draws text using a custom material shader. Given material must have GUI domain and a public parameter named Font (texture parameter used for a font atlas sampling).
            </summary>
            <param name="font">Font to use</param>
            <param name="customMaterial">Custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
            <param name="text">Text to render</param>
            <param name="layoutRect">The size and position of the area in which the text is drawn</param>
            <param name="color">Text color</param>
            <param name="horizontalAlignment">Horizontal alignment of the text in a layout rectangle</param>
            <param name="verticalAlignment">Vertical alignment of the text in a layout rectangle</param>
            <param name="textWrapping">Describes how wrap text inside a layout rectangle</param>
            <param name="baseLinesGapScale">Scale for distance one baseline from another. Default is 1.</param>
            <param name="scale">Text drawing scale. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillRectangle(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Fill rectangle area
            </summary>
            <param name="rect">Rectangle to fill</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Fill rectangle area
            </summary>
            <param name="rect">Rectangle to fill</param>
            <param name="color0">Color to use for upper left vertex</param>
            <param name="color1">Color to use for upper right vertex</param>
            <param name="color2">Color to use for bottom right vertex</param>
            <param name="color3">Color to use for bottom left vertex</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,System.Single)">
            <summary>
            Draw rectangle borders
            </summary>
            <param name="rect">Rectangle to draw</param>
            <param name="color">Color to use</param>
            <param name="thickness">Lines thickness (in pixels)</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Draw rectangle borders
            </summary>
            <param name="rect">Rectangle to draw</param>
            <param name="color0">Color to use for upper left vertex</param>
            <param name="color1">Color to use for upper right vertex</param>
            <param name="color2">Color to use for bottom right vertex</param>
            <param name="color3">Color to use for bottom left vertex</param>
            <param name="thickness">Lines thickness (in pixels)</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRenderTarget(FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draw texture
            </summary>
            <param name="rt">Render target to draw</param>
            <param name="rect">Rectangle to draw</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.Texture,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draw texture
            </summary>
            <param name="t">Texture to draw</param>
            <param name="rect">Rectangle to draw</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.SpriteAtlas,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draw texture
            </summary>
            <param name="t">Texture to draw</param>
            <param name="rect">Rectangle to draw</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturePoint(FlaxEngine.Texture,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draw texture (uses point sampler)
            </summary>
            <param name="t">Texture to draw</param>
            <param name="rect">Rectangle to draw</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturePoint(FlaxEngine.SpriteAtlas,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draw texture (uses point sampler)
            </summary>
            <param name="t">Texture to draw</param>
            <param name="rect">Rectangle to draw</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawLine(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,System.Single)">
            <summary>
            Draw line
            </summary>
            <param name="p1">Start point</param>
            <param name="p2">End point</param>
            <param name="color">Color to use</param>
            <param name="thickness">Lines thickness (in pixels)</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawBezier(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,System.Single)">
            <summary>
            Draw Bezier curve
            </summary>
            <param name="p1">Start point</param>
            <param name="p2">First control point</param>
            <param name="p3">Second control point</param>
            <param name="p4">End point</param>
            <param name="color">Color to use</param>
            <param name="thickness">Lines thickness (in pixels)</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rectangle)">
            <summary>
            Draws the GUI material in the 2D.
            </summary>
            <param name="material">Material to render. Must be a GUI material type.</param>
            <param name="rect">The target rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the GUI material in the 2D.
            </summary>
            <param name="material">Material to render. Must be a GUI material type.</param>
            <param name="rect">The target rectangle to draw.</param>
            <param name="color">Color to use</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawBlur(FlaxEngine.Rectangle,System.Single)">
            <summary>
            Draws the Gaussian-blur rectangle in the 2D that blurs the background.
            </summary>
            <param name="rect">The target rectangle to draw (blurs its background).</param>
            <param name="blurStrength">The blur strength defines how blurry the background is. Larger numbers increase blur, resulting in a larger runtime cost on the GPU.</param>
        </member>
        <member name="T:FlaxEngine.SceneDelegate">
            <summary>
            Scene actions delegate type.
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="T:FlaxEngine.ActorDelegate">
            <summary>
            Actor actors delegate type.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="T:FlaxEngine.ActorParentChangedDelegate">
            <summary>
            Actor parent changed delegate.
            </summary>
            <param name="actor">The actor.</param>
            <param name="prevParent">The previous parent.</param>
        </member>
        <member name="T:FlaxEngine.SceneManager">
            <summary>
            The scene manager handles the scenes collection and spawns/deleted actors.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneManager.IsAnySceneLoaded">
            <summary>
            Checks if any scene has been loaded. Loaded scene means deserialized and added to the scenes collection.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneSaving">
            <summary>
            Fired when scene starts saving.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneSaved">
            <summary>
            Fired when scene gets saved.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneSaveError">
            <summary>
            Fired when scene gets saving error.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneLoading">
            <summary>
            Fired when scene starts loading.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneLoaded">
            <summary>
            Fired when scene gets loaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneLoadError">
            <summary>
            Fired when scene cannot be loaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneUnloading">
            <summary>
            Fired when scene gets unloading.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.SceneUnloaded">
            <summary>
            Fired when scene gets unloaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.ActorSpawned">
            <summary>
            Occurs when new actor gets spawned to the game.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.ActorDeleted">
            <summary>
            Occurs when actor is removed from the game.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.ActorParentChanged">
            <summary>
            Occurs when actor parent gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.ActorOrderInParentChanged">
            <summary>
            Occurs when actor order in parent gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.ActorNameChanged">
            <summary>
            Occurs when actor name gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.SceneManager.ActorActiveChanged">
            <summary>
            Occurs when actor IsActive state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneManager.ChangeSceneAsync(System.Guid)">
            <summary>
            Unlaods all active scenes and loads the given scene (in the background).
            </summary>
            <param name="sceneAssetId">The scene asset identifier (scene to load).</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.ChangeSceneAsync(FlaxEngine.SceneReference)">
            <summary>
            Unlaods all active scenes and loads the given scene (in the background).
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.LoadScene(FlaxEngine.SceneReference)">
            <summary>
            Loads scene from the asset.
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.LoadSceneAsync(FlaxEngine.SceneReference)">
            <summary>
            Loads scene from the asset. Done in the background.
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if failed (given asset is not a scene asset, missing data), otherwise false.</returns>
        </member>
        <member name="P:FlaxEngine.SceneManager.ScenesCount">
            <summary>
            Gets the amount of the loaded scenes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneManager.GetScene(System.Int32)">
            <summary>
            Gets the scene.
            </summary>
            <param name="index">The zero-based index of the scene to get.</param>
            <returns>The scene object or null if index is invalid or there is no loaded scenes.</returns>
        </member>
        <member name="P:FlaxEngine.SceneManager.Scenes">
            <summary>
            Gets array of the loaded scenes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneManager.FindActor(System.Guid)">
            <summary>
            Tries to find actor with given ID.
            </summary>
            <param name="id">The actor id.</param>
            <returns>Found actor or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.FindActor(System.String)">
            <summary>
            Tries to find actor with given name.
            </summary>
            <param name="name">The actor name.</param>
            <returns>Found actor or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.FindScene(System.Guid)">
            <summary>
            Tries to find scene with given ID (checks only loaded scenes, see Scenes).
            </summary>
            <param name="id">The scene id.</param>
            <returns>Found scene or null if cannot find it (it's not loaded).</returns>
        </member>
        <member name="P:FlaxEngine.SceneManager.IsAnyAsyncActionPending">
            <summary>
            Checks if any scene action is pending.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneManager.LastSceneLoadTime">
            <summary>
            Gets the last scene load time (in UTC).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneManager.SpawnActor(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns actor on the scene.
            </summary>
            <param name="actor">The actor to spawn.</param>
            <param name="parent">The parent actor (will link spawned actor with this parent).</param>
        </member>
        <member name="M:FlaxEngine.SceneManager.SaveScene(FlaxEngine.Scene)">
            <summary>
            Saves scene to the asset.
            </summary>
            <param name="scene">The scene to serialize.</param>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.SaveSceneToBytes(FlaxEngine.Scene,System.Boolean)">
            <summary>
            Saves scene to the bytes array.
            </summary>
            <param name="scene">The scene to serialize.</param>
            <param name="prettyJson">True if use pretty Json format writer, otherwise will use the compact Json format writer that packs data to use less memory and perform the action faster.</param>
            <returns>Bytes array with the serialized scene or null if operation failed (see log for error information).</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.SaveSceneAsync(FlaxEngine.Scene)">
            <summary>
            Saves scene to the asset. Done in the background.
            </summary>
            <param name="scene">The scene to serialize.</param>
        </member>
        <member name="M:FlaxEngine.SceneManager.SaveAllScenes">
            <summary>
            Saves scene to the asset.
            </summary>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.SaveAllScenesAsync">
            <summary>
            Saves all scenes to the assets. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneManager.LoadScene(System.Guid)">
            <summary>
            Loads scene from the asset.
            </summary>
            <param name="sceneId">The scene ID to load.</param>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.LoadSceneFromBytes(System.Byte[])">
            <summary>
            Loads scene from the bytes array.
            </summary>
            <param name="sceneData">The scene data to load.</param>
            <returns>Loaded scene object, otherwise null if cannot load data (then see log for more information).</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.LoadSceneAsync(System.Guid)">
            <summary>
            Loads scene from the asset. Done in the background.
            </summary>
            <param name="sceneId">The scene ID to load.</param>
            <returns>True if failed (no scripts loaded or missing scene asset), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.UnloadScene(FlaxEngine.Scene)">
            <summary>
            Unloads given scene.
            </summary>
            <param name="scene">The scene to unload.</param>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.UnloadSceneAsync(FlaxEngine.Scene)">
            <summary>
            Unloads given scene. Done in the background.
            </summary>
            <param name="scene">The scene to unload.</param>
        </member>
        <member name="M:FlaxEngine.SceneManager.UnloadAllScenes">
            <summary>
            Unloads all scenes.
            </summary>
            <returns>True if action fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneManager.UnloadAllScenesAsync">
            <summary>
            Unloads all scenes. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneManager.ReloadScriptsAsync">
            <summary>
            Reloads scripts. Done in the background.
            </summary>
        </member>
        <member name="T:FlaxEngine.Screen">
            <summary>
            The interface to get Screen information from Flax.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.IsFullscreen">
            <summary>
            Gets or sets the fullscreen mode.
            </summary>
            <remarks>
            A fullscreen mode switch may not happen immediately. It will be performed before next frame rendering.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Screen.Size">
            <summary>
            Gets or sets the window size.
            </summary>
            <remarks>
            Resizing may not happen immediately. It will be performed before next frame rendering.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Screen.CursorVisible">
            <summary>
            Gets or sets the cursor visible flag. Allows to hide the cursor or show it.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.CursorLock">
            <summary>
            Gets or sets the cursor lock mode. Allows to lock or unlock mouse cursor movement.
            </summary>
        </member>
        <member name="T:FlaxEngine.Scripting">
            <summary>
            C# scripting service.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Update">
            <summary>
            Occurs on scripting update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.LateUpdate">
            <summary>
            Occurs on scripting 'late' update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.FixedUpdate">
            <summary>
            Occurs on scripting `fixed` update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Exit">
            <summary>
            Occurs when scripting engine is disposing. Engine is during closing and some services may be unavailable (eg. loading scenes). This may be called after the engine fatal error event.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scripting.InvokeOnUpdate(System.Action)">
            <summary>
            Calls the given action on the next scripting update.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:FlaxEngine.Scripting.IsGameAssemblyLoaded">
            <summary>
            Returns true if game scripts assembly has been loaded.
            </summary>
            <returns>True if game scripts assembly is loaded, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scripting.FlushRemovedObjects">
            <summary>
            Flushes the removed objects (disposed objects using Object.Destroy).
            </summary>
        </member>
        <member name="T:FlaxEngine.Time">
            <summary>
            The interface to get time information from Flax.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DeltaTime">
            <summary>
            Gets time in seconds it took to complete the last frame, <see cref="P:FlaxEngine.Time.TimeScale"/> dependent
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DeltaTimeTicks">
            <summary>
            Gets time in seconds it took to complete the last frame in ticks, <see cref="P:FlaxEngine.Time.TimeScale"/> dependent
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GameTime">
            <summary>
            Gets time at the beginning of this frame. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GameTimeTicks">
            <summary>
            Gets time at the beginning of this frame in ticks. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeSinceStartup">
            <summary>
            Gets real time in seconds since the game started
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeSinceStartupTicks">
            <summary>
            Gets real time in seconds since the game started in ticks
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeSinceLevelLoad">
            <summary>
            The time this frame has started (Read Only). This is the time in seconds since the last level has been loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeSinceLevelLoadTicks">
            <summary>
            The time this frame has started in ticks. This is the time in seconds since the last level has been loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledDeltaTime">
            <summary>
            Gets timeScale-independent time in seconds it took to complete the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledDeltaTimeTicks">
            <summary>
            Gets timeScale-independent time in seconds it took to complete the last frame in ticks.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledGameTime">
            <summary>
            Gets timeScale-independent time at the beginning of this frame. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledGameTimeTicks">
            <summary>
            Gets timeScale-independent time at the beginning of this frame in ticks. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UpdateFPS">
            <summary>
            Gets or sets the target amount of the game logic updates per second (script updates frequency).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.PhysicsFPS">
            <summary>
            Gets or sets the target amount of the physics simulation updates per second (also fixed updates frequency).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DrawFPS">
            <summary>
            Gets or sets the target amount of the frames rendered per second (actual game FPS).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeScale">
            <summary>
            Gets or sets scale at which the time is passing. This can be used for slow motion effects.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GamePaused">
            <summary>
            Gets or sets the value indicating whenever game logic is paused (physics, script updates, etc.).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.FramesPerSecond">
            <summary>
            Gets the current Frames Per Second amount. User scripts updates or fixed updates for physics may run at a different frequency than scene rendering. Use this property to get an accurate amount of frames rendered during the last second.
            </summary>
        </member>
        <member name="T:FlaxEngine.CubeTexture">
            <summary>
            Cube texture asset contains 6 images that is usually stored on a GPU as a cube map (one slice per each axis direction).
            </summary>
        </member>
        <member name="M:FlaxEngine.CubeTexture.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.CubeTexture"/> object.
            </summary>
        </member>
        <member name="T:FlaxEngine.IESProfile">
            <summary>
            Contains IES profile texture used by the lights to simulate real life bulb light emission.
            </summary>
        </member>
        <member name="M:FlaxEngine.IESProfile.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.IESProfile"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.IESProfile.Brightness">
            <summary>
            Gets the light brightness in Lumens, imported from the IES profile source file.
            </summary>
        </member>
        <member name="T:FlaxEngine.Sprite">
            <summary>
            Sprite handle contains basic information about a sprite.
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Invalid">
            <summary>
            Invalid sprite handle.
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Atlas">
            <summary>
            The parent sprite atlas.
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Index">
            <summary>
            The sprite index.
            </summary>
        </member>
        <member name="M:FlaxEngine.Sprite.#ctor(FlaxEngine.SpriteAtlas,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Sprite"/> struct.
            </summary>
            <param name="atlas">The atlas.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEngine.Sprite.IsValid">
            <summary>
            Returns true if sprite is valid.
            </summary>
            <returns>True if this sprite handle is valid, otherwise false.</returns>
        </member>
        <member name="P:FlaxEngine.Sprite.Name">
            <summary>
            Gets or sets the sprite name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sprite.Location">
            <summary>
            Gets or sets the sprite location (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Sprite.Size">
            <summary>
            Gets or sets the sprite size (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.Sprite.Area">
            <summary>
            Gets or sets the sprite area in atlas (in normalized atlas coordinates [0;1]).
            </summary>
        </member>
        <member name="T:FlaxEngine.SpriteAtlas">
            <summary>
            Sprite atlas texture made of collection of sprites.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.GetSprite(System.Int32)">
            <summary>
            Gets the sprite at the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The sprite</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.GetSpriteArea(System.Int32,FlaxEngine.Rectangle@)">
            <summary>
            Gets the sprite area (normalized).
            </summary>
            <param name="index">The sprite index.</param>
            <param name="spriteArea">The result sprite area.</param>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.SpriteAtlas"/> object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.GetSprite(System.String)">
            <summary>
            Gets the sprite by name.
            </summary>
            <param name="name">The sprite name.</param>
            <returns>Sprite handle (may be invalid if cannot find it).</returns>
        </member>
        <member name="P:FlaxEngine.SpriteAtlas.SpritesCount">
            <summary>
            Gets the total amount of sprites in the atlas.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.Save">
            <summary>
            Saves the sprites to the asset.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.AddSprite">
            <summary>
            Adds a new sprite to the atlas.
            </summary>
            <returns>The created sprite.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.RemoveSprite(System.Int32)">
            <summary>
            Removes new sprite from the atlas.
            </summary>
            <param name="index">The index of the sprite to remove.</param>
        </member>
        <member name="T:FlaxEngine.Texture">
            <summary>
            Texture asset contains an image that is usually stored on a GPU and is used during rendering graphics.
            </summary>
        </member>
        <member name="M:FlaxEngine.Texture.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEngine.Texture"/> object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Texture.IsNormalMap">
            <summary>
            Returns true if texture is a normal map, otherwise false.
            </summary>
        </member>
        <member name="M:FlaxEngine.Texture.Save(System.String)">
            <summary>
            Saves asset to the file. It must be fully loaded.
            </summary>
            <remarks>
            Supported only in Editor.
            </remarks>
            <param name="path">The custom asset path to use for the saving. Use empty value to save this asset to its own storage location. Can be used to duplicate asset.</param>
            <returns>True if cannot save data, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.TextureBase">
            <summary>
            Base class for <see cref="T:FlaxEngine.Texture"/>, <see cref="T:FlaxEngine.SpriteAtlas"/>, <see cref="T:FlaxEngine.IESProfile"/> and other assets that contain texture.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxTextureSize">
            <summary>
            The maximum size for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxMipLevels">
            <summary>
            The maximum amount of the mip levels for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxArraySize">
            <summary>
            The maximum array size for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.NativePtr">
            <summary>
            Gets the native pointer to the underlying resource. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Format">
            <summary>
            Gets the texture data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Width">
            <summary>
            Gets the total width of the texture. Actual resident size may be different due to dynamic content streaming. Returns 0 if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Height">
            <summary>
            Gets the total height of the texture. Actual resident size may be different due to dynamic content streaming. Returns 0 if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Size">
            <summary>
            Gets the total size of the texture. Actual resident size may be different due to dynamic content streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.ArraySize">
            <summary>
            Gets the total array size of the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.MipLevels">
            <summary>
            Gets the total mip levels count of the texture. Actual resident mipmaps count may be different due to dynamic content streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.ResidentMipLevels">
            <summary>
            Gets the current mip levels count of the texture that are on GPU ready to use.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.CurrentMemoryUsage">
            <summary>
            Gets the amount of the memory used by this resource.
            Exact value may differ due to memory alignment and resource allocation policy.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.TotalMemoryUsage">
            <summary>
            Gets the total memory usage that texture may have in use (if loaded to the maximum quality).
            Exact value may differ due to memory alignment and resource allocation policy.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextureBase.GetMipData(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the texture mip level data (raw bytes).
            </summary>
            <param name="mipIndex">The zero-based index of the mip map to get (zero is the top most mip map). See <see cref="P:FlaxEngine.TextureBase.MipLevels"/>.</param>
            <param name="rowPitch">The data row pitch (in bytes).</param>
            <param name="slicePitch">The data slice pitch (in bytes).</param>
            <returns>The mip map raw bytes data or null if loading failed.</returns>
        </member>
        <member name="T:FlaxEngine.TextureBase.InitData">
            <summary>
            The texture data initialization container.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Format">
            <summary>
            The format of the pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Width">
            <summary>
            The width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Height">
            <summary>
            The height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.ArraySize">
            <summary>
            The array size (slices count).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Mips">
            <summary>
            The mips levels data.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.InitData.IsValid">
            <summary>
            Returns true if init data is valid.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureBase.InitData.MipData">
            <summary>
            The mip data container.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.Data">
            <summary>
            The texture data. Use <see cref="F:FlaxEngine.TextureBase.InitData.MipData.RowPitch"/> and <see cref="F:FlaxEngine.TextureBase.InitData.MipData.SlicePitch"/> to define the storage format.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.RowPitch">
            <summary>
            The data container image row pitch (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.SlicePitch">
            <summary>
            The data container image slice pitch (in bytes).
            </summary>
        </member>
        <member name="M:FlaxEngine.TextureBase.Init(FlaxEngine.TextureBase.InitData)">
            <summary>
            Initializes the texture storage container with the given data. Valid only for virtual assets. Can be used in both Editor and at runtime in a build game.
            It does not perform any data streaming or uploading to the GPU. Only the texture resource is being initialized and the data is copied to be streamed later.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="initData">The texture init data.</param>
        </member>
        <member name="T:FlaxEngine.AssetReferenceAttribute">
            <summary>
            Specifies a options for an asset reference picker in the editor. Allows to customize view or provide custom value assign policy.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.AssetReferenceAttribute.TypeName">
            <summary>
            The full name of the asset type to link. Use null or empty to skip it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetReferenceAttribute.UseSmallPicker">
            <summary>
            True if use asset picker with a smaller height (single line), otherwise will use with full icon.
            </summary>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the asset type to link. Use null or empty to skip it.</param>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the asset type to link. Use null or empty to skip it.</param>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="T:FlaxEngine.CustomEditorAliasAttribute">
            <summary>
            Overrides default editor provided for the target object/class/field/property. Allows to extend visuals and editing experience of the objects.
            </summary>
            <seealso cref="T:FlaxEngine.CustomEditorAttribute"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.CustomEditorAliasAttribute.TypeName">
            <summary>
            Custom editor class typename.
            </summary>
        </member>
        <member name="M:FlaxEngine.CustomEditorAliasAttribute.#ctor(System.String)">
            <summary>
            Overrides default editor provided for the target object.
            </summary>
            <param name="typeName">The custom editor class typename.</param>
        </member>
        <member name="T:FlaxEngine.DefaultEditorAttribute">
            <summary>
            Specifies default editor provided for the target object/class/field/property. Should be used along with <see cref="T:FlaxEngine.CustomEditorAttribute"/>.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.EditorDisplayAttribute">
            <summary>
            Allows to change item display name or a group in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.InlineStyle">
            <summary>
            Special text sequence used for property names to override the default layout style and inline property into the parent layout.
            </summary>
        </member>
        <member name="P:FlaxEngine.EditorDisplayAttribute.Group">
            <summary>
            The group name. Default is null.
            </summary>
        </member>
        <member name="P:FlaxEngine.EditorDisplayAttribute.Name">
            <summary>
            The overriden item display name. Default is null.
            </summary>
        </member>
        <member name="M:FlaxEngine.EditorDisplayAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EditorDisplayAttribute"/> class.
            </summary>
            <param name="group">The group name.</param>
            <param name="name">The display name. Use special name `__inline__` (see <see cref="F:FlaxEngine.EditorDisplayAttribute.InlineStyle"/>) to inline property into the parent container.</param>
        </member>
        <member name="T:FlaxEngine.EnumDisplayAttribute">
            <summary>
            Allows to change enum type field or property display mode in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.EnumDisplayAttribute.FormatMode">
            <summary>
            Enumeration items names formatting modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.FormatMode.Default">
            <summary>
            The default formatting. Performs standard name processing to create more human-readable label for User Interface.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.FormatMode.None">
            <summary>
            The none formatting. The enum items names won't be modified.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.Mode">
            <summary>
            The formatting mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnumDisplayAttribute.#ctor(FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EnumDisplayAttribute"/> class.
            </summary>
            <param name="mode">The formatting mode.</param>
        </member>
        <member name="T:FlaxEngine.ExpandGroupsAttribute">
            <summary>
            Marks the item to be visible in editor by expanding all the container groups in the upper hierarchy.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.HeaderAttribute">
            <summary>
            Inserts a header control with a custom text into the editor layout.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.HeaderAttribute.Text">
            <summary>
            The header text.
            </summary>
        </member>
        <member name="M:FlaxEngine.HeaderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HeaderAttribute"/> class.
            </summary>
            <param name="text">The header text.</param>
        </member>
        <member name="T:FlaxEngine.LimitAttribute">
            <summary>
            Used to make a float or int variable in a script be restricted to a specific range.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.LimitAttribute.Min">
            <summary>
            The minimum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAttribute.Max">
            <summary>
            The maximum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAttribute.SliderSpeed">
            <summary>
            The slider speed used to edit value.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LimitAttribute"/> class.
            </summary>
            <param name="min">The minimum limit value.</param>
            <param name="max">The maximum limit value.</param>
            <param name="sliderSpeed">The slider speed.</param>
        </member>
        <member name="T:FlaxEngine.MultilineTextAttribute">
            <summary>
            Instructs UI editor to use multiline textbox for editing <see cref="T:System.String"/> property or field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.RangeAttribute">
            <summary>
            Used to make a float or int variable in a script be restricted to a specific range.
            When used, the float or int will be shown as a slider in the editor instead of default number field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.RangeAttribute.Min">
            <summary>
            The minimum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.RangeAttribute.Max">
            <summary>
            The maximum range value.
            </summary>
        </member>
        <member name="M:FlaxEngine.RangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RangeAttribute"/> class.
            </summary>
            <param name="min">The minimum range value.</param>
            <param name="max">The maximum range value.</param>
        </member>
        <member name="T:FlaxEngine.ReadOnlyAttribute">
            <summary>
            Makes a variable show up in the editor as read-only (editing is disabled).
            </summary>
        </member>
        <member name="T:FlaxEngine.ShowInEditorAttribute">
            <summary>
            Makes a variable show up in the editor.
            </summary>
            <remarks>
            If used on a private field/property you may also need to add <see cref="T:FlaxEngine.SerializeAttribute"/> to ensure that modified value is being serialized.
            </remarks>
        </member>
        <member name="T:FlaxEngine.SpaceAttribute">
            <summary>
            Inserts an empty space between controls in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.SpaceAttribute.Height">
            <summary>
            The spacing in pixel (vertically).
            </summary>
        </member>
        <member name="M:FlaxEngine.SpaceAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpaceAttribute"/> class.
            </summary>
            <param name="height">The spacing.</param>
        </member>
        <member name="T:FlaxEngine.VisibleIfAttribute">
            <summary>
            Shows property/field in the editor only if the specified member has a given value. Can be used to hide properties based on other properties (also private properties). The given member has to be bool type.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.VisibleIfAttribute.MemberName">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="M:FlaxEngine.VisibleIfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HeaderAttribute"/> class.
            </summary>
            <param name="memberName">The name of the field or property of the object. Must be a bool type.</param>
        </member>
        <member name="T:FlaxEngine.MemberCollectionAttribute">
            <summary>
            This attributes provides additional information on a member collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.MemberCollectionAttribute.ReadOnly">
            <summary>
            Gets or sets whether this collection is read-only. If <c>true</c>, applications using this collection
            should not allow to add or remove items.
            </summary>
        </member>
        <member name="P:FlaxEngine.MemberCollectionAttribute.CanReorderItems">
            <summary>
            Gets or sets whether the items of this collection can be reordered. If <c>true</c>, applications using
            this collection should provide users a way to reorder items.
            </summary>
        </member>
        <member name="P:FlaxEngine.MemberCollectionAttribute.NotNullItems">
            <summary>
            Gets or sets whether the items of this collection can be null. If <c>true</c>, applications using
            this collection should prevent user to add null items to the collection.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mono.MonoPInvokeCallbackAttribute">
            <summary>
            Attribute necessary for AOT ports of Mono to mark methods that can be invoked by the native runtime.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.NoSerializeAttribute">
            <summary>
            Indicates that a field or a property of a serializable class should not be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.PersisitentDataAttribute">
            <summary>
                This attributes provides simple way of mapping data from fields and properties to persistant data structure.
            </summary>
            <remarks>
                Multiple ways of saving values are possible using this method.
                - Manual flush <see cref="M:FlaxEngine.BasePersistentData.Flush" />
                - Time based flush <see cref="T:FlaxEngine.PersistentDataConfig" />
                - Incrementation manual counter <see cref="T:FlaxEngine.PersistentDataConfig" /> <see cref="!:BasePersistentData.Call()" />
            </remarks>
        </member>
        <member name="P:FlaxEngine.PersisitentDataAttribute.Key">
            <summary>
                Override value for mapped "key" value
            </summary>
        </member>
        <member name="P:FlaxEngine.PersisitentDataAttribute.File">
            <summary>
                Custom file name used to store this key-value pair
            </summary>
        </member>
        <member name="P:FlaxEngine.PersisitentDataAttribute.ConfigName">
            <summary>
                Custom config name mapped to the File name for this key-value pair
            </summary>
        </member>
        <member name="M:FlaxEngine.PersisitentDataAttribute.#ctor">
            <summary>
                Maps marked field to the global persistant data file using default Field/Property name format
            </summary>
        </member>
        <member name="M:FlaxEngine.PersisitentDataAttribute.#ctor(System.String)">
            <summary>
                Maps marked field to the global persistant data file with custom key format
            </summary>
            <param name="key">Override value for mapped "key" value</param>
        </member>
        <member name="M:FlaxEngine.PersisitentDataAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Maps marked field to the specified persistant data file with custom key format
            </summary>
            <param name="key">Override value for mapped "key" value</param>
            <param name="file">Custom file name used to store this key-value pair</param>
            <param name="isConfigName">If true, file name is instead configName</param>
        </member>
        <member name="T:FlaxEngine.SerializeAttribute">
            <summary>
            Indicates that a field or a property of a serializable class should be be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.TooltipAttribute">
            <summary>
            Specifies a tooltip for a property/field in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.TooltipAttribute.Text">
            <summary>
            The tooltip text.
            </summary>
        </member>
        <member name="M:FlaxEngine.TooltipAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TooltipAttribute"/> class.
            </summary>
            <param name="text">The tooltip text.</param>
        </member>
        <member name="T:FlaxEngine.PersistentDataConfig">
            <summary>
            Configuration for persistant data
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.ReadOnly">
            <summary>
            Logs an error if tried to write to ReadOnly file
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.CypherOptions">
            <summary>
            Defines encrypting and decrypting options
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.StoreAsOneFile">
            <summary>
            Defines if multiple settings should be stored inside one global file
            </summary>
            <remarks>
            Requires <see cref="T:FlaxEngine.PersistentDataConfig"/> with below provided file name, or first used <see cref="T:FlaxEngine.PersistentDataConfig"/> will be used
            </remarks>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.DownloadFromNetworkResource">
            <summary>
            Defines if when loading data should be downloaded from provided address
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.FlushOptions">
            <summary>
            Defines automatic flush options
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.CompressionOptions">
            <summary>
            Defines commpressions options
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.ValidateWithChecksum">
            <summary>
            Defines if persistatnt data file should have checksum
            </summary>
        </member>
        <member name="T:FlaxEngine.PersistentDataConfig.FlushSettings">
            <summary>
            Configuration options for automatic or manual flush
            </summary>
        </member>
        <member name="P:FlaxEngine.PersistentDataConfig.FlushSettings.IsManualFlush">
            <summary>
            Overrides all other flush options if true. Do not perform any automatic flushing
            </summary>
        </member>
        <member name="T:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum">
            <summary>
            Enum defining preload data mode
            </summary>
        </member>
        <member name="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.Never">
            <summary>
            PersistentData will not be loaded automaticaly
            <para>Load has to be performed manually, or data will be set to default until overwritten</para>
            </summary>
        </member>
        <member name="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.BeforeSceneLoad">
            <summary>
            PersistentData will be loaded automaticaly before scene loading is performed
            </summary>
            <remarks>
            Most useful when scene requires some data from file. Same effect will be achieved when used <see cref="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.OnFirstUse"/>
            </remarks>
        </member>
        <member name="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.BeforeSceneLoadAsynchronus">
            <summary>
            PersistentData will be loaded automaticaly before scene loading is performed. 
            </summary>
            <remarks>Most of the scene initialization is performed, but object creation is waiting for data to be loaded</remarks>
            <seealso cref="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.BeforeSceneLoad"/>
        </member>
        <member name="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.BeforeObjectInitialization">
            <summary>
            PersistentData will be loaded after scene is loaded and all objects on the scene are created and before Awake is executed
            <para>
            Most useful when object are initialized with persistant data but we want to include settings on first loading screen.
            </para>
            <para>
            Same effect will be achieved when used <see cref="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.OnFirstUse"/>
            </para>
            </summary>
        </member>
        <member name="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.BeforeObjectInitializationAsynchronus">
            <summary>
            PersistentData will be loaded after scene is loaded and all objects on the scene are created and before Awake is executed
            </summary>
            <remarks>Most useful when object are initialized with persistant data but we want to include settings on first loading screen.</remarks>
            <seealso cref="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.BeforeObjectInitialization"/>
        </member>
        <member name="F:FlaxEngine.PersistentDataConfig.PreloadSettingsEnum.OnFirstUse">
            <summary>
            Persistent data is loaded before first Get or Save is used
            </summary>
        </member>
        <member name="T:FlaxEngine.CompressionSettings">
            <summary>
            Configuration for compression
            </summary>
        </member>
        <member name="P:FlaxEngine.CompressionSettings.UsePlainText">
            <summary>
            Use plain text, do not compress files
            </summary>
        </member>
        <member name="T:FlaxEngine.CypherSettings">
            <summary>
            Configuration for cypher
            </summary>
        </member>
        <member name="P:FlaxEngine.CypherSettings.UsePlainText">
            <summary>
            Do not use cypher, and leave plain text
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraphParameterType">
            <summary>
            Animation graph parameters types.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Bool">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Integer">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Float">
            <summary>
            The floating point value (single precision).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Vector2">
            <summary>
            The Vector2 structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Vector3">
            <summary>
            The Vector3 structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Vector4">
            <summary>
            The Vector4 structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Color">
            <summary>
            The Color structure (RGBA, normalized, 32bit per channel).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Rotation">
            <summary>
            The quaternion structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Transform">
            <summary>
            The transform structure (translation, rotation and scale).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraphParameterType.Asset">
            <summary>
            The asset reference.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraphParameter">
            <summary>
            Animation graph variable object. Allows to modify graph parameter at runtime.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraphParameter.Type">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraphParameter.IsPublic">
            <summary>
            Gets a value indicating whether this parameter is public.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraphParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraphParameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioDevice">
            <summary>
            Represents a single audio device.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioDevice.Name">
            <summary>
            Gets the device name.
            </summary>
        </member>
        <member name="T:FlaxEngine.BrushSurface">
            <summary>
            Represents a part of the CSG brush actor. Contains information about single surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.ParentActor">
            <summary>
            Gets the parent brush actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.Material">
            <summary>
            Gets or sets the material used to render the brush surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.ScaleInLightmap">
            <summary>
            Gets or sets the scale in lightmap (per surface).
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.TexCoordScale">
            <summary>
            Gets or sets the surface texture coordinates scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.TexCoordOffset">
            <summary>
            Gets or sets the surface texture coordinates offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.TexCoordRotation">
            <summary>
            Gets or sets the surface texture coordinates rotation angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.BrushSurface.Index">
            <summary>
            Gets the brush surface index.
            </summary>
        </member>
        <member name="M:FlaxEngine.BrushSurface.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the brush surface and a ray.
            If collision data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.BrushSurface.Intersects(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the brush surface and a ray.
            If collision data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.BrushSurface.GetVertices">
            <summary>
            Gets the brush surface triangles array (group by 3 vertices).
            </summary>
            <returns>The vertices buffer with triangles or empty if no data loaded.</returns>
        </member>
        <member name="T:FlaxEngine.Collision">
            <summary>
            Contains a collision information passed to the OnCollisionEnter and OnCollisionExit events.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.Impulse">
            <summary>
            The total impulse applied to this contact pair to resolve the collision.
            </summary>
            <remarks>
            The total impulse is obtained by summing up impulses applied at all contact points in this collision pair.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collision.ThisVelocity">
            <summary>
            The linear velocity of the first colliding object (this instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherVelocity">
            <summary>
            The linear velocity of the second colliding object (other instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.RelativeVelocity">
            <summary>
            The relative linear velocity of the two colliding objects.
            </summary>
            <remarks>
            Can be used to detect stronger collisions.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collision.ThisCollider">
            <summary>
            The first collider (this instance). It may be null if this actor is not the <see cref="T:FlaxEngine.Collider"/> (eg. <see cref="T:FlaxEngine.Terrain"/>).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherCollider">
            <summary>
            The second collider (other instance). It may be null if this actor is not the <see cref="T:FlaxEngine.Collider"/> (eg. <see cref="T:FlaxEngine.Terrain"/>).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.ThisActor">
            <summary>
            The first collider (this instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherActor">
            <summary>
            The second collider (other instance).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.Contacts">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collision.GetEnumerator">
            <summary>
            Gets the contact points enumerator
            </summary>
            <returns>The contact points enumerator.</returns>
        </member>
        <member name="T:FlaxEngine.ContactPoint">
            <summary>
            Contains a contact point data for the collision location.
            </summary>
        </member>
        <member name="P:FlaxEngine.ContactPoint.Point">
            <summary>
            Gets the contact point location in the world space.
            </summary>
        </member>
        <member name="P:FlaxEngine.ContactPoint.Separation">
            <summary>
            Gets the separation value (negative implies penetration).
            </summary>
        </member>
        <member name="P:FlaxEngine.ContactPoint.Normal">
            <summary>
            Gets the contact normal.
            </summary>
        </member>
        <member name="T:FlaxEngine.Curve`1">
            <summary>
            An animation spline represented by a set of keyframes, each representing an endpoint of a Bezier curve. 
            </summary>
            <typeparam name="T">The animated value type.</typeparam>
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(System.Int32@,System.Int32@,System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(System.Int32@,System.Int32@,System.Single,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(System.Double@,System.Double@,System.Single,System.Double@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(System.Double@,System.Double@,System.Single,System.Double@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(System.Single@,System.Single@,System.Single,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(System.Single@,System.Single@,System.Single,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.GetTangent(FlaxEngine.Color@,FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.KeyframeAccess.Interpolate(FlaxEngine.Color@,FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Curve`1.Keyframe">
            <summary>
            A single keyframe that can be injected into Bezier curve.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.Time">
            <summary>
            The time of the keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.Value">
            <summary>
            The value of the curve at keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.TangentIn">
            <summary>
            The input tangent (going from the previous key to this one) of the key.
            </summary>
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframe.TangentOut">
            <summary>
            The output tangent (going from this key to next one) of the key.
            </summary>
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.#ctor(System.Single,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.#ctor(System.Single,`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
            <param name="tangentIn">The start tangent.</param>
            <param name="tangentOut">The end tangent.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Curve`1.Keyframe.CompareTo(FlaxEngine.Curve{`0}.Keyframe)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.Curve`1.Keyframes">
            <summary>
            The keyframes collection. Can be directly modified but ensure to sort it after editing so keyframes are organized by ascending time value.
            </summary>
        </member>
        <member name="M:FlaxEngine.Curve`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Curve`1.#ctor(FlaxEngine.Curve{`0}.Keyframe[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.#ctor(System.Collections.Generic.IEnumerable{FlaxEngine.Curve{`0}.Keyframe})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Curve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Evaluate(`0@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve value at the specified time.
            </summary>
            <param name="result">The interpolated value from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.EvaluateKey(FlaxEngine.Curve{`0}.Keyframe@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve key at the specified time.
            </summary>
            <param name="result">The interpolated key from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.Trim(System.Single,System.Single)">
            <summary>
            Trims the curve keyframes to the specified time range.
            </summary>
            <param name="start">The time start.</param>
            <param name="end">The time end.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.TransformTime(System.Single,System.Single)">
            <summary>
            Applies the linear transformation (scale and offset) to the keyframes time values.
            </summary>
            <param name="timeScale">The time scale.</param>
            <param name="timeOffset">The time offset.</param>
        </member>
        <member name="M:FlaxEngine.Curve`1.FindKeys(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Returns a pair of keys that can be used for interpolating to field the value at the provided time.
            </summary>
            <param name="time">The time for which to find the relevant keys from. It is expected to be clamped to a valid range within the curve.</param>
            <param name="leftKey">The index of the key to interpolate from.</param>
            <param name="rightKey">The index of the key to interpolate to.</param>
        </member>
        <member name="T:FlaxEngine.FontReference">
            <summary>
            Font reference that defines the font asset and font size to use.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor(FlaxEngine.FontAsset,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
            <param name="font">The font.</param>
            <param name="size">The font size.</param>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor(FlaxEngine.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="P:FlaxEngine.FontReference.Font">
            <summary>
            The font asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontReference.Size">
            <summary>
            The size of the font characters.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.GetFont">
            <summary>
            Gets the font object described by the structure.
            </summary>
            <returns>Th font or null if descriptor is invalid.</returns>
        </member>
        <member name="T:FlaxEngine.Gamepad">
            <summary>
            Represents a single hardware gamepad device. Used by the Input to report raw gamepad input events.
            </summary>
        </member>
        <member name="T:FlaxEngine.Gamepad.ButtonTypes">
            <summary>
            Gamepad button codes.
            </summary>
        </member>
        <member name="T:FlaxEngine.Gamepad.AxisTypes">
            <summary>
            Gamepad axis codes.
            </summary>
        </member>
        <member name="T:FlaxEngine.Gamepad.State">
            <summary>
            The universal gamepad state description. All hardware gamepad device handlers should map input to match this structure.
            Later on, each gamepad may use individual layout for a game.
            </summary>
        </member>
        <member name="F:FlaxEngine.Gamepad.State.Buttons">
            <summary>
            The buttons state (pressed if true).
            </summary>
        </member>
        <member name="F:FlaxEngine.Gamepad.State.Axis">
            <summary>
            The axis state (normalized value).
            </summary>
        </member>
        <member name="P:FlaxEngine.Gamepad.ProductID">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Gamepad.Name">
            <summary>
            Gets the device name (provided by the OS).
            </summary>
        </member>
        <member name="M:FlaxEngine.Gamepad.SetVibration(FlaxEngine.GamepadVibrationState)">
            <summary>
            Sets the gamepad vibration.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetState(FlaxEngine.Gamepad.State@)">
            <summary>
            Gets the raw device state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetAxis(FlaxEngine.GamePadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButton(FlaxEngine.GamePadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButtonDown(FlaxEngine.GamePadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButtonUp(FlaxEngine.GamePadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.SetLayout(FlaxEngine.GamepadLayout)">
            <summary>
            Sets the gamepad buttons/axis layout. Use <see cref="M:FlaxEngine.GamepadLayout.CreateMapping"/> to generate proper layout and override the default logic.
            </summary>
            <param name="layout">The layout.</param>
        </member>
        <member name="T:FlaxEngine.GamepadLayout">
            <summary>
            Gamepad buttons and axis mapping description.
            Allows converting input from the different gamepads into a universal format (see <see cref="T:FlaxEngine.Gamepad.ButtonTypes"/> and <see cref="T:FlaxEngine.Gamepad.AxisTypes"/>).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadLayout.Buttons">
            <summary>
            The buttons mapping. Index by gamepad button id from 0 to 31 (see <see cref="T:FlaxEngine.Gamepad.ButtonTypes"/>).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadLayout.Axis">
            <summary>
            The axis mapping. Index by gamepad axis id from 0 to 5 (see <see cref="T:FlaxEngine.Gamepad.AxisTypes"/>).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadLayout.AxisMap">
            <summary>
            The axis ranges mapping (X is scale, Y is offset. Eg. mappedVal = X * value + Y). It allows to invert any axis or map axis range.
            </summary>
        </member>
        <member name="M:FlaxEngine.GamepadLayout.InvertAxis(FlaxEngine.Gamepad.AxisTypes)">
            <summary>
            Inverts the axis.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:FlaxEngine.GamepadLayout.CreateMapping">
            <summary>
            Creates the default gamepad layout from the input buttons/axis mapping.
            </summary>
            <returns>The gamepad layout</returns>
        </member>
        <member name="M:FlaxEngine.GamepadLayout.CreateMapping(System.Collections.Generic.Dictionary{FlaxEngine.Gamepad.ButtonTypes,FlaxEngine.GamePadButton},System.Collections.Generic.Dictionary{FlaxEngine.Gamepad.AxisTypes,FlaxEngine.GamePadAxis})">
            <summary>
            Creates the gamepad layout from the input buttons/axis mapping.
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="axis">The axis.</param>
            <returns>The gamepad layout</returns>
        </member>
        <member name="T:FlaxEngine.GamepadVibrationState">
            <summary>
            General identifiers for potential force feedback channels. These will be mapped according to the platform specific implementation.
            </summary>
            <remarks>
            For example, the PS4 only listens to the `large` channels and ignores the rest, while the Xbox One could
            map the `large` to the handle motors and `small` to the trigger motors. And iOS can map `LeftSmall` to
            its single motor.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.LeftLarge">
            <summary>
            The left large motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.LeftSmall">
            <summary>
            The left small motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.RightLarge">
            <summary>
            The right large motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.RightSmall">
            <summary>
            The right small motor vibration.
            </summary>
        </member>
        <member name="M:FlaxEngine.GamepadVibrationState.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GamepadVibrationState"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:FlaxEngine.GamepadVibrationState.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GamepadVibrationState"/> struct.
            </summary>
            <param name="leftLarge">The left large.</param>
            <param name="leftSmall">The left small.</param>
            <param name="rightLarge">The right large.</param>
            <param name="rightSmall">The right small.</param>
        </member>
        <member name="T:FlaxEngine.HideFlags">
            <summary>
            Object hide state description flags. Control object appearance.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.None">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.HideInHierarchy">
            <summary>
            The object will not be visible in the hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.DontSave">
            <summary>
            The object will not be saved.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.DontSelect">
            <summary>
            The object will not selectable in the editor viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.FullyHidden">
            <summary>
            The fully hidden object flags mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputAxis">
            <summary>
            Virtual input axis binding. Helps with listening for a selected axis input.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxis.Name">
            <summary>
            The name of the axis to use. See <see cref="P:FlaxEngine.Input.AxisMappings"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputAxis.Value">
            <summary>
            Gets the current axis value.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputAxis.ValueRaw">
            <summary>
            Gets the current axis raw value.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputAxis"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputAxis.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputAxis"/> class.
            </summary>
            <param name="name">The axis name.</param>
        </member>
        <member name="T:FlaxEngine.InputEvent">
            <summary>
            Virtual input action binding. Helps with listening for a selected input event.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputEvent.Name">
            <summary>
            The name of the action to use. See <see cref="P:FlaxEngine.Input.ActionMappings"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputEvent.Active">
            <summary>
            Returns true if the event has been triggered during the current frame (e.g. user pressed a key). Use <see cref="E:FlaxEngine.InputEvent.Triggered"/> to catch events without active waiting.
            </summary>
        </member>
        <member name="E:FlaxEngine.InputEvent.Triggered">
            <summary>
            Occurs when event is triggered (e.g. user pressed a key). Called before scripts update.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
            <param name="name">The action name.</param>
        </member>
        <member name="M:FlaxEngine.InputEvent.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.Dispose">
            <summary>
            Releases this object.
            </summary>
        </member>
        <member name="T:FlaxEngine.ISceneObject">
            <summary>
            Interface for scene objects that unifies various properties used across actors and scripts.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.Scene">
            <summary>
            Gets the scene object which contains this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.HasPrefabLink">
            <summary>
            Gets a value indicating whether this object has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.PrefabID">
            <summary>
            Gets the prefab asset ID. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="P:FlaxEngine.ISceneObject.PrefabObjectID">
            <summary>
            Gets the ID of the object within a object that is used for synchronization with this object. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="M:FlaxEngine.ISceneObject.BreakPrefabLink">
            <summary>
            Breaks the prefab linkage for this object (including all children).
            </summary>
        </member>
        <member name="T:FlaxEngine.ITransformable">
            <summary>
            Interface for objects that can be transformed.
            </summary>
        </member>
        <member name="P:FlaxEngine.ITransformable.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="T:FlaxEngine.LimitLinearRange">
            <summary>
            Represents a joint limit between two distance values. Lower value must be less than the upper value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Lower">
            <summary>
            The lower distance of the limit. Must be less than upper.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Upper">
            <summary>
            The upper distance of the limit. Must be more than lower.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitLinearRange"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitLinearRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="lower">The lower distance of the limit. Must be less than upper.</param>
            <param name="upper">The upper distance of the limit. Must be more than lower.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitLinearRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="lower">The lower distance of the limit. Must be less than upper.</param>
            <param name="upper">The upper distance of the limit. Must be more than lower.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitLinear">
            <summary>
            Represents a joint limit between zero a single distance value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Extent">
            <summary>
            The distance at which the limit becomes active.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitLinear"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitLinear.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="extent">The distance at which the limit becomes active.</param>
            <param name="contactDist">The distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitLinear.#ctor(System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="extent">The distance at which the limit becomes active.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitAngularRange">
            <summary>
            Represents a joint limit between two angles.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Lower">
            <summary>
            Lower angle of the limit (in degrees). Must be less than upper.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Upper">
            <summary>
            Upper angle of the limit (in degrees). Must be less than lower.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitAngularRange"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitAngularRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="lower">The lower angle of the limit (in degrees). Must be less than upper.</param>
            <param name="upper">The upper angle of the limit (in degrees). Must be more than lower.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitAngularRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="lower">The lower angle of the limit. Must be less than upper.</param>
            <param name="upper">The upper angle of the limit. Must be more than lower.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitConeRange">
            <summary>
            Represents a joint limit that constraints movement to within an elliptical cone.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.YLimitAngle">
            <summary>
            The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.ZLimitAngle">
            <summary>
            The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitConeRange"/> structure with a 45 degree cone limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitConeRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="yLimitAngle">The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.</param>
            <param name="zLimitAngle">The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitConeRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="yLimitAngle">The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.</param>
            <param name="zLimitAngle">The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.MaterialSlot">
            <summary>
            Single material slot describes how to render meshes using it.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.SlotIndex">
            <summary>
            Gets the index of the slot (in the parent model).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.Material">
            <summary>
            Gets or sets the material.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.ShadowsMode">
            <summary>
            Gets or sets the shadows casting mode by the meshes using this slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.Name">
            <summary>
            Gets or sets the slot name. It doesn't have to be unique.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh">
            <summary>
            Represents part of the model that is made of vertices which can be rendered (can have own transformation and material).
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex0">
            <summary>
            The Vertex Buffer 0 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex0.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex1">
            <summary>
            The Vertex Buffer 1 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.TexCoord">
            <summary>
            The texture coordinates (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.Normal">
            <summary>
            The normal vector (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.Tangent">
            <summary>
            The tangent vector (packed). Bitangent sign in component A.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.LightmapUVs">
            <summary>
            The lightmap UVs (packed).
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex2">
            <summary>
            The Vertex Buffer 2 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex2.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex">
            <summary>
            The raw Vertex Buffer structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.TexCoord">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Normal">
            <summary>
            The normal vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Tangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Bitangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.LightmapUVs">
            <summary>
            The lightmap UVs.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.ParentModel">
            <summary>
            Gets the parent model asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.ParentLOD">
            <summary>
            Gets the parent level of detail object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.MeshIndex">
            <summary>
            Gets the index of the mesh (in the parent level of detail).
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.MaterialSlotIndex">
            <summary>
            Gets the index of the material slot to use during this mesh rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.MaterialSlot">
            <summary>
            Gets the material slot used by this mesh during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.HasVertexColors">
            <summary>
            Gets a value indicating whether this mesh has vertex colors (stored in a vertex buffer 2).
            </summary>
            <remarks>Valid only if model and mesh are loaded.</remarks>
        </member>
        <member name="P:FlaxEngine.Mesh.HasLightmapUVs">
            <summary>
            Gets a value indicating whether this mesh has lightmap UVs (generated on import of imported from the source asset).
            </summary>
            <remarks>Valid only if model and mesh are loaded.</remarks>
        </member>
        <member name="P:FlaxEngine.Mesh.IndexBufferFormat">
            <summary>
            Gets a format of the mesh index buffer.
            </summary>
            <remarks>Valid only if model and mesh are loaded.</remarks>
        </member>
        <member name="P:FlaxEngine.Mesh.Triangles">
            <summary>
            Gets the triangle count.
            </summary>
            <remarks>Valid only if model and mesh are loaded.</remarks>
        </member>
        <member name="P:FlaxEngine.Mesh.Vertices">
            <summary>
            Gets the vertex count.
            </summary>
            <remarks>Valid only if model and mesh are loaded.</remarks>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt16[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Int32[])">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.UInt16[])">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer0(System.Boolean)">
            <summary>
            Downloads the first vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer1(System.Boolean)">
            <summary>
            Downloads the second vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer2(System.Boolean)">
            <summary>
            Downloads the third vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <remarks>
            If mesh has no vertex colors (stored in vertex buffer 2) the the returned value is null.
            </remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data or null if mesh has no vertex colors.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer(System.Boolean)">
            <summary>
            Downloads the raw vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadIndexBuffer(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.Mesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.Rendering.PixelFormat.R16_UInt"/> then it's faster to call .</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadIndexBufferUShort(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.Mesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.Rendering.PixelFormat.R32_UInt"/> then data won't be downloaded.</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="T:FlaxEngine.ModelEntryInfo">
            <summary>
            Represents a part of the model actor entries collection. Contains information about how to render <see cref="T:FlaxEngine.Mesh"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.Transform">
            <summary>
            Gets or sets the mesh local transform.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.Material">
            <summary>
            Gets or sets the material used to render the mesh.
            If value if null then model asset mesh default material will be used as a fallback.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.ScaleInLightmap">
            <summary>
            Gets or sets the scale in lightmap (per mesh).
            Final mesh scale in lightmap is also multiplied by <see cref="P:FlaxEngine.StaticModel.ScaleInLightmap"/> and global scene scale parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.ModelEntryInfo"/> is visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.ReceiveDecals">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.ModelEntryInfo"/> can receive decals.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.ShadowsMode">
            <summary>
            Gets or sets the shadows casting mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelEntryInfo.Index">
            <summary>
            Gets the mesh entry index.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelEntryInfo.CreateAndSetVirtualMaterialInstance">
            <summary>
            Utility to crate a new virtual Material Instance asset, set its parent to the currently applied material, and assign it to the entry. Can be used to modify the material parameters from code.
            </summary>
            <returns>The created virtual material instance.</returns>
        </member>
        <member name="M:FlaxEngine.ModelEntryInfo.Intersects(FlaxEngine.Ray,System.Single@)">
            <summary>
            Determines if there is an intersection between the model actor mesh entry and a ray.
            If mesh data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection.</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.ModelEntryInfo.Intersects(FlaxEngine.Ray,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the model actor mesh entry and a ray.
            If mesh data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ModelLOD">
            <summary>
            Represents single Level Of Detail for the Model.
            Contains collection of meshes.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.ParentModel">
            <summary>
            Gets the parent model asset.
            </summary>
            <value>
            The parent model.
            </value>
        </member>
        <member name="F:FlaxEngine.ModelLOD.Meshes">
            <summary>
            The meshes array.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.ScreenSize">
            <summary>
            Gets or sets the minimum model screen size to switch LODs. Bottom limit of the model screen size to render this LOD.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.Bounds">
            <summary>
            Gets the bounding box combined for all meshes in this model LOD.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicalMaterial">
            <summary>
            Physical materials are used to define the response of a physical object when interacting dynamically with the world.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Friction">
            <summary>
            The friction value of surface, controls how easily things can slide on this surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.FrictionCombineMode">
            <summary>
            The friction combine mode, controls how friction is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.OverrideFrictionCombineMode">
            <summary>
            If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the Physics settings. 
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Restitution">
            <summary>
            The restitution or 'bounciness' of this surface, between 0 (no bounce) and 1 (outgoing velocity is same as incoming).
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.RestitutionCombineMode">
            <summary>
            The restitution combine mode, controls how restitution is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.OverrideRestitutionCombineMode">
            <summary>
            If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the Physics settings.
            </summary>
        </member>
        <member name="T:FlaxEngine.RayCastHit">
            <summary>
            Raycast hit result data.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Collider">
            <summary>
            The collider that was hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Normal">
            <summary>
            The normal of the surface the ray hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Distance">
            <summary>
            The distance from the ray's origin to the hit location.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Point">
            <summary>
            The point in the world space where ray hit the collider.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.UV">
            <summary>
            The barycentric coordinates of hit point, for triangle mesh and height field.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneReference">
            <summary>
            Represents the reference to the scene asset. Stores the unique ID of the scene to reference. Can be used to load the selected scene.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneReference.ID">
            <summary>
            The identifier of the scene asset (and the scene object).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneReference.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneReference"/> class.
            </summary>
            <param name="id">The identifier of the scene asset.</param>
        </member>
        <member name="T:FlaxEngine.SkeletonBone">
            <summary>
            Defines the single skeleton hierarchy bone including its default bind pose, name and parent node index.
            </summary>
            <remarks>
            Skeleton bones are subset of the skeleton nodes collection that are actually used by the skinned model meshes.
            </remarks>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.ParentIndex">
            <summary>
            The parent bone index. The root node uses value -1.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.NodeIndex">
            <summary>
            The index of the skeleton node where bone is 'attached'. Used as a animation transformation source.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.LocalTransform">
            <summary>
            The local transformation of the bone, relative to the parent bone (in bind pose).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.OffsetMatrix">
            <summary>
            The matrix that transforms from mesh space to bone space in bind pose (inverse bind pose).
            </summary>
        </member>
        <member name="T:FlaxEngine.SkeletonNode">
            <summary>
            Describes a single skeleton node data. Used by the runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.ParentIndex">
            <summary>
            The parent node index. The root node uses value -1.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.LocalTransform">
            <summary>
            The local transformation of the node, relative to the parent node.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh">
            <summary>
            Represents part of the skinned model that is made of vertices which can be rendered.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh.Vertex0">
            <summary>
            The Vertex Buffer 0 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.TexCoord">
            <summary>
            The texture coordinates (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Normal">
            <summary>
            The normal vector (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Tangent">
            <summary>
            The tangent vector (packed). Bitangent sign in component A.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.BlendIndices">
            <summary>
            The blend indices (packed). Up to 4 bones.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.BlendWeights">
            <summary>
            The blend weights (normalized, packed). Up to 4 bones.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh.Vertex">
            <summary>
            The raw Vertex Buffer structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.TexCoord">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Normal">
            <summary>
            The normal vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Tangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Bitangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.BlendIndices">
            <summary>
            The blend indices. Up to 4 bones.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.BlendWeights">
            <summary>
            The blend weights (normalized). Up to 4 bones.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.ParentSkinnedModel">
            <summary>
            Gets the parent skinned model asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.MeshIndex">
            <summary>
            Gets the index of the mesh.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.MaterialSlotIndex">
            <summary>
            Gets the index of the material slot to use during this mesh rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.MaterialSlot">
            <summary>
            Gets the material slot used by this mesh during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.IndexBufferFormat">
            <summary>
            Gets a format of the mesh index buffer.
            </summary>
            <remarks>Valid only if model and mesh are loaded.</remarks>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.Triangles">
            <summary>
            Gets the triangle count.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.Vertices">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt16[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadVertexBuffer0(System.Boolean)">
            <summary>
            Downloads the first vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadVertexBuffer(System.Boolean)">
            <summary>
            Downloads the raw vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadIndexBuffer(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.SkinnedMesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.Rendering.PixelFormat.R16_UInt"/> then it's faster to call .</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadIndexBufferUShort(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Application.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.SkinnedMesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.Rendering.PixelFormat.R32_UInt"/> then data won't be downloaded.</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="T:FlaxEngine.SpringParameters">
            <summary>
            Controls spring parameters for a physics joint limits. If a limit is soft (body bounces back due to restitution when 
            the limit is reached) the spring will pull the body back towards the limit using the specified parameters.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Stiffness">
            <summary>
            The spring strength. Force proportional to the position error.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Damping">
            <summary>
            Damping strength. Force proportional to the velocity error.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Default">
            <summary>
            The default <see cref="T:FlaxEngine.SpringParameters"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpringParameters.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a spring.
            </summary>
            <param name="stiffness">Spring strength. Force proportional to the position error.</param>
            <param name="damping">Damping strength. Force proportional to the velocity error.</param>
        </member>
        <member name="T:FlaxEngine.AlphaBlendMode">
            <summary>
            Alpha blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Cubic">
            <summary>
            Cubic-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.HermiteCubic">
            <summary>
            Hermite-Cubic.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Sinusoidal">
            <summary>
            Sinusoidal interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuadraticInOut">
            <summary>
            Quadratic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CubicInOut">
            <summary>
            Cubic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuarticInOut">
            <summary>
            Quartic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuinticInOut">
            <summary>
            Quintic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularIn">
            <summary>
            Circular-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularOut">
            <summary>
            Circular-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularInOut">
            <summary>
            Circular in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpIn">
            <summary>
            Exponential-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpOut">
            <summary>
            Exponential-Out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpInOut">
            <summary>
            Exponential in-out interpolation.
            </summary>
        </member>
        <member name="T:FlaxEngine.ForceMode">
            <summary>
            Force mode type determines the exact operation that is carried out when applying the force on a rigidbody.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Force">
            <summary>
            Add a continuous force to the rigidbody, using its mass. The parameter has unit of mass * distance / time^2, i.e. a force.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Impulse">
            <summary>
            Add an instant force impulse to the rigidbody, using its mass. The parameter has unit of mass * distance / time.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.VelocityChange">
            <summary>
            Add an instant velocity change to the rigidbody, ignoring its mass. The parameter has unit of distance / time, i.e. the effect is mass independent: a velocity change.	
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Acceleration">
            <summary>
            Add a continuous acceleration to the rigidbody, ignoring its mass. The parameter has unit of distance / time^2, i.e. an acceleration. It gets treated just like a force except the mass is not divided out before integration.
            </summary>
        </member>
        <member name="T:FlaxEngine.Keys">
            <summary>
            Enumeration for key codes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.None">
            <summary>
            The 'none' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Backspace">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Tab">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Clear">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Return">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Shift">
            <summary>
            Any SHIFT key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Control">
            <summary>
            Any CTRL key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alt">
            <summary>
            Any ALT key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Pause">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Capital">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Kana">
            <summary>
            IME Kana mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Hangul">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Junja">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Final">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Hanja">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Kanji">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Escape">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Convert">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Nonconvert">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Accept">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Modechange">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Spacebar">
            <summary>
            SPACEBAR key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.PageUp">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.PageDown">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.End">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Home">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.ArrowLeft">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.ArrowUp">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.ArrowRight">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.ArrowDown">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Select">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Print">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Execute">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.PrintScreen">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Insert">
            <summary>
            INSERT key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Delete">
            <summary>
            DELETE key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Help">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha0">
            <summary>
            The '0' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha1">
            <summary>
            The '1' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha2">
            <summary>
            The '2' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha3">
            <summary>
            The '3' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha4">
            <summary>
            The '4' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha5">
            <summary>
            The '5' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha6">
            <summary>
            The '6' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha7">
            <summary>
            The '7' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha8">
            <summary>
            The '8' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Alpha9">
            <summary>
            The '9' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LeftWindows">
            <summary>
            Left Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.RightWindows">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Applications">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Sleep">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numpad9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.NumpadMultiply">
            <summary>
            Numeric keypad Multiply key '*'
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.NumpadAdd">
            <summary>
            Numeric keypad Add key '+'
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.NumpadSeparator">
            <summary>
            Numeric Separator key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.NumpadSubtract">
            <summary>
            Numeric keypad Subtract key '-'
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.NumpadDecimal">
            <summary>
            Numeric keypad Decimal key ','
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.NumpadDivide">
            <summary>
            Numeric keypad Divide key '/'
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F1">
            <summary>
            F1 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F2">
            <summary>
            F2 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F3">
            <summary>
            F3 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F4">
            <summary>
            F4 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F5">
            <summary>
            F5 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F6">
            <summary>
            F6 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F7">
            <summary>
            F7 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F8">
            <summary>
            F8 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F9">
            <summary>
            F9 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F10">
            <summary>
            F10 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F11">
            <summary>
            F11 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F12">
            <summary>
            F12 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F13">
            <summary>
            F13 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F14">
            <summary>
            F14 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F15">
            <summary>
            F15 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F16">
            <summary>
            F16 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F17">
            <summary>
            F17 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F18">
            <summary>
            F18 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F19">
            <summary>
            F19 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F20">
            <summary>
            F20 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F21">
            <summary>
            F21 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F22">
            <summary>
            F22 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F23">
            <summary>
            F23 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.F24">
            <summary>
            F24 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Numlock">
            <summary>
            Numeric keypad NUM LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Scroll">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LeftMenu">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.RightMenu">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserBack">
            <summary>
            Browser Back key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserForward">
            <summary>
            Browser Forward key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserRefresh">
            <summary>
            Browser Refresh key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserStop">
            <summary>
            Browser Stop key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserSearch">
            <summary>
            Browser Search key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserFavorites">
            <summary>
            Browser Favorites key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BrowserHome">
            <summary>
            Browser Start and Home key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.VolumeMute">
            <summary>
            Volume Mute key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.VolumeDown">
            <summary>
            Volume Down key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.VolumeUp">
            <summary>
            Volume Up key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.MediaNextTrack">
            <summary>
            Next Track key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.MediaPrevTrack">
            <summary>
            Previous Track key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.MediaStop">
            <summary>
            Stop Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.MediaPlayPause">
            <summary>
            Play/Pause Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LaunchMail">
            <summary>
            Start Mail key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LaunchMediaSelect">
            <summary>
            Select Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LaunchApp1">
            <summary>
            Start Application 1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LaunchApp2">
            <summary>
            Start Application 2 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Colon">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the ';:' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Plus">
            <summary>
            For any country/region the '+' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Comma">
            <summary>
            For any country/region the ',' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Minus">
            <summary>
            For any country/region the '-' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Period">
            <summary>
            For any country/region the '.' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Slash">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '/?' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.BackQuote">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '`~' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.LeftBracket">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '[{' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Backslash">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '\\|' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.RightBracket">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the ']}' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Quote">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the
            'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Oem102">
            <summary>
            Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Processkey">
            <summary>
            IME PROCESS key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key
            value used for non-keyboard input methods.
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Attn">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Crsel">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Exsel">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Ereof">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Play">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Zoom">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.Pa1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.Keys.OemClear">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsCombineMode">
            <summary>
            Enumeration that determines the way in which two material properties will be combined to yield a friction or restitution coefficient for a collision.
            </summary>
            <remarks>
            Physics doesn't have any inherent combinations because the coefficients are determined empirically on a case by case basis.
            However, simulating this with a pairwise lookup table is often impractical.
            The effective combine mode for the pair is maximum(material0.combineMode, material1.combineMode).
            </remarks>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Average">
            <summary>
            Uses the average value of the touching materials: (a+b)/2.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Minimum">
            <summary>
            Uses the smaller value of the touching materials: min(a,b).
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Multiply">
            <summary>
            Multiplies the values of the touching materials: a*b.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Maximum">
            <summary>
            Uses the larger value of the touching materials: max(a, b).
            </summary>
        </member>
        <member name="T:FlaxEngine.PlatformType">
            <summary>
            The platform the game is running. Can be accessed via <see cref="P:FlaxEngine.Application.Platform"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Windows">
            <summary>
            Running on Windows (standalone or editor).
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.XboxOne">
            <summary>
            Running on Xbox One.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.WindowsStore">
            <summary>
            Running Windows Store App (Universal Windows Platform).
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Linux">
            <summary>
            Running on Linux system.
            </summary>
        </member>
        <member name="T:FlaxEngine.Quality">
            <summary>
            Quality levels.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Low">
            <summary>
            The low quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Medium">
            <summary>
            The medium quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.High">
            <summary>
            The high quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Ultra">
            <summary>
            The ultra, mega, fantastic quality!
            </summary>
        </member>
        <member name="T:FlaxEngine.RigidbodyConstraints">
            <summary>
            Dynamic rigidbodies movement and rotation locking flags. Provide a mechanism to lock motion along/around a specific axis or set of axes to constrain object motion.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.None">
            <summary>
            No constraints.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionX">
            <summary>
            Freeze motion along the X-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionY">
            <summary>
            Freeze motion along the Y-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionZ">
            <summary>
            Freeze motion along the Z-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationX">
            <summary>
            Freeze rotation along the X-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationY">
            <summary>
            Freeze rotation along the Y-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationZ">
            <summary>
            Freeze rotation along the Z-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPosition">
            <summary>
            Freeze motion along all axes.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotation">
            <summary>
            Freeze rotation along all axes.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockAll">
            <summary>
            Freeze rotation and motion along all axes.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextAlignment">
            <summary>
            Specifies the alignment of the text along horizontal or vertical direction in the layout box
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Near">
            <summary>
            Align text near the edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Center">
            <summary>
            Align text to the center.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Far">
            <summary>
            Align text to the far edge.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextWrapping">
            <summary>
            Specifies text wrapping to be used in a particular multiline paragraph
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.NoWrap">
            <summary>
            No text wrapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.WrapWords">
            <summary>
            Wrap only whole words that overflow.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.WrapChars">
            <summary>
            Wrap single characters that overflow.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextLayoutOptions">
            <summary>
            Structure which describes text layout properties
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.Bounds">
            <summary>
            Layout rectangle
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.HorizontalAlignment">
            <summary>
            Horizontal alignment
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.VerticalAlignment">
            <summary>
            Vertical alignment
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.TextWrapping">
            <summary>
            Text wrapping mode
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.Scale">
            <summary>
            The text scale.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.BaseLinesGapScale">
            <summary>
            Base line gap scale
            </summary>
        </member>
        <member name="P:FlaxEngine.TextLayoutOptions.Default">
            <summary>
            Gets the default layout.
            </summary>
        </member>
        <member name="T:FlaxEngine.CustomEditorAttribute">
            <summary>
            Overrides the default editor provided for the target object/class/field/property. Allows to extend visuals and editing experience of the object.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.CustomEditorAttribute.Type">
            <summary>
            Custom editor class type.
            Note: if attribute is used on CustomEditor class it specifies object type to edit.
            </summary>
        </member>
        <member name="M:FlaxEngine.CustomEditorAttribute.#ctor(System.Type)">
            <summary>
            Overrides default editor provided for the target object.
            </summary>
            <param name="type">The custom editor class type.</param>
        </member>
        <member name="T:FlaxEngine.EditorOrderAttribute">
            <summary>
            Allows to declare order of the item in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:FlaxEngine.EditorOrderAttribute.Order">
            <summary>
            Requested order to perform layout on. Used to order the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.EditorOrderAttribute.#ctor(System.Int32)">
            <summary>
            Override display order in visual tree for provided model.
            </summary>
            <remarks>
            Current order is resolved runtime, and can change if custom editor class has changed.
            </remarks>
            <param name="order">The order order.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1">
            <summary>
                Creates new structure array like, with fast front and back insertion.
                <para>Every overflow of this buffer removes last item form other side of insertion</para>
            </summary>
            <remarks>This collection is NOT thread-safe.</remarks>
            <typeparam name="T">Type of items inserted into buffer</typeparam>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs">
            <summary>
                Arguments for new item added event
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.Index">
            <summary>
                Gets Index of new element in buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.Item">
            <summary>
                Gets added item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs">
            <summary>
                Arguments for item removed event
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.WasFrontItem">
            <summary>
                Gets if item removed was item from front of the buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.Item">
            <summary>
                Gets removed item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs"/> class.
            </summary>
            <param name="wasFrontItem">if set to <c>true</c> [was front item].</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs">
            <summary>
                Arguments for item being replaced because of buffer was overflown with data
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.WasFrontItem">
            <summary>
                Gets if item removed was item from front of the buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.Item">
            <summary>
                Gets overflown item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs"/> class.
            </summary>
            <param name="wasFrontItem">if set to <c>true</c> [was front item].</param>
            <param name="item">The item.</param>
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemRemoved">
            <summary>
                Executes an action when item is removed
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventHandler" />
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemAdded">
            <summary>
                Executes an action when item is added
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventHandler" />
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemOverflown">
            <summary>
                Executes an action when item is removed because of overflow in buffer
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventHandler" />
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Count">
            <summary>
                Amount of items currently in buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Capacity">
            <summary>
                Current capacity of internal buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.IsEmpty">
            <summary>
                Returns true if there are no items in structure, or false if there are
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.IsFull">
            <summary>
                Returns true if buffer is filled with whole of its capacity with items
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
                Creates new instance of object with given capacity, copies given array as a framework
            </summary>
            <param name="buffer">Buffer to insert into</param>
            <param name="frontItem">First index of an item in provided buffer</param>
            <param name="backItem">Last index on an item in provided buffer</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
                Creates new instance of object with given capacity
            </summary>
            <param name="capacity">Capacity of internal structure</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Int32,`0[],System.Int32)">
            <summary>
                Creates new instance of object with given capacity and adds array of items to internal buffer
            </summary>
            <param name="capacity">Capacity of internal structure</param>
            <param name="items">Items to input</param>
            <param name="arrayIndex">Index of items to input at in internal buffer</param>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Item(System.Int32)">
            <summary>
                Gets or sets item from list at given index.
                <remarks>All items are in order of input regardless of overflow that may occur</remarks>
            </summary>
            <param name="index">Index to item required</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PushFront(`0)">
            <summary>
                Adds item to the front of the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PushBack(`0)">
            <summary>
                Adds item to the back of the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Front">
            <summary>
                Gets top first element form collection
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Back">
            <summary>
                Gets bottom first element form collection
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PopFront">
            <summary>
                Removes first item from the front of the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PopBack">
            <summary>
                Removes first item from the back of the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ToArray">
            <summary>
                Copies the buffer contents to an array, according to the logical
                contents of the buffer (i.e. independent of the internal
                order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
                CopyTo copies a collection into an Array, starting at a particular index into the array.
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Clear">
            <summary>
                Clears buffer and remains capacity
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Clear(System.Int32)">
            <summary>
            Clears buffer and changes its capacity.
            </summary>
            <param name="newCapacity">The new capacity of the buffer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.DecreaseBackIndex">
            <summary>
                Decrease index of _backItem and warp it round if fall below 0
                <para>Move _frontItem back index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.DecreaseFrontIndex">
            <summary>
                Decrease index of _frontItem and warp it round if fall below 0
                <para>Move _backItem back index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.IncreaseBackIndex">
            <summary>
                Increases index of _backItem and warp it round if exceded capacity
                <para>Move _frontItem forward index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.IncreaseFrontIndex">
            <summary>
                Increases index of _frontItem and warp it round if exceded capacity
                <para>Move _backItem forward index if they've met</para>
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.OrderedDictionary`2">
            <summary>
                A dictionary object that allows rapid hash lookups using keys, but also
                maintains the key insertion order so that values can be retrieved by
                key index.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
                Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get or set.</param>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
                Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of the value to get or set.</param>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>The number of elements contained in the T:System.Collections.ICollection.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Keys">
            <summary>
                Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys in the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </summary>
            <returns>
                An <see cref="T:System.Collections.ICollection" /> object containing the keys in the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Values">
            <summary>
                Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </summary>
            <returns>
                An <see cref="T:System.Collections.ICollection" /> object containing the values in the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor">
            <summary>
                A dictionary object that allows rapid hash lookups using keys, but also
                maintains the key insertion order so that values can be retrieved by
                key index.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Allows custom comparer for items</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(FlaxEngine.Collections.IOrderedDictionary{`0,`1})">
            <summary>
                <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Copy constructor</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(FlaxEngine.Collections.IOrderedDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Copy constructor with custom items comparer</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>Adds an element with the specified key and value into the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Clear">
            <summary>
                Clears the contents of the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
                Performs additional custom processes before inserting a new element into the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
            <param name="key">The key of the element to insert. </param>
            <param name="value">The value of the element to insert. </param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.IndexOf(`0)">
            <summary>
                Determines whether an element is in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>
                true if <paramref name="key" /> is found in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />; otherwise,
                false.
            </returns>
            <param name="key">
                The object to locate in the current dictionary. The element to locate can be null for reference
                types.
            </param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsValue(`1)">
            <summary>Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific value.</summary>
            <returns>
                true if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified value;
                otherwise, false.
            </returns>
            <param name="value">The value to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
                Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific value.
            </summary>
            <returns>
                true if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified value;
                otherwise, false.
            </returns>
            <param name="value">The value to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <param name="comparer">The custom <see cref="T:System.Collections.IEqualityComparer" /> for this search</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
                Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific key.
            </summary>
            <returns>
                true if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified key;
                otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetItem(System.Int32)">
            <summary>
                Gets item at given index.
            </summary>
            <param name="index">Requested key at index</param>
            <exception cref="T:System.ArgumentException">
                Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SetItem(System.Int32,`1)">
            <summary>
                Sets the value at the index specified.
            </summary>
            <param name="index">The index of the value desired</param>
            <param name="value">The value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
                Performs additional custom processes before removing an element from the
                <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
            <param name="key">The key of the element to remove. </param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
                Removes the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetValue(`0)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SetValue(`0,`1)">
            <summary>
                Sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to set.</param>
            <param name="value">The the value to set.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get value at specified key.
            </summary>
            <param name="key">The key associated with the value to find.</param>
            <param name="value">Found value.</param>
            <returns>true if value existed, false if not</returns>
        </member>
        <member name="M:FlaxEngine.Collections.ComparerInternal`1.#ctor(System.Comparison{`0})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.ComparerInternal`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Entry">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Key">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Current">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.DialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a dialog box.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Abort">
            <summary>
            The abort.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Cancel">
            <summary>
            The cancel.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Ignore">
            <summary>
            The ignore.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.No">
            <summary>
            The no.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.OK">
            <summary>
            The ok.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Retry">
            <summary>
            The retry.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Yes">
            <summary>
            The yes.
            </summary>
        </member>
        <member name="T:FlaxEngine.ClosingReason">
            <summary>
            Window closing reasons.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.User">
            <summary>
            The user.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.EngineExit">
            <summary>
            The engine exit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.CloseEvent">
            <summary>
            The close event.
            </summary>
        </member>
        <member name="T:FlaxEngine.CursorType">
            <summary>
            Types of default cursors.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Cross">
            <summary>
            The cross.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Hand">
            <summary>
            The hand.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Help">
            <summary>
            The help icon
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.IBeam">
            <summary>
            The I beam.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.No">
            <summary>
            The blocking image.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Wait">
            <summary>
            The wait.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeAll">
            <summary>
            The size all sides.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNESW">
            <summary>
            The size NE-SW.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNS">
            <summary>
            The size NS.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNWSE">
            <summary>
            The size NW-SE.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeWE">
            <summary>
            The size WE.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Hidden">
            <summary>
            The cursor is hidden.
            </summary>
        </member>
        <member name="T:FlaxEngine.DragDropEffect">
            <summary>
            Data drag and drop effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Copy">
            <summary>
            The copy.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Move">
            <summary>
            The move.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Link">
            <summary>
            The link.
            </summary>
        </member>
        <member name="T:FlaxEngine.WindowHitCodes">
            <summary>
            Window hit test codes. Note: they are 1:1 mapping for Win32 values.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Transparent">
            <summary>
            The transparent area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.NoWhere">
            <summary>
            The no hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Client">
            <summary>
            The client area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Caption">
            <summary>
            The caption area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.SystemMenu">
            <summary>
            The system menu.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.GrowBox">
            <summary>
            The grow box
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Menu">
            <summary>
            The menu.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.HScroll">
            <summary>
            The horizontal scroll.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.VScroll">
            <summary>
            The vertical scroll.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.MinButton">
            <summary>
            The minimize button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.MaxButton">
            <summary>
            The maximize button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Left">
            <summary>
            The left side;
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Right">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Top">
            <summary>
            The top side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.TopLeft">
            <summary>
            The top left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.TopRight">
            <summary>
            The top right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Bottom">
            <summary>
            The bottom side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.BottomLeft">
            <summary>
            The bottom left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.BottomRight">
            <summary>
            The bottom right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Border">
            <summary>
            The border.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Object">
            <summary>
            The object.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Close">
            <summary>
            The close button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Help">
            <summary>
            The help button.
            </summary>
        </member>
        <member name="T:FlaxEngine.WindowStartPosition">
            <summary>
            Specifies the initial position of a window.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.CenterParent">
            <summary>
            The window is centered within the bounds of its parent window or center screen if has no parent window specified.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.CenterScreen">
            <summary>
            The windows is centered on the current display, and has the dimensions specified in the window's size.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.Manual">
            <summary>
            The position of the form is determined by the Position property.
            </summary>
        </member>
        <member name="T:FlaxEngine.GameWindowMode">
            <summary>
            Specifies the display mode of a game window.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Windowed">
            <summary>
            The window has borders and does not take up the full screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Fullscreen">
            <summary>
            The window exclusively takes up the full screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Borderless">
            <summary>
            The window behaves like in Windowed mode but has no borders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.FullscreenBorderless">
            <summary>
            Same as in Borderless, but is of the size of the screen.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.LinearGradientBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for linear color gradient (made of 2 color).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.LinearGradientBrush.StartColor">
            <summary>
            The brush start color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.LinearGradientBrush.EndColor">
            <summary>
            The brush end color.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.#ctor(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LinearGradientBrush"/> struct.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
        </member>
        <member name="P:FlaxEngine.GUI.LinearGradientBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.MaterialBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.MaterialBase"/> rendering.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.MaterialBrush.Material">
            <summary>
            The material.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.MaterialBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.#ctor(FlaxEngine.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.MaterialBrush"/> struct.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="P:FlaxEngine.GUI.MaterialBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RenderTargetBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Rendering.RenderTarget"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.RenderTargetBrush.RenderTarget">
            <summary>
            The render target.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderTargetBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RenderTargetBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderTargetBrush.#ctor(FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RenderTargetBrush"/> struct.
            </summary>
            <param name="renderTarget">The render Target.</param>
        </member>
        <member name="P:FlaxEngine.GUI.RenderTargetBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderTargetBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SolidColorBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for single color fill.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.SolidColorBrush.Color">
            <summary>
            The brush color.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SolidColorBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.#ctor(FlaxEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SolidColorBrush"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SolidColorBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SpriteBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Sprite"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.SpriteBrush.Sprite">
            <summary>
            The sprite.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SpriteBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.#ctor(FlaxEngine.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SpriteBrush"/> struct.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SpriteBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TextureBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Texture"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.TextureBrush.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextureBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.#ctor(FlaxEngine.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextureBrush"/> struct.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:FlaxEngine.GUI.TextureBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CanvasContainer">
            <summary>
            The root container control used to sort and manage child UICanvas controls. Helps with sending input events.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.SortCanvases">
            <summary>
            Sorts the canvases by order.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CanvasRootControl">
            <summary>
            Root control implementation used by the <see cref="T:FlaxEngine.UICanvas"/> actor.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RootControl" />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Canvas">
            <summary>
            Gets the owning canvas.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Is2D">
            <summary>
            Gets a value indicating whether canvas is 2D (screen-space).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Is3D">
            <summary>
            Gets a value indicating whether canvas is 3D (world-space or camera-space).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.#ctor(FlaxEngine.UICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CanvasRootControl"/> class.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Cursor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.FocusedControl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.TrackingMouseOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.MousePosition">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.EndTrackingMouse">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKey(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKeyUp(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.PointToParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnKeyUp(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.DoDragDrop(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Border">
            <summary>
            Border control that draws the border around the control edges (inner and outer sides).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Border.BorderColor">
            <summary>
            Gets or sets the color used to draw border lines.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Border.BorderWidth">
            <summary>
            The border lines width.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Border"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Border.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Button">
            <summary>
            Button control
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button.DefaultHeight">
            <summary>
            The default height fro the buttons.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button._mouseDown">
            <summary>
            The mouse down flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.Text">
            <summary>
            Button text property.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.Font">
            <summary>
            Gets or sets the font used to draw button text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.TextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button.TextColor">
            <summary>
            Gets or sets the color used to draw button text.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Button.Clicked">
            <summary>
            Event fired when user clicks on the button
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Button.ButtonClicked">
            <summary>
            Event fired when user clicks on the button
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when button is selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColorSelected">
            <summary>
            Gets or sets the border color when button is selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when button is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when button is highlighted.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
            <param name="x">Position X coordinate</param>
            <param name="y">Position Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnClick">
            <summary>
            Called when mouse clicks the button.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.SetColors(FlaxEngine.Color)">
            <summary>
            Sets the button colors palette based on a given main color.
            </summary>
            <param name="color">The main color.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CheckBoxState">
            <summary>
            The checkbox control states.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Default">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Intermediate">
            <summary>
            The intermediate state.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.CheckBox">
            <summary>
            Check box control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._mouseDown">
            <summary>
            The mouse is down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._mouseOverBox">
            <summary>
            The mouse over box state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._boxSize">
            <summary>
            The box size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._box">
            <summary>
            The box rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.State">
            <summary>
            Gets or sets the state of the checkbox.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.GUI.CheckBox"/> is checked.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.Intermediate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.GUI.CheckBox"/> is in the intermediate state.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BoxSize">
            <summary>
            Gets or sets the size of the box.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.ImageColor">
            <summary>
            Gets or sets the color of the checkbox icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when checkbox is hovered.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.CheckedImage">
            <summary>
            Gets or sets the image used to render checkbox checked state.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.IntermediateImage">
            <summary>
            Gets or sets the image used to render checkbox intermediate state.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.CheckBox.StateChanged">
            <summary>
            Event fired when 'checked' state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CheckBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.#ctor(System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CheckBox"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="isChecked">if set to <c>true</c> set checked on start.</param>
            <param name="size">The checkbox size.</param>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.Toggle">
            <summary>
            Toggles the checked state.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.IBrush">
            <summary>
            Interface that unifies input source textures, sprites, render targets, and any other brushes to be used in a more generic way.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.IBrush.Size">
            <summary>
            Gets the size of the image brush in pixels (if relevant).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.IBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the specified image using <see cref="T:FlaxEngine.Render2D"/> graphics backend.
            </summary>
            <param name="rect">The draw area rectangle.</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:FlaxEngine.GUI.Dropdown">
            <summary>
            Dropdown menu control allows to choose one item from the provided collection of options.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="T:FlaxEngine.GUI.Dropdown.DropdownRoot">
            <summary>
            The root control used by the <see cref="T:FlaxEngine.GUI.Dropdown"/> to show the items collections and track item selecting event.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.ItemClicked">
            <summary>
            Occurs when item gets clicked. Argument is item index.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.LostFocus">
            <summary>
            Occurs when popup losts focus.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.ItemsContainer">
            <summary>
            The items container control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.Dispose">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._popup">
            <summary>
            The popup menu. May be null if has not been used yet.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._selectedIndex">
            <summary>
            The selected index of the item (-1 for no selection).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedItem">
            <summary>
            Gets or sets the selected item (returns <see cref="F:System.String.Empty"/> if no item is being selected).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Dropdown.SelectedIndexChanged">
            <summary>
            Event fired when selected index gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.IsPopupOpened">
            <summary>
            Gets a value indicating whether this popup menu is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.Font">
            <summary>
            Gets or sets the font used to draw text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.FontMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when dropdown popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColorSelected">
            <summary>
            Gets or sets the border color when dropdown popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when dropdown is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when dropdown is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowImage">
            <summary>
            Gets or sets the image used to render dropdown drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColor">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColorSelected">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon (menu is opened).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColorHighlighted">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon (menu is highlighted).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.CheckedImage">
            <summary>
            Gets or sets the image used to render dropdown checked item icon.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Dropdown"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.AddItem(System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.SetItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnSelectedIndexChanged">
            <summary>
            Called when selected item index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnItemClicked(System.Int32)">
            <summary>
            Called when item is clicked.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.CreatePopup">
            <summary>
            Creates the popup menu (including items collection).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DestroyPopup">
            <summary>
            Destroys the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Image">
            <summary>
            The basic GUI image control. Shows texture, sprite or render target.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Image.Brush">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.Margin">
            <summary>
            Gets or sets the margin for the image.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.Color">
            <summary>
            Gets or sets the color used to multiply the image pixels.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.MouseOverColor">
            <summary>
            Gets or sets the color used to multiply the image pixels when mouse is over the image.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.DisabledTint">
            <summary>
            Gets or sets the color used to multiply the image pixels when control is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether keep aspect ratio when drawing the image.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Image.Clicked">
            <summary>
            Occurs when mouse clicks on the image.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Label">
            <summary>
            The basic GUI label control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.TextColorHighlighted">
            <summary>
            Gets or sets the color of the text when it is highlighted (mouse is over).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal text alignment within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.VerticalAlignment">
            <summary>
            Gets or sets the vertical text alignment within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Wrapping">
            <summary>
            Gets or sets the text wrapping within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Material">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Margin">
            <summary>
            Gets or sets the margin for the text within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.ClipText">
            <summary>
            Gets or sets a value indicating whether clip text during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoWidth">
            <summary>
            Gets or sets a value indicating whether set automatic width based on text contents.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoHeight">
            <summary>
            Gets or sets a value indicating whether set automatic height based on text contents.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Label"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Label.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Label.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Label.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ProgressBar">
            <summary>
            Progress bar control shows visual progress of the action or set of actions.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._current">
            <summary>
            The current value (used to apply smooth progress changes).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._minimum">
            <summary>
            The minimum progress value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._maximum">
            <summary>
            The maximum progress value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.SmoothingScale">
            <summary>
            Gets or sets the value smoothing scale (0 to not use it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.UseSmoothing">
            <summary>
            Gets a value indicating whether use progress value smoothing.
            </summary>
            <value>
              <c>true</c> if use progress value smoothing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarMargin">
            <summary>
            Gets or sets the margin for the progress bar rectangle within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarColor">
            <summary>
            Gets or sets the color of the progress bar rectangle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Spacer">
            <summary>
            Helper control used to insert blank space into the layout.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEngine.GUI.Spacer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Spacer"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Spacer.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Spacer"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:FlaxEngine.GUI.ContainerControl">
            <summary>
                Base interface for all GUI controls that can contain controls
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._children">
            <summary>
            The children collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._containsFocus">
            <summary>
            The contains focus cached flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._performChildrenLayoutFirst">
            <summary>
            The option to update child controls layout first before self.
            Useful for controls which dimensions are based on children.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ContainerControl.OnChildControlResized">
            <summary>
                 Action is invoked, when child control gets resized
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.Children">
            <summary>
                Gets child controls list
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ChildrenCount">
            <summary>
                Gets amount of the children controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.HasChildren">
            <summary>
                Checks if container has any child controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ContainsFocus">
            <summary>
                Gets a value indicating whether the control, or one of its child controls, currently has the input focus
            </summary>
            <returns>True if the control, or one of its child controls, currently has the input focus</returns>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.IsLayoutLocked">
            <summary>
                True if automatic updates for control layout are locked (useful when creating a lot of GUI control to prevent
                lags)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ClipChildren">
            <summary>
            Gets or sets a value indicating whether apply clipping mask on children during rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.LockChildrenRecursive">
            <summary>
                Lock all child controls layout and itself
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UnlockChildrenRecursive">
            <summary>
                Unlocks all child controls layout and itself
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChildren">
            <summary>
                Unlink all child controls
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DisposeChildren">
            <summary>
                Remove and dispose all child controls
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChild``1">
            <summary>
            Creates a new control and adds it to the container.
            </summary>
            <returns>Added control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChild``1(``0)">
            <summary>
                Add control to the container
            </summary>
            <param name="child">Control to add</param>
            <returns>Added control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChild(FlaxEngine.GUI.Control)">
            <summary>
                Remove control from the container
            </summary>
            <param name="child">Control to remove</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChild(System.Int32)">
            <summary>
                Gets child control at given index.
            </summary>
            <param name="index">Control index</param>
            <returns>Control handle</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChild``1">
            <summary>
            Searches for a child control of a specific type. If there are multiple controls matching the type, only the first one found is returned.
            </summary>
            <typeparam name="T">Type of the control to search for. Includes any controls derived from the type.</typeparam>
            <returns>Control instance if found, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildIndex(FlaxEngine.GUI.Control)">
            <summary>
                Gets zero-based index in the list of control children
            </summary>
            <param name="child">Child control</param>
            <returns>Zero-based index in the list of control children</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildIndexAt(FlaxEngine.Vector2)">
            <summary>
                Tries to find any child control at given point in control local coordinates
            </summary>
            <param name="point">Local point to check</param>
            <returns>Found control index or -1</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAt(FlaxEngine.Vector2)">
            <summary>
                Tries to find any child control at given point in control local coordinates
            </summary>
            <param name="point">Local point to check</param>
            <returns>Found control or null</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAt(FlaxEngine.Vector2,System.Func{FlaxEngine.GUI.Control,System.Boolean})">
            <summary>
            Tries to find valid child control at given point in control local coordinates. Uses custom callback method to test controls to pick.
            </summary>
            <param name="point">The local point to check.</param>
            <param name="isValid">Control validation callback</param>
            <returns>Found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAtRecursive(FlaxEngine.Vector2)">
            <summary>
                Tries to find lowest child control at given point in control local coordinates
            </summary>
            <param name="point">Local point to check</param>
            <returns>Found control or null</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetClientArea">
            <summary>
                Gets rectangle in local control coordinates with area for controls (without scroll bars, docked controls, etc.)
            </summary>
            <returns>Rectangle in local control coordinates with area for controls (without scroll bars etc.)</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SortChildren">
            <summary>
                Sort child controls list
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SortChildrenRecursive">
            <summary>
                Sort children using recursion
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnChildResized(FlaxEngine.GUI.Control)">
            <summary>
            Called when child control gets resized.
            </summary>
            <param name="control">The resized control.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnChildrenChanged">
            <summary>
            Called when children collection gets changed (child added or removed).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.CacheRootHandle">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChildInternal(FlaxEngine.GUI.Control)">
            <summary>
                Add child control to the container
            </summary>
            <param name="child">Control to add</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChildInternal(FlaxEngine.GUI.Control)">
            <summary>
                Remove child control from this container
            </summary>
            <param name="child">Control to remove</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <summary>
                Gets the desire client area rectangle for all the controls.
            </summary>
            <param name="rect">The client area rectangle for child controls.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <summary>
            Checks if given point in thi container control space intersects with the child control content.
            Also calculates result location in child control space which can be used to feed control with event at that point.
            </summary>
            <param name="child">The child control to check.</param>
            <param name="location">The location in this container control space.</param>
            <param name="childSpaceLocation">The output location in child control space.</param>
            <returns>True if point is over the control content, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UpdateContainsFocus">
            <summary>
                Update contain focus state and all it's children
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.ArrangeDockedControls(FlaxEngine.Rectangle@)">
            <summary>
                Arrange docked controls and return final client area for other controls
            </summary>
            <param name="clientArea">Result client area</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.CalculateDockedControlsClientRect(FlaxEngine.Rectangle@)">
            <summary>
                Use docked controls to calculate return final client area for other controls
            </summary>
            <param name="clientArea">Result client area</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayoutSelf">
            <summary>
                Perform layout for that container control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.IsMouseOver">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DrawChildren">
            <summary>
            Draws the children. Can be overriden to provide some customizations. Draw is performed with applied clipping mask fro the client area.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnKeyUp(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Control">
            <summary>
                Base class for all GUI controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.X">
            <summary>
            Gets or sets X coordinate of the upper-left corner of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Y">
            <summary>
            Gets or sets Y coordinate of the upper-left corner of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Location">
            <summary>
            Gets or sets coordinates of the upper-left corner of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Width">
            <summary>
            Gets or sets width of the control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Height">
            <summary>
            Gets or sets height of the control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Size">
            <summary>
            Gets or sets control's size
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Top">
            <summary>
            Gets Y coordinate of the top edge of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Bottom">
            <summary>
            Gets Y coordinate of the bottom edge of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Left">
            <summary>
            Gets X coordinate of the left edge of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Right">
            <summary>
            Gets X coordinate of the right edge of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.UpperLeft">
            <summary>
            Gets position of the upper left corner of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.UpperRight">
            <summary>
            Gets position of the upper right corner of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BottomRight">
            <summary>
            Gets position of the bottom right corner of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BottomLeft">
            <summary>
            Gets position of the bottom left of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Center">
            <summary>
            Gets center position of the control relative to the upper-left corner of its container
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Bounds">
            <summary>
            Gets or sets control's bounds rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Pivot">
            <summary>
            Gets or sets the normalized pivot location (used to transform control around it). Point (0,0) is upper left corner, (0.5,0.5) is center, (1,1) is bottom left corner.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Shear">
            <summary>
            Gets or sets the shear. Defined in degrees.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Rotation">
            <summary>
            Gets or sets the rotation angle (in degrees).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UpdateTransform">
            <summary>
            Updates the control transform.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.LocationChanged">
            <summary>
                Action is invoked, when location is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.SizeChanged">
            <summary>
                Action is invoked, when size is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.ParentChanged">
            <summary>
                Action is invoked, when parent is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.VisibleChanged">
            <summary>
                Action is invoked, when visibility is changed
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Parent">
            <summary>
                Parent control (the one above in the tree hierarchy)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.HasParent">
            <summary>
                Checks if control has parent container control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IndexInParent">
            <summary>
            Gets or sets zero-based index of the control inside the parent container list.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BackgroundColor">
            <summary>
                Gets or sets control background color (transparent color (alpha=0) means no background rendering)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.DockStyle">
            <summary>
                Gets or sets the docking style of the control.
            If value set is other than <see cref="F:FlaxEngine.GUI.DockStyle.None"/> then <see cref="P:FlaxEngine.GUI.Control.IsScrollable"/> will be disabled by auto.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorStyle">
            <summary>
            Gets or sets the anchor style of the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsScrollable">
            <summary>
            Gets or sets a value indicating whether this control is scrollable (scroll bars affect it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Enabled">
            <summary>
                Gets or sets a value indicating whether the control can respond to user interaction
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.EnabledInHierarchy">
            <summary>
            Gets a value indicating whether the control is enabled in the hierarchy (it's enabled and all it's parents are enabled as well).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Visible">
            <summary>
                Gets or sets a value indicating whether the control is visible
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.VisibleInHierarchy">
            <summary>
            Gets a value indicating whether the control is visible in the hierarchy (it's visible and all it's parents are visible as well).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsDisposing">
            <summary>
                Returns true if control is during disposing state (on destroy)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Root">
            <summary>
            Gets the GUI tree root control which contains that control (or null if not linked to any)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.RootWindow">
            <summary>
            Gets the GUI window root control which contains that control (or null if not linked to any).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ScreenPos">
            <summary>
            Gets screen position of the control (upper left corner).
            </summary>
            <returns>Screen position of the control.</returns>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Cursor">
            <summary>
            Gets or sets the cursor (per window). Control should restore cursor to the default value eg. when mouse leaves it's area.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.Tag">
            <summary>
            The custom tag object value linked to the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
            <param name="location">Upper left corner location.</param>
            <param name="size">Bounds size.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(FlaxEngine.Rectangle)">
            <summary>
                Init
            </summary>
            <param name="bounds">Window bounds</param>
        </member>
        <member name="T:FlaxEngine.GUI.Control.UpdateDelegate">
            <summary>
            Performs control logic update.
            </summary>
            <param name="deltaTime">The delta time in seconds (since last update).</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Dispose">
            <summary>
                Delete control (will unlink from the parent and start to dispose)
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Update(System.Single)">
            <summary>
                Perform control update and all its children
            </summary>
            <param name="deltaTime">Delta time in seconds</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Draw">
            <summary>
                Draw control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PerformLayout(System.Boolean)">
            <summary>
                Update control layout
            </summary>
            <param name="force">True if perform layout by force even if cached state wants to skip it due to optimization.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AutoFocus">
            <summary>
                Gets a value indicating whether the control can receive automatic focus on user events (eg. mouse down.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ContainsFocus">
            <summary>
                Gets a value indicating whether the control, currently has the input focus
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsFocused">
            <summary>
                Gets a value indicating whether the control has input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Focus">
            <summary>
                Sets input focus to the control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Defocus">
            <summary>
                Removes input focus from the control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnGotFocus">
            <summary>
                When control gets input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnLostFocus">
            <summary>
                When control losts input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnStartContainsFocus">
            <summary>
                Action fired when control gets 'Contains Focus' state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnEndContainsFocus">
            <summary>
                Action fired when control losts 'Contains Focus' state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Focus(FlaxEngine.GUI.Control)">
            <summary>
                Focus that control
            </summary>
            <param name="c">Control to focus</param>
            <returns>True if control got a focus</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.StartMouseCapture(System.Boolean)">
            <summary>
            Starts the mouse tracking. Used by the scrollbars, splitters, etc.
            </summary>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.EndMouseCapture">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnEndMouseCapture">
            <summary>
                When mouse goes up/down not over the control but it has user focus so remove that focus from it (used by scroll
                bars, sliders etc.)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsMouseOver">
            <summary>
                Check if mouse is over that item or its child items
            </summary>
            <returns>True if mouse is over</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseEnter(FlaxEngine.Vector2)">
            <summary>
                When mouse enters control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseMove(FlaxEngine.Vector2)">
            <summary>
                When mouse moves over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseLeave">
            <summary>
                When mouse leaves control's area
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <summary>
                When mouse wheel moves
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="delta">
              Mouse wheel move delta. A positive value indicates that the wheel was rotated forward, away from
              the user; a negative value indicates that the wheel was rotated backward, toward the user. Normalized to [-1;1] range.
            </param>
            <returns>True if event has been handled</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
                When mouse goes down over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="buttons">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
                When mouse goes up over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="buttons">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
                When mouse double clicks over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="buttons">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnCharInput(System.Char)">
            <summary>
                On input character
            </summary>
            <param name="c">Input character</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnKeyDown(FlaxEngine.Keys)">
            <summary>
                When key goes down
            </summary>
            <param name="key">Key value</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnKeyUp(FlaxEngine.Keys)">
            <summary>
                When key goes up
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsDragOver">
            <summary>
                Check if mouse dragging is over that item or its child items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
                When mouse dragging enters control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
                When mouse dragging moves over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
                When mouse dragging drops on control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragLeave">
            <summary>
                When mouse dragging leaves control's area
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.DoDragDrop(FlaxEngine.GUI.DragData)">
            <summary>
            Starts the drag and drop operation.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.TooltipText">
            <summary>
            Gets or sets the tooltip text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.CustomTooltip">
            <summary>
            Gets or sets the custom tooltip control linked. Use null to show default shared tooltip from the current <see cref="T:FlaxEngine.GUI.Style"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Tooltip">
            <summary>
            Gets the tooltip used by this control (custom or shared one).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ShowTooltip">
            <summary>
            Gets a value indicating whether show control tooltip (control is in a proper state, tooltip text is valid, etc.). Can be used to implement custom conditions for showing tooltips (eg. based on current mouse location within the control bounds).
            </summary>
            <remarks>
            Tooltip can be only visible if mouse is over the control area (see <see cref="P:FlaxEngine.GUI.Control.IsMouseOver"/>).
            </remarks>
        </member>
        <member name="M:FlaxEngine.GUI.Control.LinkTooltip(System.String,FlaxEngine.GUI.Tooltip)">
            <summary>
            Links the tooltip.
            </summary>
            <param name="text">The text.</param>
            <param name="customTooltip">The custom tooltip.</param>
            <returns>This control pointer. Useful for creating controls in code.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UnlinkTooltip">
            <summary>
            Unlinks the tooltip.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Called when tooltip wants to be shown. Allows modifying its appearance.
            </summary>
            <param name="text">The tooltip text to show.</param>
            <param name="location">The popup start location (in this control local space).</param>
            <param name="area">The allowed area of mouse movement to show tooltip (in this control local space).</param>
            <returns>True if can show tooltip, otherwise false to skip.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <summary>
            Called when tooltip is visible and tests if the given mouse location (in control space) is valid (is over the content).
            </summary>
            <param name="location">The location.</param>
            <returns>True if tooltip can be still visible, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Checks if given location point in Parent Space intersects with the control content and calculates local position.
            </summary>
            <param name="locationParent">The location in Parent Space.</param>
            <param name="location">The location of intersection in Control Space.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ContainsPoint(FlaxEngine.Vector2@)">
            <summary>
                Checks if control contains given point in local Control Space.
            </summary>
            <param name="location">Point location in Control Space to check</param>
            <returns>True if point is inside control's area</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.GUI.ContainerControl,FlaxEngine.Vector2)">
            <summary>
                Converts point in local control's space into one of the parent control coordinates
            </summary>
            <param name="parent">This control parent of any other parent.</param>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in parent control coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into parent control coordinates.
            </summary>
            <param name="location">The input location of the point to convert.</param>
            <returns>The converted point location in parent control coordinates.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.Vector2@)">
            <summary>
            Converts point in local control's space into parent control coordinates.
            </summary>
            <param name="location">The input location of the point to convert.</param>
            <returns>The converted point location in parent control coordinates.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.Vector2)">
            <summary>
            Converts point in parent control coordinates into local control's space.
            </summary>
            <param name="locationParent">The input location of the point to convert.</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.Vector2@)">
            <summary>
            Converts point in parent control coordinates into local control's space.
            </summary>
            <param name="locationParent">The input location of the point to convert.</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToWindow(FlaxEngine.Vector2)">
            <summary>
                Converts point in local control's space into window coordinates
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in window coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromWindow(FlaxEngine.Vector2)">
            <summary>
                Converts point in the window coordinates into control's space
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in control's space</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ClientToScreen(FlaxEngine.Vector2)">
            <summary>
                Converts point in the local control's space into screen coordinates
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in screen coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ScreenToClient(FlaxEngine.Vector2)">
            <summary>
                Converts point in screen coordinates into the local control's space
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in local control's space</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetLocationInternal(FlaxEngine.Vector2@)">
            <summary>
                Sets location of control and calls event
                <remarks>This method is called from engine when necessary</remarks>
            </summary>
            <param name="location">Location to set</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetSizeInternal(FlaxEngine.Vector2@)">
            <summary>
                Sets size of control and calls event
                <remarks>This method is called form engine when necessary</remarks>
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetScaleInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the scale and updates the transform.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetPivotInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the pivot and updates the transform.
            </summary>
            <param name="pivot">The pivot.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetShearInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the shear and updates the transform.
            </summary>
            <param name="shear">The shear.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetRotationInternal(System.Single)">
            <summary>
            Sets the rotation angle and updates the transform.
            </summary>
            <param name="rotation">The rotation (in degrees).</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnVisibleChanged">
            <summary>
            Called when visible state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnParentChangedInternal">
            <summary>
                Action fred when parent control gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.CacheRootHandle">
            <summary>
            Caches the root control handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <summary>
            Adds the custom control logic update callbacks to the root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <summary>
            Removes the custom control logic update callbacks from the root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetUpdate(FlaxEngine.GUI.Control.UpdateDelegate@,FlaxEngine.GUI.Control.UpdateDelegate)">
            <summary>
            Helper utility function to sets the update callback to the root. Does nothing if value has not been modified. Handles if control ahs no root or parent.
            </summary>
            <param name="onUpdate">The cached update callback delegate (field in teh custom control implementation).</param>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnParentResized(FlaxEngine.Vector2@)">
            <summary>
                Action fred when parent control gets resized (also when control gets non-null parent)
            </summary>
            <param name="oldSize">Previous size of the parent control</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDestroy">
            <summary>
                Method called when managed instance should be destroyed
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Control.Compare(FlaxEngine.GUI.Control)">
            <summary>
            Compares this control with the other control.
            </summary>
            <param name="other">The other.</param>
            <returns>Comparision result.</returns>
        </member>
        <member name="T:FlaxEngine.GUI.DragData">
            <summary>
            The data container for drag and drop operation in GUI.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.DragDataFiles">
            <summary>
            The drag and drop files.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DragData" />
        </member>
        <member name="F:FlaxEngine.GUI.DragDataFiles.Files">
            <summary>
            The file paths collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DragDataFiles.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DragDataFiles"/> class.
            </summary>
            <param name="files">The files.</param>
        </member>
        <member name="T:FlaxEngine.GUI.DragDataText">
            <summary>
            The drag and drop text data.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DragData" />
        </member>
        <member name="F:FlaxEngine.GUI.DragDataText.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DragDataText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DragDataText"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:FlaxEngine.GUI.DockStyle">
            <summary>
            Specifies the position and manner in which a control is docked
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DockStyle.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DockStyle.Top">
            <summary>
            The top edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DockStyle.Bottom">
            <summary>
            The bottom edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DockStyle.Left">
            <summary>
            The left edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DockStyle.Right">
            <summary>
            The right edge
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DockStyle.Fill">
            <summary>
            The whole area.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.AnchorStyle">
            <summary>
            Specifies the location of the anchor point used to position control in the parent container.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.UpperLeft">
            <summary>
            The upper left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.UpperCenter">
            <summary>
            The center of the upper edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.UpperRight">
            <summary>
            The upper right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.Upper">
            <summary>
            The upper edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.CenterLeft">
            <summary>
            The center of the left edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.Center">
            <summary>
            The center.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.CenterRight">
            <summary>
            The center of the right edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.BottomLeft">
            <summary>
            The bottom left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.BottomCenter">
            <summary>
            The center of the bottom edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.BottomRight">
            <summary>
            The bottom right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.Bottom">
            <summary>
            The bottom edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.Left">
            <summary>
            The left edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorStyle.Right">
            <summary>
            The right edge.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.ScrollBars">
            <summary>
            Specifies which scroll bars will be visible on a control
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.None">
            <summary>
            Don't use scroll bars.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Horizontal">
            <summary>
            Use horizontal scrollbar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Vertical">
            <summary>
            Use vertical scrollbar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Both">
            <summary>
            Use horizontal and vertical scrollbar.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.DragItemPositioning">
            <summary>
            The drag item positioning modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.At">
            <summary>
            At the item.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.Above">
            <summary>
            Above the item (near the upper/left edge).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.Below">
            <summary>
            Below the item (near the bottom/right edge)
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Orientation">
            <summary>
            Specifies the orientation of controls or elements of controls
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Orientation.Horizontal">
            <summary>
            The horizontal.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Orientation.Vertical">
            <summary>
            The vertical.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.TextBox">
            <summary>
            Text Box control which can gather text input from the user
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBox.DefaultHeight">
            <summary>
            Default height of the text box
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBox.DefaultMargin">
            <summary>
            Left and right margin for text inside the text box bounds rectangle
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBox._text">
            <summary>
            The current text value.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBox.TextChanged">
            <summary>
            Event fired when text gets changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBox.EditEnd">
            <summary>
            Event fired when text gets changed after editing (user accepted entered value).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.IsMultiline">
            <summary>
            Gets or sets a value indicating whether this is a multiline text box control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.MaxLength">
            <summary>
            Gets or sets the maximum number of characters the user can type into the text box control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether text in the text box is read-only. 
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Text">
            <summary>
            Gets or sets text property.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.SetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextLength">
            <summary>
            Gets length of the text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectedText">
            <summary>
            Gets the currently selected text in the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the text box.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.HasSelection">
            <summary>
            Returns true if any text is selected, otherwise false
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.WatermarkText">
            <summary>
            Gets or sets the watermark text to show grayed when textbox is empty.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectionLeft">
            <summary>
            Index of the character on left edge of the selection
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectionRight">
            <summary>
            Index of the character on right edge of the selection
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.CaretPosition">
            <summary>
            Gets current caret position (index of the character)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.CaretBounds">
            <summary>
            Calculates caret rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Wrapping">
            <summary>
            Gets or sets the text wrapping within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.BackgroundSelectedColor">
            <summary>
            Gets or sets textbox background color when the control is selected (has focus).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.WatermarkTextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectionColor">
            <summary>
            Gets or sets the color of the selection (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.CaretColor">
            <summary>
            Gets or sets the color of the caret (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.BorderColor">
            <summary>
            Gets or sets the color of the border (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.BorderSelectedColor">
            <summary>
            Gets or sets the color of the border when control is focused (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextRectangle">
            <summary>
            Gets rectangle with area for text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextClipRectangle">
            <summary>
            Gets rectangle used to clip text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.ViewOffset">
            <summary>
            Gets the current view offset.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <param name="x">Position X coordinate</param>
            <param name="y">Position Y coordinate</param>
            <param name="width">Width</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Clear">
            <summary>
            Clears all text from the text box control. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.ClearSelection">
            <summary>
            Clear selection range
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.ResetViewOffset">
            <summary>
            Resets the view offset (text scroll view).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Copy">
            <summary>
            Copies the current selection in the text box to the Clipboard. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Cut">
            <summary>
            Moves the current selection in the text box to the Clipboard. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Paste">
            <summary>
            Replaces the current selection in the text box with the contents of the Clipboard.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Duplicate">
            <summary>
            Duplicates the current selection in the text box.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.ScrollToCaret">
            <summary>
            Ensures that the caret is visible in the TextBox window, by scrolling the TextBox control surface if necessary.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.SelectAll">
            <summary>
            Selects all text in the text box.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Deselect">
            <summary>
            Sets selection to empty value
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnSelectingBegin">
            <summary>
            Action called when user starts text selecting
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnSelectingEnd">
            <summary>
            Action called when user ends text selecting
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnEditBegin">
            <summary>
            Action called when user starts text editing
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnEditEnd">
            <summary>
            Action called when user ends text editing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnTextChanged">
            <summary>
            Action called when text gets modified.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Margin">
            <summary>
            Describes the space around a control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.GUI.Margin" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Zero">
            <summary>
            A <see cref="T:FlaxEngine.GUI.Margin" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Left">
            <summary>
            Holds the margin to the left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Right">
            <summary>
            Holds the margin to the right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Top">
            <summary>
            Holds the margin to the top.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Bottom">
            <summary>
            Holds the margin to the bottom.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Size">
            <summary>
            Gets the margin's total size. Cumulative margin size.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Width">
            <summary>
            Gets the width (left + right).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Height">
            <summary>
            Gets the height (top + bottom).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Margin"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Margin"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.IsZero">
            <summary>
            Gets a value indicting whether this margin is zero.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ShrinkRectangle(FlaxEngine.Rectangle@)">
            <summary>
            Shrinks the rectangle by this margin.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ExpandRectangle(FlaxEngine.Rectangle@)">
            <summary>
            Expands the rectangle by this margin.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Equality(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Inequality(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.GUI.Margin" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin@,FlaxEngine.GUI.Margin@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.GUI.Margin" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.GUI.BlurPanel">
            <summary>
            The blur panel that applied the Gaussian-blur to all content beneath the control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.BlurPanel.BlurStrength">
            <summary>
            Gets or sets the blur strength. Defines how blurry the background is. Larger numbers increase blur, resulting in a larger runtime cost on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.BlurPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.BlurPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.BlurPanel.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.DropPanel">
            <summary>
            Drop Panel arranges control vertically and provides feature to collapse contents.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._headerHeight">
            <summary>
            The header height.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._headerTextMargin">
            <summary>
            The header text margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._isClosed">
            <summary>
            The 'is closed' flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseOverHeader">
            <summary>
            The 'mouse over header' flag (over header).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseDown">
            <summary>
            The 'mouse down' flag (over header).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._animationProgress">
            <summary>
            The animation progress (normalized).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._cachedHeight">
            <summary>
            The cached height of the control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._itemsMargin">
            <summary>
            The items margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderText">
            <summary>
            Gets or sets the header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderHeight">
            <summary>
            Gets or sets the height of the header.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextMargin">
            <summary>
            Gets or sets the header margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel.HeaderTextColor">
            <summary>
            Gets or sets the color used to draw header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderColor">
            <summary>
            Gets or sets the color of the header.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderColorMouseOver">
            <summary>
            Gets or sets the color of the header when mouse is over.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextFont">
            <summary>
            Gets or sets the font used to render panel header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.EnableDropDownIcon">
            <summary>
            Gets or sets a value indicating whether enable drop down icon drawing.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.DropPanel.ClosedChanged">
            <summary>
            Occurs when drop panel is opened or closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.IsClosed">
            <summary>
            Gets or sets a value indicating whether this panel is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ItemsMargin">
            <summary>
            Gets or sets the item slots margin (the space between items).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.CloseAnimationTime">
            <summary>
            Gets or sets the panel close/open animation duration (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ArrowImageOpened">
            <summary>
            Gets or sets the image used to render drop panel drop arrow icon when panel is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ArrowImageClosed">
            <summary>
            Gets or sets the image used to render drop panel drop arrow icon when panel is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderRectangle">
            <summary>
            Gets the header rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ShowTooltip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DropPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Open(System.Boolean)">
            <summary>
            Opens the group.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Close(System.Boolean)">
            <summary>
            Closes the group.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Toggle">
            <summary>
            Toggles open state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.GridPanel">
            <summary>
            A panel that divides up available space between all of its children.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.SlotPadding">
            <summary>
            Gets or sets the padding given to each slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.RowFill">
            <summary>
            The cells heights in container height percentage (from top to bottom). Use negative values to set fixed widths for the cells.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.ColumnFill">
            <summary>
            The cells heights in container width percentage (from left to right). Use negative values to set fixed heights for the cells.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GridPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GridPanel"/> class.
            </summary>
            <param name="slotPadding">The slot padding.</param>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.HorizontalPanel">
            <summary>
            This panel arranges child controls horizontally.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.HorizontalPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.HScrollBar">
            <summary>
            Horizontal scroll bar control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollBar" />
        </member>
        <member name="M:FlaxEngine.GUI.HScrollBar.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.HScrollBar"/> class.
            </summary>
            <param name="y">The y position.</param>
            <param name="width">The width.</param>
        </member>
        <member name="P:FlaxEngine.GUI.HScrollBar.TrackSize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.PanelWithMargins">
            <summary>
            Helper control class for other panels.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._margin">
            <summary>
            The panel area margins.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._spacing">
            <summary>
            The space between the items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._autoSize">
            <summary>
            The auto size flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._offset">
            <summary>
            The control offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Spacing">
            <summary>
            Gets or sets the child controls spacing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Offset">
            <summary>
            Gets or sets the child controls offset (additive).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.AutoSize">
            <summary>
            Gets or sets the value indicating whenever the panel size will be based on a children dimensions.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Margin">
            <summary>
            Gets or sets the panel area margin.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.PanelWithMargins.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.PanelWithMargins"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.PanelWithMargins.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ScrollBar">
            <summary>
            Scroll Bars base class - allows to scroll contents of the GUI panel.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultSize">
            <summary>
            The default size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultThumbThickness">
            <summary>
            The default thumb rectangle thickness.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultTrackThickness">
            <summary>
            The default track line thickness.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultMinimumOpacity">
            <summary>
            The default minimum opacity.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultMinimumSize">
            <summary>
            The default minimum size.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Orientation">
            <summary>
            Gets the orientation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.SmoothingScale">
            <summary>
            Gets or sets the value smoothing scale (0 to not use it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.UseSmoothing">
            <summary>
            Gets a value indicating whether use scroll value smoothing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Value">
            <summary>
            Gets or sets the scroll value (current, smooth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TargetValue">
            <summary>
            Gets or sets the target value (target, not smooth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.ValueSlowDown">
            <summary>
            Gets the value slow down.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.IsThumbClicked">
            <summary>
            Gets a value indicating whether thumb is being clicked (scroll bar is in use).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TrackSize">
            <summary>
            Gets the size of the track.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.#ctor(FlaxEngine.GUI.Orientation,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ScrollBar"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.ScrollViewTo(System.Single,System.Single)">
            <summary>
            Scrolls the view to the desire range (favors minimum value if cannot cover whole range in a bounds).
            </summary>
            <param name="min">The view minimum.</param>
            <param name="max">The view maximum.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.SetScrollRange(System.Single,System.Single)">
            <summary>
            Sets the scroll range (min and max at once).
            </summary>
            <param name="minimum">The minimum scroll range value (see <see cref="P:FlaxEngine.GUI.ScrollBar.Minimum"/>).</param>
            <param name="maximum">The maximum scroll range value (see <see cref="P:FlaxEngine.GUI.ScrollBar.Minimum"/>).</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Panel">
            <summary>
            Panel UI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollableControl" />
        </member>
        <member name="F:FlaxEngine.GUI.Panel._controlsBounds">
            <summary>
            The cached scroll area bounds. Used to scroll contents of the panel control. Cached during performing layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Panel.VScrollBar">
            <summary>
            The vertical scroll bar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Panel.HScrollBar">
            <summary>
            The horizontal scroll bar.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ViewBottom">
            <summary>
            Gets the view bottom.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ControlsBounds">
            <summary>
            Gets the cached scroll area bounds. Used to scroll contents of the panel control. Cached during performing layout.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollBars">
            <summary>
            Gets or sets the scroll bars usage by this panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.AlwaysShowScrollbars">
            <summary>
            Gets or sets a value indicating whether always show scrollbars. Otherwise show them only if scrolling is available.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollMargin">
            <summary>
            Gets or sets the scroll margin applies to the child controls area. Can be used to expand the scroll area bounds by adding a margin.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Panel"/> class.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.#ctor(FlaxEngine.GUI.ScrollBars,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Panel"/> class.
            </summary>
            <param name="scrollBars">The scroll bars.</param>
            <param name="autoFocus">True if control can accept user focus</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.SetViewOffset(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.GUI.Control)">
            <summary>
            Scrolls the view to the given control area.
            </summary>
            <param name="c">The control.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.Vector2)">
            <summary>
            Scrolls the view to the given location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.Rectangle)">
            <summary>
            Scrolls the view to the given area.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.RemoveChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.DisposeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.AddChildInternal(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ArrangeAndGetBounds">
            <summary>
            Arranges the child controls and gets their bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.Arrange">
            <summary>
            Arranges the child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SplitPanel">
            <summary>
            GUI control that contains two child panels and the splitter between them.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.SpliterSize">
            <summary>
            The splitter size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.SpliterSizeHalf">
            <summary>
            The splitter half size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.Panel1">
            <summary>
            The first panel (left or upper based on Orientation).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.Panel2">
            <summary>
            The second panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SplitPanel.Orientation">
            <summary>
            Gets or sets the panel orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:FlaxEngine.GUI.SplitPanel.SplitterValue">
            <summary>
            Gets or sets the splitter value (always in range [0; 1]).
            </summary>
            <value>
            The splitter value (always in range [0; 1]).
            </value>
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.#ctor(FlaxEngine.GUI.Orientation,FlaxEngine.GUI.ScrollBars,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SplitPanel"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="panel1Scroll">The panel1 scroll bars.</param>
            <param name="panel2Scroll">The panel2 scroll bars.</param>
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TilesPanel">
            <summary>
            Panel that arranges child controls like tiles.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.TileSize">
            <summary>
            Gets or sets the size of the tile.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.AutoResize">
            <summary>
            Gets or sets a value indicating whether perform automatic resize after tiles arrange.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TilesPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.UniformGridPanel">
            <summary>
            A panel that evenly divides up available space between all of its children.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotPadding">
            <summary>
            Gets or sets the padding given to each slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotsHorizontally">
            <summary>
            Gets or sets the amount of slots horizontally. Use 0 to don't limit it.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotsVertically">
            <summary>
            Gets or sets the amount of slots vertically. Use 0 to don't limit it.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.UniformGridPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.UniformGridPanel"/> class.
            </summary>
            <param name="slotPadding">The slot padding.</param>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.VerticalPanel">
            <summary>
            This panel arranges child controls vertically.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.VerticalPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.VScrollBar">
            <summary>
            Vertical scroll bar control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollBar" />
        </member>
        <member name="M:FlaxEngine.GUI.VScrollBar.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.VScrollBar"/> class.
            </summary>
            <param name="x">The x position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEngine.GUI.VScrollBar.TrackSize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RenderOutputControl">
            <summary>
            A common control used to present rendered frame in the UI.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl.DefaultBackBufferFormat">
            <summary>
            The default back buffer format used by the GUI controls presenting rendered frames.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl.ResizeCheckTime">
            <summary>
            The resize check timeout (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl._task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl._backBuffer">
            <summary>
            The back buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.RenderOnlyWithWindow">
            <summary>
            Gets a value indicating whether render to that output only if parent window exists, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.TintColor">
            <summary>
            Gets or sets the color of the tint used to color the backbuffer of the render output.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.Brightness">
            <summary>
            Gets or sets the brightness of the output.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.#ctor(FlaxEngine.Rendering.SceneRenderTask)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RenderOutputControl"/> class.
            </summary>
            <param name="task">The task. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Invalid task.</exception>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.Enable">
            <summary>
            Enables this output rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.Disable">
            <summary>
            Disables this output rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.CanSkipRendering">
            <summary>
            Performs a check if rendering a current frame can be skipped (if control size is too small, has missing data, etc.).
            </summary>
            <returns>True if skip rendering, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.OnEnd(FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.GPUContext)">
            <summary>
            Called when ask rendering ends.
            </summary>
            <param name="task">The task.</param>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.SyncBackbufferSize">
            <summary>
            Synchronizes size of the back buffer with the size of the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ScrollableControl">
            <summary>
            Base class for container controls that can offset controls in a view (eg. scroll panels).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.ScrollableControl._viewOffset">
            <summary>
            The view offset. Useful to offset contents of the container (used by the scrollbars and drop panels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollableControl.ViewOffset">
            <summary>
            Gets current view offset for all the controls (used by the scroll bars).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.SetViewOffset(FlaxEngine.Vector2@)">
            <summary>
            Sets the view offset.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.OnViewOffsetChanged">
            <summary>
            Called when view offset gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.PointToParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.PointFromParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Style">
            <summary>
            Describes GUI controls style (which fonts and colors use etc.). Defines the default values used by the GUI control.s
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.Current">
            <summary>
            Global GUI style used by all the controls.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.FontTitle">
            <summary>
            The font title.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.FontLarge">
            <summary>
            The font large.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.FontMedium">
            <summary>
            The font medium.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.FontSmall">
            <summary>
            The font small.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.LightBackground">
            <summary>
            The light background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.DragWindow">
            <summary>
            The drag window color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Foreground">
            <summary>
            The foreground color (text).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ForegroundDisabled">
            <summary>
            The foreground disabled (text).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundHighlighted">
            <summary>
            The background highlighted color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderHighlighted">
            <summary>
            The border highlighted color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundSelected">
            <summary>
            The background selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderSelected">
            <summary>
            The border selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundNormal">
            <summary>
            The background normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderNormal">
            <summary>
            The border normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.TextBoxBackground">
            <summary>
            The text box background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.TextBoxBackgroundSelected">
            <summary>
            The text box background selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ProgressNormal">
            <summary>
            The progress normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ArrowRight">
            <summary>
            The arrow right icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ArrowDown">
            <summary>
            The arrow down icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Search">
            <summary>
            The search icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Settings">
            <summary>
            The settings icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Cross">
            <summary>
            The cross icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CheckBoxIntermediate">
            <summary>
            The CheckBox intermediate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CheckBoxTick">
            <summary>
            The CheckBox tick icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.StatusBarSizeGrip">
            <summary>
            The status bar size grip icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Translate">
            <summary>
            The translate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Rotate">
            <summary>
            The rotate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Scale">
            <summary>
            The scale icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.SharedTooltip">
            <summary>
            The shared tooltip control used by the controls if no custom tooltip is provided.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Tooltip">
            <summary>
            The tooltip popup.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Tooltip.TimeToShow">
            <summary>
            Gets or sets the time in seconds that mouse have to be over the target to show the tooltip.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Tooltip"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Rectangle)">
            <summary>
            Shows tooltip over given control.
            </summary>
            <param name="target">The parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
            <param name="targetArea">Tooltip target area of interest.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseEnterControl(FlaxEngine.GUI.Control)">
            <summary>
            Called when mouse enters a control.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseOverControl(FlaxEngine.GUI.Control,System.Single)">
            <summary>
            Called when mouse is over a control.
            </summary>
            <param name="target">The target.</param>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseLeaveControl(FlaxEngine.GUI.Control)">
            <summary>
            Called when mouse leaves a control.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RootControl">
            <summary>
            GUI root control that is represented by a window or an canvas and can contain children but has no parent at all. It's a source of the input events.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.GameRoot">
            <summary>
            Gets the main GUI control (it can be window or editor overriden control). Use it to plug-in custom GUI controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.CanvasRoot">
            <summary>
            Gets the canvas controls root container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.FocusedControl">
            <summary>
            Gets or sets the current focused control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.TrackingMouseOffset">
            <summary>
            Gets the tracking mouse offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.MousePosition">
            <summary>
            Gets or sets the position of the mouse in the window space coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacks">
            <summary>
            The update callbacks collection. Controls can register for this to get the update event for logic handling.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacksToAdd">
            <summary>
            The update callbacks to add before invoking the update.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacksToRemove">
            <summary>
            The update callbacks to remove before invoking the update.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RootControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <summary>
            Starts the mouse tracking. Used by the scrollbars, splitters, etc.
            </summary>
            <param name="control">The target control that want to track mouse. It will receive OnMouseMove event.</param>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.EndTrackingMouse">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKey(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True while the user holds down the key identified by id.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKeyDown(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user starts pressing down the key.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKeyUp(FlaxEngine.Keys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True while the user holds down the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button down state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user starts pressing down the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button up state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.Root">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.WindowRootControl">
            <summary>
            Root control implementation used by the <see cref="T:FlaxEngine.Window"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RootControl" />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Window">
            <summary>
            Gets the native window object.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Title">
            <summary>
            Sets the window title.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsFullscreen">
            <summary>
            Gets a value indicating whether this window is in fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsWindowed">
            <summary>
            Gets a value indicating whether this window is in windowed mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsShown">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsMinimized">
            <summary>
            Gets a value indicating whether this window is minimized.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsMaximized">
            <summary>
            Gets a value indicating whether this window is maximized.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.#ctor(FlaxEngine.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.WindowRootControl"/> class.
            </summary>
            <param name="window">Native window object.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Restore">
            <summary>
            Restores the window state before minimizing or maximizing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">The closing reason.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.BringToFront(System.Boolean)">
            <summary>
            Brings window to the front of the Z order.
            </summary>
            <param name="force">True if move to the front by force, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.FlashWindow">
            <summary>
            Flashes the window to bring use attention.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.FocusedControl">
            <summary>
            Gets or sets the current focused control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Cursor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.TrackingMouseOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.RootWindow">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.MousePosition">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.EndTrackingMouse">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKey(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKeyUp(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.ScreenToClient(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.ClientToScreen(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.DoDragDrop(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Focus(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Assertions.Assert">
            <summary>
            The Assert class contains assertion methods for setting invariants in the code.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.Assert.RaiseExceptions">
            <summary>
            Should an exception be thrown on a failure.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that the condition is false.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that the condition is false.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that the condition is true.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that the condition is true.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.ExceptionExpected(System.Type,System.Action,System.String)">
            <summary>
            Expect action to fail
            </summary>
            <param name="exceptionType">Type of expeption to expect</param>
            <param name="action">Action to expect</param>
            <param name="message">User custom message to display</param>
        </member>
        <member name="T:FlaxEngine.Assertions.AssertionException">
            <summary>
            An exception that is thrown on a failure. Assertions.Assert._raiseExceptions needs to be set to true.
            </summary>
        </member>
        <member name="P:FlaxEngine.Assertions.AssertionException.Message">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="T:FlaxEngine.Assertions.FloatComparer">
            <summary>
            A float comparer used by Assertions.Assert performing approximate comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.FloatComparer.Epsilon">
            <summary>
            Default epsilon used by the comparer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.FloatComparer.ComparerWithDefaultTolerance">
            <summary>
            Default instance of a comparer class with default error epsilon and absolute error check.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor">
            <summary>
            Creates an instance of the comparer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="relative">
            Should a relative check be used when comparing values? By default, an absolute check will be
            used.
            </param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Single)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="error">Allowed comparison error. By default, the FloatComparer.Epsilon is used.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="relative">
            Should a relative check be used when comparing values? By default, an absolute check will be
            used.
            </param>
            <param name="error">Allowed comparison error. By default, the FloatComparer.Epsilon is used.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Performs equality check with absolute error check.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="error">Comparison error.</param>
            <returns>
            Result of the comparison.
            </returns>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.AreEqualRelative(System.Single,System.Single,System.Single)">
            <summary>
            Performs equality check with relative error check.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="error">Comparison error.</param>
            <returns>Result of the comparison.</returns>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.Equals(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.GetHashCode(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.MaterialBase">
            <summary>
            Base class for <see cref="T:FlaxEngine.Material"/> and <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="F:FlaxEngine.MaterialBase._parametersHash">
            <summary>
            Helper value used to keep material parameters collection in sync with actual backend data.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.Info">
            <summary>
            Gets the material info, structure which describes material surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsSurface">
            <summary>
            Gets a value indicating whether this material is a surface shader (can be used with a normal meshes).
            </summary>
            <value>
              <c>true</c> if this material is a surface shader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsPostFx">
            <summary>
            Gets a value indicating whether this material is post fx (cannot be used with a normal meshes).
            </summary>
            <value>
              <c>true</c> if this material is post fx; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsDecal">
            <summary>
            Gets a value indicating whether this material is decal (cannot be used with a normal meshes).
            </summary>
            <value>
              <c>true</c> if this material is decal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsGUI">
            <summary>
            Gets a value indicating whether this material is a GUI shader (cannot be used with a normal meshes).
            </summary>
            <value>
              <c>true</c> if this material is a GUI shader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsTerrain">
            <summary>
            Gets a value indicating whether this material is a terrain shader (cannot be used with a normal meshes).
            </summary>
            <value>
              <c>true</c> if this material is a terrain shader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsParticle">
            <summary>
            Gets a value indicating whether this material is a particle shader (cannot be used with a normal meshes).
            </summary>
            <value>
              <c>true</c> if this material is a particle shader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.MaterialBase.Parameters">
            <summary>
            Gets the material parameters collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialBase.GetParam(System.Int32)">
            <summary>
            Gets the parameter by index.
            </summary>
            <param name="index">The index.</param>
            <returns>The material parameter.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialBase.GetParam(System.String)">
            <summary>
            Gets the parameter by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The material parameter.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialBase.CreateVirtualInstance">
            <summary>
            Creates the virtual material instance of this material which allows to override any material parameters.
            </summary>
            <returns>The created virtual material instance asset.</returns>
        </member>
        <member name="T:FlaxEngine.Shader">
            <summary>
            The shader asset contains a GPU programs called shaders used to draw graphics and visual effects.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="T:FlaxEngine.BrushMode">
            <summary>
            CSG brush mode
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushMode.Additive">
            <summary>
            Brush adds
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushMode.Subtractive">
            <summary>
            Brush subtracts
            </summary>
        </member>
        <member name="T:FlaxEngine.CursorLockMode">
            <summary>
            Hardware mouse cursor behaviour.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorLockMode.None">
            <summary>
            The default mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorLockMode.Locked">
            <summary>
            Cursor position is locked to the center of the game window.
            </summary>
        </member>
        <member name="T:FlaxEngine.MouseButton">
            <summary>
            Mouse buttons types.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Middle">
            <summary>
            Middle button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Extended1">
            <summary>
            Extended button 1 (or XButton1).
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Extended2">
            <summary>
            Extended button 2 (or XButton2).
            </summary>
        </member>
        <member name="T:FlaxEngine.GamePadAxis">
            <summary>
            Axis for gamepad.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.None">
            <summary>
            No axis
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.LeftStickX">
            <summary>
            The X-Axis of the left thumb stick
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.LeftStickY">
            <summary>
            The Y-Axis of the left thumb stick
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.RightStickX">
            <summary>
            The X-Axis of the right thumb stick
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.RightStickY">
            <summary>
            The Y-Axis of the right thumb stick
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.LeftTrigger">
            <summary>
            The left trigger
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadAxis.RightTrigger">
            <summary>
            The right trigger
            </summary>
        </member>
        <member name="T:FlaxEngine.GamePadButton">
            <summary>
            Buttons for gamepad.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.None">
            <summary>
            No buttons.	
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.DPadUp">
            <summary>
            PadUp button. (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.DPadDown">
            <summary>
            PadDown button. (DPad / Directional Pad)
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.DPadLeft">
            <summary>
            PadLeft button. (DPad / Directional Pad)
            </summary>	
        </member>
        <member name="F:FlaxEngine.GamePadButton.DPadRight">
            <summary>
            PadRight button. (DPad / Directional Pad)
            </summary>	
        </member>
        <member name="F:FlaxEngine.GamePadButton.Start">
            <summary>
            Start button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.Back">
            <summary>
            Back button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftThumb">
            <summary>
            Left thumbstick button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightThumb">
            <summary>
            Right thumbstick button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftShoulder">
            <summary>
            Left shoulder button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightShoulder">
            <summary>
            Right shoulder button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftTrigger">
            <summary>
            Left trigger button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightTrigger">
            <summary>
            Right trigger button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.A">
            <summary>
            A button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.B">
            <summary>
            B button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.X">
            <summary>
            X button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.Y">
            <summary>
            Y button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftStickUp">
            <summary>
            The left stick up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftStickDown">
            <summary>
            The left stick down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftStickLeft">
            <summary>
            The left stick left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.LeftStickRight">
            <summary>
            The left stick right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightStickUp">
            <summary>
            The right stick up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightStickDown">
            <summary>
            The right stick down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightStickLeft">
            <summary>
            The right stick left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamePadButton.RightStickRight">
            <summary>
            The right stick right.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputActionMode">
            <summary>
            The input action event trigger modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Pressing">
            <summary>
            User is pressing the key/button.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Press">
            <summary>
            User pressed the key/button (but wasn't pressing it in the previous frame).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Release">
            <summary>
            User released the key/button (was pressing it in the previous frame).
            </summary>
        </member>
        <member name="T:FlaxEngine.InputGamepadIndex">
            <summary>
            The input gamepad index.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.All">
            <summary>
            All detected gamepads.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad0">
            <summary>
            The gamepad no. 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad1">
            <summary>
            The gamepad no. 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad2">
            <summary>
            The gamepad no. 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad3">
            <summary>
            The gamepad no. 3.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad4">
            <summary>
            The gamepad no. 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad5">
            <summary>
            The gamepad no. 5.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputAxisType">
            <summary>
            The input axes types.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseX">
            <summary>
            The mouse X-Axis (mouse delta position scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseY">
            <summary>
            The mouse Y-Axis (mouse delta position scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseWheel">
            <summary>
            The mouse wheel (mouse wheel delta scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftStickX">
            <summary>
            The gamepad X-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftStickY">
            <summary>
            The gamepad Y-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightStickX">
            <summary>
            The gamepad X-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightStickY">
            <summary>
            The gamepad Y-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftTrigger">
            <summary>
            The gamepad left trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightTrigger">
            <summary>
            The gamepad right trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.KeyboardOnly">
            <summary>
            The keyboard only mode. For key inputs.
            </summary>
        </member>
        <member name="T:FlaxEngine.Json.FlaxObjectConverter">
            <summary>
            Serialize references to the FlaxEngine.Object as Guid.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.SceneReferenceConverter">
            <summary>
            Serialize SceneReference as Guid in internal format.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.JsonSerializer">
            <summary>
            Objects serialization tool (json format).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ValueEquals(System.Object,System.Object)">
            <summary>
            The default implementation of the values comparision function used by the serialization system.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="obj">The object type. Can be typeof(object) to handle generic object serialization.</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.SerializeDiff(System.Object,System.Object)">
            <summary>
            Serializes the specified object difference to the other object of the same type. Used to serialize modified properties of the object during prefab instance serialization.
            </summary>
            <param name="obj">The object.</param>
            <param name="other">The reference object.</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.Object,System.String)">
            <summary>
            Deserializes the specified object (from the input json data).
            </summary>
            <param name="input">The object.</param>
            <param name="json">The input json data.</param>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified .NET object type (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified .NET object type (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the .NET object (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.Object,System.Void*,System.Int32)">
            <summary>
            Deserializes the specified object (from the input json data).
            </summary>
            <param name="input">The object.</param>
            <param name="jsonBuffer">The input json data buffer (raw, fixed memory buffer).</param>
            <param name="jsonLength">The input json data buffer length (characters count).</param>
        </member>
        <member name="T:FlaxEngine.Json.JsonSerializer.GuidInterop">
            <summary>
            Guid type in Flax format (the same as C++ layer).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(System.Guid)">
            <summary>
            Gets the string representation of the given object ID. It matches the internal serialization formatting rules.
            </summary>
            <param name="id">The object identifier.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(System.Guid*)">
            <summary>
            Gets the string representation of the given object ID. It matches the internal serialization formatting rules.
            </summary>
            <param name="id">The object identifier.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(FlaxEngine.Object)">
            <summary>
            Gets the string representation of the given object. It matches the internal serialization formatting rules.
            </summary>
            <param name="obj">The object.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ParseID(System.String,System.Guid@)">
            <summary>
            Parses the given object identifier represented in the internal serialization format.
            </summary>
            <param name="str">The ID string.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:FlaxEngine.Json.JsonCustomSerializers.ExtendedDefaultContractResolver.CreateContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.UnmanagedStringReader">
            <summary>
            Implements a <see cref="T:System.IO.TextReader" /> that reads from unmanaged UTF8 string buffer (provided as raw pointer and length).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Json.UnmanagedStringReader"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Json.UnmanagedStringReader"/> class.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Initialize(System.Void*,System.Int32)">
            <summary>
            Initializes the reader with the specified text buffer.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Initialize(System.IntPtr,System.Int32)">
            <summary>
            Initializes the reader with the specified text buffer.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Peek">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Read">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Empty">
            <summary>
            A <see cref="T:FlaxEngine.BoundingBox"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Zero">
            <summary>
            A <see cref="T:FlaxEngine.BoundingBox"/> which is located in point (0, 0, 0) and has size equal (0, 0, 0).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingBox.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:FlaxEngine.BoundingBox.Center">
            <summary>
            Gets or sets the center point location.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoundingBox" /> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.Vector3)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingBox)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingSphere)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromPoints(FlaxEngine.Vector3[],FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromPoints(FlaxEngine.Vector3[])">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromSphere(FlaxEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Merge(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Merge(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Transform(FlaxEngine.BoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Transform(FlaxEngine.BoundingBox@,FlaxEngine.Matrix@,FlaxEngine.BoundingBox@)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <param name="result">The result of the transformation.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Multiply(FlaxEngine.BoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Equality(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Inequality(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(FlaxEngine.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.BoundingFrustum">
            <summary>
            Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations,
            (matrix, frustum, camera) interchange, and many kind of intersection testing.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.#ctor(FlaxEngine.Matrix)">
            <summary>
            Creates a new instance of BoundingFrustum.
            </summary>
            <param name="matrix">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(FlaxEngine.BoundingFrustum@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.BoundingFrustum" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(FlaxEngine.BoundingFrustum)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.BoundingFrustum" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.op_Equality(FlaxEngine.BoundingFrustum,FlaxEngine.BoundingFrustum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.op_Inequality(FlaxEngine.BoundingFrustum,FlaxEngine.BoundingFrustum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetPlane(System.Int32)">
            <summary>
            Returns one of the 6 planes related to this frustum.
            </summary>
            <param name="index">Plane index where 0 fro Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.FromCamera(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraPos">The camera pos.</param>
            <param name="lookDir">The look dir.</param>
            <param name="upDir">Up dir.</param>
            <param name="fov">The fov.</param>
            <param name="znear">The znear.</param>
            <param name="zfar">The zfar.</param>
            <param name="aspect">The aspect.</param>
            <returns>The bounding frustum calculated from perspective camera</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetCorners">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3@)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3[])">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum
            (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3[],FlaxEngine.ContainmentType@)">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum
            (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox@,FlaxEngine.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere@,FlaxEngine.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum@,System.Boolean@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <param name="result"><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Plane@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>Plane intersection type.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Plane@,FlaxEngine.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">Plane intersection type.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetWidthAtDepth(System.Single)">
            <summary>
            Get the width of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum width.</param>
            <returns>With of the frustum at the specified depth</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetHeightAtDepth(System.Single)">
            <summary>
            Get the height of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum height.</param>
            <returns>Height of the frustum at the specified depth</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Ray@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="inDistance">
            The distance at which the ray enters the frustum if there is an intersection and the ray
            starts outside the frustum.
            </param>
            <param name="outDistance">The distance at which the ray exits the frustum if there is an intersection.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftDistance(FlaxEngine.Vector3[])">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents
            (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftDistance(FlaxEngine.BoundingBox@)">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents
            (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftVector(FlaxEngine.Vector3[])">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit)
            operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftVector(FlaxEngine.BoundingBox@)">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit)
            operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.IsOrthographic">
            <summary>
            Indicate whether the current BoundingFrustum is Orthographic.
            </summary>
            <value>
            <c>true</c> if the current BoundingFrustum is Orthographic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:FlaxEngine.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Empty">
            <summary>
            A <see cref="T:FlaxEngine.BoundingSphere"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoundingBox" /> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[],System.Int32,System.Int32,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="start">The start index from points array to start compute the bounding sphere.</param>
            <param name="count">The count of points to process to compute the bounding sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            start
            or
            count
            </exception>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[],FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[])">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromBox(FlaxEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Merge(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that is the as large as the total combined area of the two specified
            spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Merge(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that is the as large as the total combined area of the two specified
            spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.op_Equality(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.op_Inequality(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(FlaxEngine.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.PhysicsActor">
            <summary>
            The hidden class used in the Engine.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsColliderActor">
            <summary>
            The hidden class used in the Engine.
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelInstanceActor">
            <summary>
            The hidden class used in the Engine.
            </summary>
        </member>
        <member name="M:FlaxEngine.ClassLibraryInitializer.Init(System.Int32,FlaxEngine.PlatformType)">
            <summary>
            Initializes Flax API. Called before everything else from native code.
            </summary>
            <param name="flags">The packed flags with small meta for the API.</param>
            <param name="platform">The runtime platform.</param>
        </member>
        <member name="M:FlaxEngine.ClassLibraryInitializer.SetWindow(FlaxEngine.Window)">
            <summary>
            Sets the managed window as a main game window. Called after creating game window by the native code.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:FlaxEngine.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:FlaxEngine.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionsHelper">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines the closest point between a point and a line.
            </summary>
            <param name="point">The point to test.</param>
            <param name="p0">The line first point.</param>
            <param name="p1">The line second point.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointTriangle(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPlanePoint(FlaxEngine.Plane@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointBoxPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingBox" /> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointRectanglePoint(FlaxEngine.Rectangle@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.Rectangle" /> and a point.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointSpherePoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingSphere" /> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">
            When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:FlaxEngine.Vector3.Zero" />.
            </param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointSphereSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingSphere" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">
            When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:FlaxEngine.Vector3.Zero" />.
            </param>
            <remarks>
            If the two spheres are overlapping, but not directly on top of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistancePlanePoint(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceBoxPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingBox" /> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceBoxBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceSpherePoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingSphere" /> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceSphereSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingSphere" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPoint(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsRay(FlaxEngine.Ray@,FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPlane(FlaxEngine.Ray@,FlaxEngine.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPlane(FlaxEngine.Ray@,FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsTriangle(FlaxEngine.Ray@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsTriangle(FlaxEngine.Ray@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsBox(FlaxEngine.Ray@,FlaxEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsBox(FlaxEngine.Ray@,FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsSphere(FlaxEngine.Ray@,FlaxEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsSphere(FlaxEngine.Ray@,FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPoint(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPlane(FlaxEngine.Plane@,FlaxEngine.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPlane(FlaxEngine.Plane@,FlaxEngine.Plane@,FlaxEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">
            When the method completes, contains the line of intersection
            as a <see cref="T:FlaxEngine.Ray" />, or a zero ray if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsTriangle(FlaxEngine.Plane@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsBox(FlaxEngine.Plane@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsSphere(FlaxEngine.Plane@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxIntersectsBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxIntersectsSphere(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereIntersectsTriangle(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingSphere" /> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereIntersectsSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingSphere" /> and a
            <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsSphere(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsPoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsTriangle(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsBox(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.LineIntersectsLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether a line intersects with the other line.
            </summary>
            <param name="l1p1">The first line point 0.</param>
            <param name="l1p2">The first line point 1.</param>
            <param name="l2p1">The second line point 0.</param>
            <param name="l2p2">The second line point 1.</param>
            <returns>True if line intersects with the other line</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.LineIntersectsRect(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Determines whether a line intersects with the rectangle.
            </summary>
            <param name="p1">The line point 0.</param>
            <param name="p2">The line point 1.</param>
            <param name="rect">The rectangle.</param>
            <returns>True if line intersects with the rectangle</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.IsPointInTriangle(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether the given 2D point is inside the specified triangle.
            </summary>
            <param name="point">The point to check.</param>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <returns><c>true</c> if point is inside the triangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Color">
            <summary>
            Representation of RGBA colors.
            </summary>
            <summary>
            List of predefined <see cref="T:FlaxEngine.Color"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Color" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.R">
            <summary>
            Red component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.G">
            <summary>
            Green component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.B">
            <summary>
            Blue component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.A">
            <summary>
            Alpha component of the color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Color.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:FlaxEngine.Color.MinColorComponent">
            <summary>
            Returns the minimum color component value: Min(r,g,b).
            </summary>
        </member>
        <member name="P:FlaxEngine.Color.MaxColorComponent">
            <summary>
            Returns the maximum color component value: Max(r,g,b).
            </summary>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single)">
            <summary>
            Constructs a new Color with given r,g,b,a component.
            </summary>
            <param name="rgba">RGBA component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;1]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;255]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;255]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color with given r,g,b components and sets alpha to 1.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:FlaxEngine.Color.AlphaMultiplied(System.Single)">
            <summary>
            Duplicates color with multiplied alpha channel value.
            </summary>
            <param name="multiplier">The alpha channel multiplier.</param>
            <returns>The color with scaled alpha.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Color.Equals(FlaxEngine.Color@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Color" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Color" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Color" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Color.FromRGB(System.UInt32,System.Single)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the RGB value and separate alpha channel.
            </summary>
            <param name="rgb">The packed RGB value.</param>
            <param name="a">The alpha channel value.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToHexString">
            <summary>
            Gets the color value as the hexadecimal string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Color.ParseHex(System.String)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the hexadecimal string.
            </summary>
            <param name="hexString">The hexadecimal string.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.TryParseHex(System.String,FlaxEngine.Color@)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the hexadecimal string.
            </summary>
            <param name="hexString">The hexadecimal string.</param>
            <param name="value">Output value.</param>
            <returns>True if value has benn parsed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToBgra(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToSRgb">
            <summary>
            Converts this color from linear space to sRGB space.
            </summary>
            <returns>A color3 in sRGB space.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToLinear">
            <summary>
            Converts this color from sRGB space to linear space.
            </summary>
            <returns>A Color in linear space.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromHSV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates RGB color from Hue[0-360], Saturation[0-1] and Value[0-1].
            </summary>
            <param name="hue">The hue angle in degrees [0-360].</param>
            <param name="saturation">The saturation normalized [0-1].</param>
            <param name="value">The value normalized [0-1].</param>
            <param name="alpha">The alpha value. Default is 1.</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromHSV(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates RGB color from Hue[0-360], Saturation[0-1] and Value[0-1] paked to XYZ vector.
            </summary>
            <param name="hsv">The HSV color.</param>
            <param name="alpha">The alpha value. Default is 1.</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Lerp(FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
        </member>
        <member name="M:FlaxEngine.Color.Lerp(FlaxEngine.Color@,FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
            <param name="t">Result</param>
        </member>
        <member name="M:FlaxEngine.Color.LerpUnclamped(FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Color.op_Addition(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Division(FlaxEngine.Color,System.Single)">
            <summary>
            Divides color by the scale factor.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The division factor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Equality(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Compares two colors.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if colors are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Inequality(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Compares two colors.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if colors are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Color)~FlaxEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Vector3"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Color)~FlaxEngine.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Vector4"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Vector4)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Vector3)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Multiplies color components by the other color components.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(FlaxEngine.Color,System.Single)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="a">The color.</param>
            <param name="b">The scale.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(System.Single,FlaxEngine.Color)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="b">The scale.</param>
            <param name="a">The color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Subtraction(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Subtracts one color from the another.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBMultiplied(System.Single)">
            <summary>
            Returns the color with RGB channels multiplied by the given scale factor. The alpha channels remains the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBMultiplied(FlaxEngine.Color)">
            <summary>
            Returns the color with RGB channels multiplied by the given color. The alpha channels remains the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToHSV">
            <summary>
            Converts the color to HSV color space (returned as vector).
            </summary>
            <returns>The HSV color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBToHSV(FlaxEngine.Color,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert color from the RGB color space to HSV color space.
            </summary>
            <param name="rgbColor">Color of the RGB.</param>
            <param name="h">The output Hue.</param>
            <param name="s">The output Saturation.</param>
            <param name="v">The output Value.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustContrast(FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustContrast(FlaxEngine.Color,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.AdjustSaturation(FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustSaturation(FlaxEngine.Color,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.PremultiplyAlpha(FlaxEngine.Color)">
            <summary>
            Premultiplies the color components by the alpha value.
            </summary>
            <param name="value">The color to premultiply.</param>
            <returns>A color with premultiplied alpha.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToString">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color.ToString(System.String)">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
            <param name="format"></param>
        </member>
        <member name="F:FlaxEngine.Color.Zero">
            <summary>
            Zero color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.AliceBlue">
            <summary>
            AliceBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BlueViolet">
            <summary>
            BlueViolet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BurlyWood">
            <summary>
            BurlyWood color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.CadetBlue">
            <summary>
            CadetBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkBlue">
            <summary>
            DarkBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkCyan">
            <summary>
            DarkCyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGray">
            <summary>
            DarkGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGreen">
            <summary>
            DarkGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkKhaki">
            <summary>
            DarkKhaki color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkMagenta">
            <summary>
            DarkMagenta color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOrange">
            <summary>
            DarkOrange color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOrchid">
            <summary>
            DarkOrchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkRed">
            <summary>
            DarkRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSalmon">
            <summary>
            DarkSalmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkViolet">
            <summary>
            DarkViolet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DeepPink">
            <summary>
            DeepPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DimGray">
            <summary>
            DimGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DodgerBlue">
            <summary>
            DodgerBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.FloralWhite">
            <summary>
            FloralWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.ForestGreen">
            <summary>
            ForestGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.GhostWhite">
            <summary>
            GhostWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.GreenYellow">
            <summary>
            GreenYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.HotPink">
            <summary>
            HotPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.IndianRed">
            <summary>
            IndianRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LavenderBlush">
            <summary>
            LavenderBlush color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LawnGreen">
            <summary>
            LawnGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LemonChiffon">
            <summary>
            LemonChiffon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightBlue">
            <summary>
            LightBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightCoral">
            <summary>
            LightCoral color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightCyan">
            <summary>
            LightCyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGray">
            <summary>
            LightGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGreen">
            <summary>
            LightGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightPink">
            <summary>
            LightPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSalmon">
            <summary>
            LightSalmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSlateGray">
            <summary>
            LightSlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightYellow">
            <summary>
            LightYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LimeGreen">
            <summary>
            LimeGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumBlue">
            <summary>
            MediumBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumOrchid">
            <summary>
            MediumOrchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumPurple">
            <summary>
            MediumPurple color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MidnightBlue">
            <summary>
            MidnightBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MintCream">
            <summary>
            MintCream color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MistyRose">
            <summary>
            MistyRose color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Moccasin">
            <summary>
            Moccasin color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.NavajoWhite">
            <summary>
            NavajoWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Navy">
            <summary>
            Navy color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OldLace">
            <summary>
            OldLace color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Olive">
            <summary>
            Olive color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OliveDrab">
            <summary>
            OliveDrab color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OrangeRed">
            <summary>
            OrangeRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Orchid">
            <summary>
            Orchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleGreen">
            <summary>
            PaleGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PapayaWhip">
            <summary>
            PapayaWhip color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PeachPuff">
            <summary>
            PeachPuff color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PowderBlue">
            <summary>
            PowderBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.RosyBrown">
            <summary>
            RosyBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.RoyalBlue">
            <summary>
            RoyalBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SaddleBrown">
            <summary>
            SaddleBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SandyBrown">
            <summary>
            SandyBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SeaGreen">
            <summary>
            SeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SeaShell">
            <summary>
            SeaShell color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SkyBlue">
            <summary>
            SkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SlateBlue">
            <summary>
            SlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SlateGray">
            <summary>
            SlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SpringGreen">
            <summary>
            SpringGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SteelBlue">
            <summary>
            SteelBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.YellowGreen">
            <summary>
            YellowGreen color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Color32">
            <summary>
            Representation of RGBA colors in 32 bit format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Color32" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.Transparent">
            <summary>
            The transparent color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.White">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.R">
            <summary>
            Red component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.G">
            <summary>
            Green component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.B">
            <summary>
            Blue component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.A">
            <summary>
            Alpha component of the color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color32 with given r, g, b, a components.
            </summary>
            <param name="r">The red component value.</param>
            <param name="g">The green component value.</param>
            <param name="b">The blue component value.</param>
            <param name="a">The alpha component value.</param>
        </member>
        <member name="M:FlaxEngine.Color32.Lerp(FlaxEngine.Color32,FlaxEngine.Color32,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Color32.LerpUnclamped(FlaxEngine.Color32,FlaxEngine.Color32,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Color32.op_Implicit(FlaxEngine.Color)~FlaxEngine.Color32">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Color32"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Implicit(FlaxEngine.Color32)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color32"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Explicit(FlaxEngine.Color32)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Color32"/> to <see cref="T:FlaxEngine.Vector4"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.ToString">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color32.ToString(System.String)">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:FlaxEngine.Debug">
            <summary>
            Class containing methods to ease debugging while developing a game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Debug.Logger">
            <summary>
            Get default debug logger.
            </summary>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.String)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="message">String to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.Object,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.String,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">String to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.AssertFormat(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.AssertFormat(System.Boolean,FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Write(FlaxEngine.LogType,System.String)">
            <summary>
            Logs the raw message to the log.
            </summary>
            <param name="logType">Type of the log message. Not: fatal will stop the engine. Error may show a message popup.</param>
            <param name="message">The message contents.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Log(System.Object)">
            <summary>
            Logs message to the Flax Console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Log(System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertion(System.Object)">
            <summary>
            A variant of Debug.Log that logs an assertion message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertion(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Log that logs an assertion message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertionFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted assertion message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertionFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted assertion message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogError(System.Object)">
            <summary>
            A variant of Debug.Log that logs an error message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogError(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Log that logs an error message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted error message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogErrorFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted error message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogException(System.Exception)">
            <summary>
            A variant of Debug.Log that logs an error message to the console.
            </summary>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Log that logs an error message to the console.
            </summary>
            <param name="context">Object to which the message applies.</param>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarning(System.Object)">
            <summary>
            A variant of Debug.Log that logs a warning message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarning(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Log that logs a warning message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarningFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted warning message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarningFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="E:FlaxEngine.DebugLogHandler.SendLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="E:FlaxEngine.DebugLogHandler.SendExceptionLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.LogWrite(FlaxEngine.LogType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.LogException(System.Exception,FlaxEngine.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.ExecuteInEditModeAttribute">
            <summary>
            Makes a script execute in edit mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.HideInEditorAttribute">
            <summary>
            Makes a variable not show up in the editor.
            </summary>
        </member>
        <member name="T:FlaxEngine.LogDelegate">
            <summary>
            Log message delegate.
            </summary>
            <param name="level">The log level.</param>
            <param name="msg">The message.</param>
            <param name="obj">The object.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="T:FlaxEngine.LogExceptionDelegate">
            <summary>
            Log exception delegate.
            </summary>
            <param name="exception">The exception.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:FlaxEngine.ILogger">
            <summary>
            Logger interface.
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.FilterLogType">
            <summary>
            <para>To selective enable debug log message.</para>
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.LogEnabled">
            <summary>
            <para>To runtime toggle debug logging [ON/OFF].</para>
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.LogHandler">
            <summary>
            <para>Set Logger.ILogHandler.</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.ILogger.IsLogTypeAllowed(FlaxEngine.LogType)">
            <summary>
            <para>Check logging is enabled based on the LogType.</para>
            </summary>
            <param name="logType"></param>
            <returns>
            <para>Return true in case logs of LogType will be logged otherwise returns false.</para>
            </returns>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.String,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="context"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.String,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogError(System.String,System.Object)">
            <summary>
            <para>A variant of ILogger.Log that logs an error message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogError(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogger.Log that logs an error message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogException(System.Exception)">
            <summary>
            <para>A variant of ILogger.Log that logs an exception message.</para>
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogFormat(FlaxEngine.LogType,System.String,System.Object[])">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogWarning(System.String,System.Object)">
            <summary>
            <para>A variant of Logger.Log that logs an warning message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogWarning(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>A variant of Logger.Log that logs an warning message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:FlaxEngine.ILogHandler">
            <summary>
            Logs handler.
            </summary>
        </member>
        <member name="E:FlaxEngine.ILogHandler.SendLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="E:FlaxEngine.ILogHandler.SendExceptionLog">
            <summary>
            Occurs on sending a exception log message.
            </summary>
        </member>
        <member name="M:FlaxEngine.ILogHandler.LogWrite(FlaxEngine.LogType,System.String)">
            <summary>
            Logs the raw message to the log.
            </summary>
            <param name="logType">Type of the log message. Not: fatal will stop the engine. Error may show a message popup.</param>
            <param name="message">The message contents.</param>
        </member>
        <member name="M:FlaxEngine.ILogHandler.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.ILogHandler.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:FlaxEngine.Logger">
            <summary>
            Initializes a new instance of the Logger.
            </summary>
        </member>
        <member name="M:FlaxEngine.Logger.#ctor(FlaxEngine.ILogHandler)">
            <summary>
            Create a custom Logger.
            </summary>
            <param name="logHandler">Pass in default log handler or custom log handler.</param>
        </member>
        <member name="P:FlaxEngine.Logger.FilterLogType">
            <summary>
            To selective enable debug log message.
            </summary>
        </member>
        <member name="P:FlaxEngine.Logger.LogEnabled">
            <summary>
            To runtime toggle debug logging [ON/OFF].
            </summary>
        </member>
        <member name="P:FlaxEngine.Logger.LogHandler">
            <summary>
            Set  Logger.ILogHandler.
            </summary>
        </member>
        <member name="M:FlaxEngine.Logger.IsLogTypeAllowed(FlaxEngine.LogType)">
            <summary>
            Check logging is enabled based on the LogType.
            </summary>
            <param name="logType">The type of the log message.</param>
            <returns>
            Return true in case logs of LogType will be logged otherwise returns false.
            </returns>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.String,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogError(System.String,System.Object)">
            <summary>
            A variant of Logger.Log that logs an error message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogError(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Log that logs an error message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogException(System.Exception)">
            <summary>
            A variant of Logger.Log that logs an exception message.
            </summary>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Log that logs an exception message.
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Logger.LogFormat(FlaxEngine.LogType,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object[])">
            <summary>
            Logs a formatted message.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted message.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogWarning(System.String,System.Object)">
            <summary>
            A variant of Logger.Log that logs an warning message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogWarning(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Log that logs an warning message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="T:FlaxEngine.LogType">
            <summary>
            The type of the log message in <see cref="T:FlaxEngine.Debug"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Error">
            <summary>
            LogType used for Errors.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Assert">
            <summary>
            LogType used for Asserts. (These could also indicate an error inside Flax itself.)
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Warning">
            <summary>
            LogType used for Warnings.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Log">
            <summary>
            LogType used for regular log messages.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Exception">
            <summary>
            LogType used for Exceptions.
            </summary>
        </member>
        <member name="T:FlaxEngine.ColorHSV">
            <summary>
            Represents a color in the form of Hue, Saturation, Value, Alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.H">
            <summary>
            The Hue of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.S">
            <summary>
            The Saturation of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.V">
            <summary>
            The Value of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:FlaxEngine.ColorHSV.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ColorHSV"/> struct.
            </summary>
            <param name="h">The hue.</param>
            <param name="s">The saturation.</param>
            <param name="v">The value.</param>
            <param name="a">The alpha.</param>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToColor">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.FromColor(FlaxEngine.Color)">
            <summary>
            Converts the color into a HSV color.
            </summary>
            <param name="color">The color.</param>
            <returns>A HSV color</returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.Equals(FlaxEngine.ColorHSV)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:FlaxEngine.FloatR10G10B10A2">
            <summary>
            Packed vector, layout: R:10 bytes, G:10 bytes, B:10 bytes, A:2 bytes, all values are stored as floats in range [0;1]
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name="x">The floating point value that should be stored in R component (10 bit format).</param>
            <param name="y">The floating point value that should be stored in G component (10 bit format).</param>
            <param name="z">The floating point value that should be stored in B component (10 bit format).</param>
            <param name="w">The floating point value that should be stored in A component (2 bit format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name="value">The floating point value that should be stored in 10 bit format.</param>
            <param name="w">The floating point value that should be stored in alpha component (2 bit format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 10 bit format.</param>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.RawValue">
            <summary>
            Gets or sets the raw 32 bit value used to back this vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.R">
            <summary>
            Gets the R component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.G">
            <summary>
            Gets the G component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.B">
            <summary>
            Gets the B component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.A">
            <summary>
            Gets the A component.
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.FloatR10G10B10A2">
            <summary>
            Performs an explicit conversion from <see cref = "T:FlaxEngine.Vector4" /> to <see cref = "T:FlaxEngine.FloatR10G10B10A2" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Implicit(FlaxEngine.FloatR10G10B10A2)~FlaxEngine.Vector4">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> to <see cref = "T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Equality(FlaxEngine.FloatR10G10B10A2,FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Inequality(FlaxEngine.FloatR10G10B10A2,FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(FlaxEngine.FloatR10G10B10A2@,FlaxEngine.FloatR10G10B10A2@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns><c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToVector3">
            <summary>
            Unpacks vector to Vector3.
            </summary>
            <returns>Vector3 value</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToVector4">
            <summary>
            Unpacks vector to Vector4.
            </summary>
            <returns>Vector4 value</returns>
        </member>
        <member name="T:FlaxEngine.FloatR11G11B10">
            <summary>
            Packed vector, layout: R:11 bytes, G:11 bytes, B:10 bytes.
            The 3D vector is packed into 32 bits as follows: a 5-bit biased exponent
            and 6-bit mantissa for x component, a 5-bit biased exponent and
            6-bit mantissa for y component, a 5-bit biased exponent and a 5-bit
            mantissa for z. The z component is stored in the most significant bits
            and the x component in the least significant bits. No sign bits so
            all partial-precision numbers are positive.
            (Z10Y11X11): [32] ZZZZZzzz zzzYYYYY yyyyyyXX XXXxxxxx [0]
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR11G11B10" /> structure.
            </summary>
            <param name="x">The floating point value that should be stored in R component (11 bits format).</param>
            <param name="y">The floating point value that should be stored in G component (11 bits format).</param>
            <param name="z">The floating point value that should be stored in B component (10 bits format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.#ctor(FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR11G11B10" /> structure.
            </summary>
            <param name="value">The floating point value that should be stored in compressed format.</param>
        </member>
        <member name="P:FlaxEngine.FloatR11G11B10.RawValue">
            <summary>
            Gets or sets the raw 32 bit value used to back this vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.FloatR11G11B10">
            <summary>
            Performs an explicit conversion from <see cref = "T:FlaxEngine.Vector4" /> to <see cref = "T:FlaxEngine.FloatR11G11B10" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Implicit(FlaxEngine.FloatR11G11B10)~FlaxEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.FloatR11G11B10" /> to <see cref = "T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Equality(FlaxEngine.FloatR11G11B10,FlaxEngine.FloatR11G11B10)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Inequality(FlaxEngine.FloatR11G11B10,FlaxEngine.FloatR11G11B10)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(FlaxEngine.FloatR11G11B10@,FlaxEngine.FloatR11G11B10@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
              <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
              if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(FlaxEngine.FloatR11G11B10)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.ToVector3">
            <summary>
            Unpacks vector to Vector3.
            </summary>
            <returns>Vector3 value</returns>
        </member>
        <member name="T:FlaxEngine.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.PrecisionDigits">
            <summary>
              Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MantissaBits">
            <summary>
              Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaximumDecimalExponent">
            <summary>
              Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaximumBinaryExponent">
            <summary>
              Maximum binary exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinimumDecimalExponent">
            <summary>
              Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinimumBinaryExponent">
            <summary>
              Minimum binary exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.ExponentRadix">
            <summary>
              Exponent radix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.AdditionRounding">
            <summary>
              Additional rounding.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.Epsilon">
            <summary>
              Smallest such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaxValue">
            <summary>
              Maximum value of the number.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinValue">
            <summary>
              Minimum value of the number.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Half"/> whose value is 0.0f.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.One">
            <summary>
            A <see cref="T:FlaxEngine.Half"/> whose value is 1.0f.
            </summary>
        </member>
        <member name="M:FlaxEngine.Half.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref = "T:FlaxEngine.Half" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="P:FlaxEngine.Half.RawValue">
            <summary>
              Gets or sets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="M:FlaxEngine.Half.ConvertToFloat(FlaxEngine.Half[])">
            <summary>
              Converts an array of half precision values into full precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:FlaxEngine.Half.ConvertToHalf(System.Single[])">
            <summary>
              Converts an array of full precision values into half precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Explicit(System.Single)~FlaxEngine.Half">
            <summary>
              Performs an explicit conversion from <see cref = "T:System.Single" /> to <see cref = "T:FlaxEngine.Half" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Implicit(FlaxEngine.Half)~System.Single">
            <summary>
              Performs an implicit conversion from <see cref = "T:FlaxEngine.Half" /> to <see cref = "T:System.Single" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Equality(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
              Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Inequality(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
              Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.ToString">
            <summary>
              Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Half.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(FlaxEngine.Half@,FlaxEngine.Half@)">
            <summary>
              Determines whether the specified object instances are considered equal.
            </summary>
            <param name = "value1" />
            <param name = "value2" />
            <returns>
              <c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or 
              if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(FlaxEngine.Half)">
            <summary>
              Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns>
              <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(System.Object)">
            <summary>
              Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name = "obj">Object to make the comparison with.</param>
            <returns>
              <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Half2.op_Equality(FlaxEngine.Half2,FlaxEngine.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Inequality(FlaxEngine.Half2,FlaxEngine.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(FlaxEngine.Half2@,FlaxEngine.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(FlaxEngine.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Half2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Explicit(FlaxEngine.Half2)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:FlaxEngine.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Half3.op_Equality(FlaxEngine.Half3,FlaxEngine.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Inequality(FlaxEngine.Half3,FlaxEngine.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(FlaxEngine.Half3@,FlaxEngine.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(FlaxEngine.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Half3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Explicit(FlaxEngine.Half3)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half4.#ctor(FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:FlaxEngine.Half4.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half4" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:FlaxEngine.Half4.op_Equality(FlaxEngine.Half4,FlaxEngine.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Inequality(FlaxEngine.Half4,FlaxEngine.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(FlaxEngine.Half4@,FlaxEngine.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(FlaxEngine.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Explicit(FlaxEngine.Half4)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.HalfUtils">
            <summary>
            Helper class to perform Half/Float conversion.
            Code extract from paper : www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf by Jeroen van der Zijp
            </summary>
        </member>
        <member name="M:FlaxEngine.HalfUtils.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified half value.
            </summary>
            <param name="h">The half value.</param>
            <returns>The float value</returns>
        </member>
        <member name="M:FlaxEngine.HalfUtils.Pack(System.Single)">
            <summary>
            Packs the specified float value.
            </summary>
            <param name="f">The float value.</param>
            <returns>The half value</returns>
        </member>
        <member name="T:FlaxEngine.Int2">
            <summary>
            Represents a two dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int2" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int2" /> (1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int2" /> (0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.One">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(FlaxEngine.Int3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(FlaxEngine.Int4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X and Y components of the vector. This must be an array with two
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than two
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 1].
            </exception>
        </member>
        <member name="P:FlaxEngine.Int2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Int2.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Int2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Int2.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2@,System.Int32@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2@,System.Int32@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(System.Int32@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,System.Int32,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(FlaxEngine.Int2@,System.Int32,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(System.Int32,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Negate(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Negate(FlaxEngine.Int2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Clamp(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Clamp(FlaxEngine.Int2,FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Distance(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.Distance(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2,FlaxEngine.Int2)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.Dot(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Dot(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Max(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int2.Max(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Min(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int2.Min(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Abs(FlaxEngine.Int2)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_UnaryPlus(FlaxEngine.Int2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_UnaryNegation(FlaxEngine.Int2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(FlaxEngine.Int2,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(System.Single,FlaxEngine.Int2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Equality(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Inequality(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Int3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Int3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Int3">
            <summary>
            Represents a three dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Int3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.One">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(FlaxEngine.Int2,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(FlaxEngine.Int4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, and Z components of the vector. This must be an array with three
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than three elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for
            the Z component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 2].
            </exception>
        </member>
        <member name="P:FlaxEngine.Int3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Int3.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Int3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Int3.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3@,System.Int32@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3@,System.Int32@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(System.Int32@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,System.Int32,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <param name="result">When the method completes, contains the divided vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Divies a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3@,System.Int32,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(System.Int32,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Negate(FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Negate(FlaxEngine.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Clamp(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Clamp(FlaxEngine.Int3,FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Distance(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Int32@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.Distance(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3,FlaxEngine.Int3)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2D(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2D(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors in the XZ plane.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2DSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2DSquared(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the squared distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors in the XZ plane.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Max(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int3.Max(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Min(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int3.Min(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Abs(FlaxEngine.Int3)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_UnaryPlus(FlaxEngine.Int3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_UnaryNegation(FlaxEngine.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(FlaxEngine.Int3,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(System.Single,FlaxEngine.Int3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Equality(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Inequality(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Int2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Int2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(FlaxEngine.Int3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(FlaxEngine.Int3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Int4">
            <summary>
            Represents a four dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Int4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitW">
            <summary>
            The W unit <see cref="T:FlaxEngine.Int4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.One">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(FlaxEngine.Int3,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(FlaxEngine.Int2,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Int4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4@,System.Int32@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4@,System.Int32@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(System.Int32@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,System.Int32,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(FlaxEngine.Int4@,System.Int32,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(System.Int32,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Negate(FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Negate(FlaxEngine.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Clamp(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Clamp(FlaxEngine.Int4,FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Max(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int4.Max(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Min(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int4.Min(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Abs(FlaxEngine.Int4)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_UnaryPlus(FlaxEngine.Int4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_UnaryNegation(FlaxEngine.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(FlaxEngine.Int4,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(System.Single,FlaxEngine.Int4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Equality(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Inequality(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Int2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Int2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Int3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Int3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(FlaxEngine.Int4@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(FlaxEngine.Int4)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Mathf">
            <summary>
            A collection of common math functions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Epsilon">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Infinity">
            <summary>
            A representation of positive infinity (Read Only).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.NegativeInfinity">
            <summary>
            A representation of negative infinity (Read Only).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Deg2Rad">
            <summary>
            Degrees-to-radians conversion constant (Read Only).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Rad2Deg">
            <summary>
            Radians-to-degrees conversion constant (Read Only).
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.Abs(System.Single)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Abs(System.Int32)">
            <summary>
            Returns the absolute value of value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Acos(System.Single)">
            <summary>
            Returns the arc-cosine of f - the angle in radians whose cosine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Approximately(System.Single,System.Single)">
            <summary>
            Compares two floating point values if they are similar.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Asin(System.Single)">
            <summary>
            Returns the arc-sine of f - the angle in radians whose sine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Atan(System.Single)">
            <summary>
            Returns the arc-tangent of f - the angle in radians whose tangent is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle in radians whose Tan is y/x.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Ceil(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.CeilToInt(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Saturate(System.Single)">
            <summary>
            Clamps value between 0 and 1 and returns value.
            </summary>
            <param name="value">Value to clamp</param>
            <returns>Result value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Cos(System.Single)">
            <summary>
            Returns the cosine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.DeltaAngle(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between two given angles given in degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Floor(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.FloorToInt(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.LerpUnclamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log(System.Single)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log10(System.Single)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Single,System.Single)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Double,System.Double)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int64,System.Int64)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.UInt64,System.UInt64)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Single[])">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int32,System.Int32)">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int32[])">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Single,System.Single)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Double,System.Double)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.UInt64,System.UInt64)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Single[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int32[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves a value current towards target.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.PingPong(System.Single,System.Single)">
            <summary>
            PingPongs the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Pow(System.Single,System.Single)">
            <summary>
            Returns f raised to power p.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Repeat(System.Single,System.Single)">
            <summary>
            Loops the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Round(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.RoundToInt(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Sign(System.Single)">
            <summary>
            Returns the sign of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Sin(System.Single)">
            <summary>
            Returns the sine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between min and max with smoothing at the limits.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.CubicInterp(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation.
            </summary>
            <param name="p0">The first point.</param>
            <param name="t0">The tangent direction at first point.</param>
            <param name="p1">The second point.</param>
            <param name="t1">The tangent direction at second point.</param>
            <param name="alpha">The distance along the spline.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseIn(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease in function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseInOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease in/out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps the specified value from the given range into another.
            </summary>
            <param name="value">The value to map from range [fromMin; fromMax].</param>
            <param name="fromMin">The source range minimum value.</param>
            <param name="fromMax">The source range maximum value.</param>
            <param name="toMin">The destination range minimum value.</param>
            <param name="toMax">The destination range maximum value.</param>
            <returns>The mapped value in range [toMin; toMax].</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines whether the specified x is pow of 2.
            </summary>
            <param name="x">The x.</param>
            <returns><c>true</c> if the specified x is pow2; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.NextPowerOfTwo(System.Int32)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.NextPowerOfTwo(System.Single)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SRgbToLinear(System.Single)">
            <summary>
            Converts a float value from sRGB to linear.
            </summary>
            <param name="sRgbValue">The sRGB value.</param>
            <returns>A linear value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.LinearToSRgb(System.Single)">
            <summary>
            Converts a float value from linear to sRGB.
            </summary>
            <param name="linearValue">The linear value.</param>
            <returns>The encoded sRGB value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Sqrt(System.Single)">
            <summary>
            Returns square root of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Int32)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Double)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Single)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Tan(System.Single)">
            <summary>
            Returns the tangent of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.NearEqual(System.Single,System.Single)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike
            <see cref="M:FlaxEngine.Mathf.WithinEpsilon(System.Single,System.Single,System.Single)" /> method). See Remarks.
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>
            The code is using the technique described by Bruce Dawson in
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">
              Comparing
              Floating point numbers 2012 edition
            </a>
            .
            </remarks>
        </member>
        <member name="M:FlaxEngine.Mathf.NearEqual(System.Double,System.Double)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers .
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsZero(System.Single)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsOne(System.Single)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsNotInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsNotInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToDegrees">
            <summary>
            Converts revolutions to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToRadians">
            <summary>
            Converts revolutions to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToGradians">
            <summary>
            Converts revolutions to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.DegreesToRevolutions">
            <summary>
            Converts degrees to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.DegreesToRadians">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToRevolutions">
            <summary>
            Converts radians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToGradians">
            <summary>
            Converts radians to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToRevolutions">
            <summary>
            Converts gradians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToDegrees">
            <summary>
            Converts gradians to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToRadians">
            <summary>
            Converts gradians to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToDegrees">
            <summary>
            Converts radians to degrees.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.UnwindRadians(System.Single)">
            <summary>
            Given a heading which may be outside the +/- PI range, 'unwind' it back into that range.
            </summary>
            <param name="angle">Angle in radians to unwind.</param>
            <returns>Valid angle in radians.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.UnwindDegrees(System.Single)">
            <summary>
            Utility to ensure angle is between +/- 180 degrees by unwinding
            </summary>
            <param name="angle">Angle in degrees to unwind.</param>
            <returns>Valid angle in degrees.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothStep(System.Single)">
            <summary>
            Performs smooth (cubic Hermite) interpolation between 0 and 1.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.SmootherStep(System.Single)">
            <summary>
            Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.Mod(System.Single,System.Single)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Mod2PI(System.Single)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathf.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathf.Gauss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpolateAlphaBlend(System.Single,FlaxEngine.AlphaBlendMode)">
            <summary>
            Converts the input alpha value from a linear 0-1 value into the output alpha described by blend mode.
            </summary>
            <param name="alpha">The alpha (normalized to 0-1).</param>
            <param name="mode">The mode.</param>
            <returns>The output alpha (normalized to 0-1).</returns>
        </member>
        <member name="T:FlaxEngine.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix" />.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Up">
            <summary>
            Gets or sets the up <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M21, M22, and M23.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Down">
            <summary>
            Gets or sets the down <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M21, -M22, and -M23.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Right">
            <summary>
            Gets or sets the right <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M11, M12, and M13.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Left">
            <summary>
            Gets or sets the left <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M11, -M12, and -M13.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Forward">
            <summary>
            Gets or sets the forward <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M31, -M32, and -M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Backward">
            <summary>
            Gets or sets the backward <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M31, M32, and M33.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than sixteen
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            15].
            </exception>
        </member>
        <member name="P:FlaxEngine.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="row" /> or
            <paramref name="column" />is out of the range [0, 3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeQR(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right triangular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeLQ(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Decompose(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeUniformScale(System.Single@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the matrix.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Add(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Add(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Subtract(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Subtract(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Exponent(FlaxEngine.Matrix@,System.Int32,FlaxEngine.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent" /> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Exponent(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent" /> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Negate(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Negate(FlaxEngine.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Lerp(FlaxEngine.Matrix@,FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Lerp(FlaxEngine.Matrix,FlaxEngine.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.SmoothStep(FlaxEngine.Matrix@,FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.SmoothStep(FlaxEngine.Matrix,FlaxEngine.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.TransposeByRef(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose(FlaxEngine.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert(FlaxEngine.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize(FlaxEngine.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize(FlaxEngine.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.UpperTriangularForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.UpperTriangularForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.LowerTriangularForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.LowerTriangularForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.RowEchelonForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RowEchelonForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ReducedRowEchelonForm(FlaxEngine.Matrix@,FlaxEngine.Vector4@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>
              The fifth column is often called the augmented part of the matrix. This is because the fifth
              column is really just an extension of the matrix so that there is a place to put all of the
              non-zero components after the operation is complete.
            </para>
            <para>
              Often times the resultant matrix will the identity matrix or a matrix similar to the identity
              matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.
            </para>
            <para>
              This method can be used to solve systems of linear equations. Upon completion of this method,
              the <paramref name="augmentResult" /> will contain the solution for the system. It is up to the user
              to analyze both the input and the result to determine if a solution really exists.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Ortho(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Ortho(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.OrthoOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.OrthoOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Perspective(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveFov(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveFov(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(FlaxEngine.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationX(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationY(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationZ(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationQuaternion(FlaxEngine.Quaternion@,FlaxEngine.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(FlaxEngine.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Skew(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle.
            shearing is performed in the direction of translation vector, where translation vector and rotation vector define the
            shearing plane.
            The effect is such that the skewed rotation vector has the specified angle with rotation itself.
            </summary>
            <param name="angle">The rotation angle.</param>
            <param name="rotationVec">The rotation vector</param>
            <param name="transVec">The translation vector</param>
            <param name="matrix">Contains the created skew/shear matrix. </param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation2D(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation2D(FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateWorld(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates the world matrix from the specified parameters
            </summary>
            <param name="position">The position of the object. This value is used in translation operations.</param>
            <param name="forward">The forward direction of the object.</param>
            <param name="up">The upward direction of the object; usually [0, 1, 0].</param>
            <returns>The created world matrix of given transformation world</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateWorld(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates the world matrix from the specified parameters
            </summary>
            <param name="position">The position of the object. This value is used in translation operations.</param>
            <param name="forward">The forward direction of the object.</param>
            <param name="up">The upward direction of the object; usually [0, 1, 0].</param>
            <param name="result">>When the method completes, contains the created world matrix of given transformation world.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateFromAxisAngle(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a new matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateFromAxisAngle(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a new matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Addition(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_UnaryPlus(FlaxEngine.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchanged).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Subtraction(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_UnaryNegation(FlaxEngine.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(System.Single,FlaxEngine.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Division(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Division(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Equality(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Inequality(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(FlaxEngine.Matrix@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(FlaxEngine.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Matrix2x2">
            <summary>
            Represents a 2x2 Matrix (contains only scale and rotation in 2D).
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix2x2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix2x2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix2x2"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M11">
            <summary>
            Value at row 1 column 1 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M12">
            <summary>
            Value at row 1 column 2 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M21">
            <summary>
            Value at row 2 column 1 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M22">
            <summary>
            Value at row 2 column 2 of the Matrix2x2.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the Matrix2x2.</param>
            <param name="m12">The value to assign at row 1 column 2 of the Matrix2x2.</param>
            <param name="m21">The value to assign at row 2 column 1 of the Matrix2x2.</param>
            <param name="m22">The value to assign at row 2 column 2 of the Matrix2x2.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix2x2. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Row1">
            <summary>
            Gets or sets the first row in the Matrix2x2; that is M11, M12
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Row2">
            <summary>
            Gets or sets the second row in the Matrix2x2; that is M21, M22
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Column1">
            <summary>
            Gets or sets the first column in the Matrix2x2; that is M11, M21
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Column2">
            <summary>
            Gets or sets the second column in the Matrix2x2; that is M12, M22
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix2x2; that is M11, M22.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix2x2.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix2x2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix2x2 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix2x2 component, depending on the index.</value>
            <param name="row">The row of the Matrix2x2 to access.</param>
            <param name="column">The column of the Matrix2x2 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 1].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Determinant">
            <summary>
            Calculates the determinant of the Matrix2x2.
            </summary>
            <returns>The determinant of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.InverseDeterminant">
            <summary>
            Calculates inverse of the determinant of the Matrix2x2.
            </summary>
            <returns>The inverse determinant of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix2x2.
            </summary>
            <returns>A 4-element array containing the components of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the uniform scale matrix.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(System.Single,System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the scale matrix.
            </summary>
            <param name="scaleX">The scale x.</param>
            <param name="scaleY">The scale y.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the scale matrix.
            </summary>
            <param name="scale">The scale vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Shear(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the shear matrix. Represented by:
            [1 Y]
            [X 1]
            </summary>
            <param name="shearAngles">The shear angles.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Rotation(System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the rotation matrix.
            </summary>
            <param name="rotationRadians">The rotation angle (in radians).</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Transform(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@,FlaxEngine.Vector2@)">
            <summary>
            Transforms the specified vector by the given matrix.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Multiply(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix2x2 to multiply.</param>
            <param name="right">The second Matrix2x2 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Invert(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Calculates the inverse of the specified Matrix2x2.
            </summary>
            <param name="value">The Matrix2x2 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix2x2.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Equality(FlaxEngine.Matrix2x2,FlaxEngine.Matrix2x2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Inequality(FlaxEngine.Matrix2x2,FlaxEngine.Matrix2x2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix2x2)~FlaxEngine.Matrix">
            <summary>
            Convert the 2x2 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix)~FlaxEngine.Matrix2x2">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 2x2 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix2x2)~FlaxEngine.Matrix3x3">
            <summary>
            Convert the 2x2 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 3x3 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix3x3)~FlaxEngine.Matrix2x2">
            <summary>
            Convert the 3x3 Matrix to a 2x2 Matrix.
            </summary>
            <returns>A 2x2 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix2x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix2x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Matrix3x3">
            <summary>
            Represents a 3x3 Matrix ( contains only Scale and Rotation ).
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix3x3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix3x3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M11">
            <summary>
            Value at row 1 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M12">
            <summary>
            Value at row 1 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M13">
            <summary>
            Value at row 1 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M21">
            <summary>
            Value at row 2 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M22">
            <summary>
            Value at row 2 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M23">
            <summary>
            Value at row 2 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M31">
            <summary>
            Value at row 3 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M32">
            <summary>
            Value at row 3 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M33">
            <summary>
            Value at row 3 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the Matrix3x3.</param>
            <param name="m12">The value to assign at row 1 column 2 of the Matrix3x3.</param>
            <param name="m13">The value to assign at row 1 column 3 of the Matrix3x3.</param>
            <param name="m21">The value to assign at row 2 column 1 of the Matrix3x3.</param>
            <param name="m22">The value to assign at row 2 column 2 of the Matrix3x3.</param>
            <param name="m23">The value to assign at row 2 column 3 of the Matrix3x3.</param>
            <param name="m31">The value to assign at row 3 column 1 of the Matrix3x3.</param>
            <param name="m32">The value to assign at row 3 column 2 of the Matrix3x3.</param>
            <param name="m33">The value to assign at row 3 column 3 of the Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix3x3. This must be an array with nine elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than nine elements.</exception>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row1">
            <summary>
            Gets or sets the first row in the Matrix3x3; that is M11, M12, M13
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row2">
            <summary>
            Gets or sets the second row in the Matrix3x3; that is M21, M22, M23
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row3">
            <summary>
            Gets or sets the third row in the Matrix3x3; that is M31, M32, M33
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column1">
            <summary>
            Gets or sets the first column in the Matrix3x3; that is M11, M21, M31
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column2">
            <summary>
            Gets or sets the second column in the Matrix3x3; that is M12, M22, M32
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column3">
            <summary>
            Gets or sets the third column in the Matrix3x3; that is M13, M23, M33
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix3x3.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix3x3; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="row">The row of the Matrix3x3 to access.</param>
            <param name="column">The column of the Matrix3x3 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the Matrix3x3.
            </summary>
            <returns>The determinant of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert">
            <summary>
            Inverts the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose">
            <summary>
            Transposes the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeQR(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 q and a right triangular Matrix3x3 r.
            </summary>
            <param name="q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
            <param name="r">When the method completes, contains the right triangular Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeLQ(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into a lower triangular Matrix3x3 l and an orthonormalized Matrix3x3 q.
            </summary>
            <param name="l">When the method completes, contains the lower triangular Matrix3x3 of the decomposition.</param>
            <param name="q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Decompose(FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Decomposes a Matrix3x3 into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed Matrix3x3.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed Matrix3x3.</param>
            <remarks>
            This method is designed to decompose an SRT transformation Matrix3x3 only.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeUniformScale(System.Single@,FlaxEngine.Quaternion@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the Matrix3x3.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the Matrix3x3.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix3x3.
            </summary>
            <returns>A 9-element array containing the components of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Add(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Add(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Subtract(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Subtract(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Exponent(FlaxEngine.Matrix3x3@,System.Int32,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <param name="result">When the method completes, contains the exponential Matrix3x3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Exponent(FlaxEngine.Matrix3x3,System.Int32)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <returns>The exponential Matrix3x3.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Negate(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Negate(FlaxEngine.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Lerp(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Lerp(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.SmoothStep(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.SmoothStep(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.TransposeByRef(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose(FlaxEngine.Matrix3x3)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <returns>The transpose of the specified Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert(FlaxEngine.Matrix3x3)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <returns>The inverse of the specified Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized Matrix3x3.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize(FlaxEngine.Matrix3x3)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <returns>The orthogonalized Matrix3x3.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized Matrix3x3.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize(FlaxEngine.Matrix3x3)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <returns>The orthonormalized Matrix3x3.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.UpperTriangularForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.UpperTriangularForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <returns>The upper triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LowerTriangularForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LowerTriangularForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <returns>The lower triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RowEchelonForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RowEchelonForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(FlaxEngine.Vector3)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,System.Single,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Shear(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates the 2D shear matrix. Represented by:
            [1 Y 0]
            [X 1 0]
            [0 0 1]
            </summary>
            <param name="shearAngles">The shear angles (in degrees).</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationX(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationX(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationY(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationY(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationZ(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationZ(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationQuaternion(FlaxEngine.Quaternion@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <param name="result">The created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="translation">The translation vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(FlaxEngine.Vector2)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="translation">The translation vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(System.Single,System.Single)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="x">The translation vector X.</param>
            <param name="y">The translation vector Y.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transform2D(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@,FlaxEngine.Vector2@)">
            <summary>
            Transforms given vector by the matrix (in 2D).
            </summary>
            <param name="vector">The vector.</param>
            <param name="transform">The transform.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transform2D(FlaxEngine.Vector2,FlaxEngine.Matrix3x3)">
            <summary>
            Transforms given vector by the matrix (in 2D).
            </summary>
            <param name="vector">The vector.</param>
            <param name="transform">The transform.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Addition(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_UnaryPlus(FlaxEngine.Matrix3x3)">
            <summary>
            Assert a Matrix3x3 (return it unchanged).
            </summary>
            <param name="value">The Matrix3x3 to assert (unchanged).</param>
            <returns>The asserted (unchanged) Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Subtraction(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_UnaryNegation(FlaxEngine.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to negate.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(System.Single,FlaxEngine.Matrix3x3)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="right">The Matrix3x3 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Division(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Division(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Equality(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Inequality(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Explicit(FlaxEngine.Matrix3x3)~FlaxEngine.Matrix">
            <summary>
            Convert the 3x3 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Explicit(FlaxEngine.Matrix)~FlaxEngine.Matrix3x3">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 3x3 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.OrientedBoundingBox">
            <summary>
            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.
            </summary>
        </member>
        <member name="F:FlaxEngine.OrientedBoundingBox.Extents">
            <summary>
            Half lengths of the box along each axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.OrientedBoundingBox.Transformation">
            <summary>
            The matrix which aligns and scales the box, and its translation vector represents the center of the box.
            </summary>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.BoundingBox)">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> from a BoundingBox.
            </summary>
            <param name="bb">The BoundingBox to create from.</param>
            <remarks>
            Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.OrientedBoundingBox"/> struct.
            </summary>
            <param name="extents">The half lengths of the box along each axis.</param>
            <param name="transformation">The matrix which aligns and scales the box, and its translation vector represents the center of the box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> which contained between two minimum and maximum points.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
            <remarks>
            Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3[])">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <remarks>
            This method is not for computing the best tight-fitting OrientedBoundingBox.
            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An array of points representing the eight corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(System.Collections.Generic.List{FlaxEngine.Vector3})">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An collection to add the corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Transform(FlaxEngine.Matrix@)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection
            accuracy.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Transform(FlaxEngine.Matrix)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection
            accuracy.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(FlaxEngine.Vector3@)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(FlaxEngine.Vector3)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(System.Single)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Translate(FlaxEngine.Vector3@)">
            <summary>
            Translates the <see cref="T:FlaxEngine.OrientedBoundingBox" /> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Translate(FlaxEngine.Vector3)">
            <summary>
            Translates the <see cref="T:FlaxEngine.OrientedBoundingBox" /> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="P:FlaxEngine.OrientedBoundingBox.Size">
            <summary>
            The size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> if no scaling is applied to the transformation matrix.
            </summary>
            <remarks>
            The property will return the actual size even if the scaling is applied using Scale method,
            but if the scaling is applied to transformation matrix, use GetSize Function instead.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetSize">
            <summary>
            Returns the size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> taking into consideration the scaling applied to the
            transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
            <remarks>
            This method is computationally expensive, so if no scale is applied to the transformation matrix
            use <see cref="P:FlaxEngine.OrientedBoundingBox.Size" /> property instead.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetSizeSquared">
            <summary>
            Returns the square size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> taking into consideration the scaling applied to
            the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
        </member>
        <member name="P:FlaxEngine.OrientedBoundingBox.Center">
            <summary>
            Returns the center of the <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3[])">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains an array of points>.
            </summary>
            <param name="points">The points array to test.</param>
            <returns>The type of containment.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.BoundingSphere,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="ignoreScale">
            Optimize the check operation by assuming that <see cref="T:FlaxEngine.OrientedBoundingBox" /> has no
            scaling applied
            </param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            This method is not designed for <see cref="T:FlaxEngine.OrientedBoundingBox" /> which has a non-uniform scaling applied to its
            transformation matrix.
            But any type of scaling applied using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.OrientedBoundingBox@)">
            <summary>
            Check the intersection between two <see cref="T:FlaxEngine.OrientedBoundingBox" />
            </summary>
            <param name="obb">The OrientedBoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for both <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied
            to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ContainsLine(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Check the intersection between an <see cref="T:FlaxEngine.OrientedBoundingBox" /> and a line defined by two points
            </summary>
            <param name="L1">The first point in the line.</param>
            <param name="L2">The second point in the line.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied
            to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Check the intersection between an <see cref="T:FlaxEngine.OrientedBoundingBox" /> and <see cref="T:FlaxEngine.BoundingBox" />
            </summary>
            <param name="box">The BoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied
            to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of intersection from the ray start,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetBoundingBox">
            <summary>
            Get the axis-aligned <see cref="T:FlaxEngine.BoundingBox" /> which contains all <see cref="T:FlaxEngine.OrientedBoundingBox" /> corners.
            </summary>
            <returns>The axis-aligned BoundingBox of this OrientedBoundingBox.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetBoxToBoxMatrix(FlaxEngine.OrientedBoundingBox@,FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Calculates the matrix required to transfer any point from one <see cref="T:FlaxEngine.OrientedBoundingBox" /> local coordinates to
            another.
            </summary>
            <param name="A">The source OrientedBoundingBox.</param>
            <param name="B">The target OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Merge(FlaxEngine.OrientedBoundingBox@,FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A
            orientation.
            </summary>
            <param name="A">The <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into it.</param>
            <param name="B">The <see cref="T:FlaxEngine.OrientedBoundingBox" /> to be merged</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
            <remarks>
            Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B
            into it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.MergeInto(FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation.
            </summary>
            <param name="OBB">The other <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Add(FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge another OrientedBoundingBox into this OrientedBoundingBox.
            </summary>
            <param name="OBB">The other <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into this OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation
            matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(FlaxEngine.OrientedBoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(FlaxEngine.OrientedBoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Multiply(FlaxEngine.OrientedBoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Equality(FlaxEngine.OrientedBoundingBox,FlaxEngine.OrientedBoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Inequality(FlaxEngine.OrientedBoundingBox,FlaxEngine.OrientedBoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:FlaxEngine.Rectangle">
            <summary>
            Define a Rectangle.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Empty">
            <summary>
            A <see cref="T:FlaxEngine.Rectangle"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Location">
            <summary>
            Rectangle location (coordinates of the upper-left corner)
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Size">
            <summary>
            Rectangle size
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.X">
            <summary>
            Gets or sets X coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Y">
            <summary>
            Gets or sets Y coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Width">
            <summary>
            Gets or sets width of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Height">
            <summary>
            Gets or sets height of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Top">
            <summary>
            Gets Y coordinate of the top edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Bottom">
            <summary>
            Gets Y coordinate of the bottom edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Left">
            <summary>
            Gets X coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Right">
            <summary>
            Gets X coordinate of the right edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.UpperLeft">
            <summary>
            Gets position of the upper left corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.UpperRight">
            <summary>
            Gets position of the upper right corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.BottomRight">
            <summary>
            Gets position of the bottom right corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.BottomLeft">
            <summary>
            Gets position of the bottom left corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Center">
            <summary>
            Gets center position of the rectangle
            </summary>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="location">Location of the upper left corner</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(System.Single,System.Single,FlaxEngine.Vector2)">
            <summary>
            Init
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Init
            </summary>
            <param name="location">Location of the upper left corner</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Vector2)">
            <summary>
            Checks if rectangle contains given point
            </summary>
            <param name="location">Point location to check</param>
            <returns>True if point is inside rectangle's area</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Vector2@)">
            <summary>
            Checks if rectangle contains given point
            </summary>
            <param name="location">Point location to check</param>
            <returns>True if point is inside rectangle's area</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Rectangle)">
            <summary>
            Determines whether this rectangle entirely contains a specified rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if this rectangle entirely contains the specified rectangle, or false if not</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether this rectangle entirely contains a specified rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if this rectangle entirely contains the specified rectangle, or false if not</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Intersects(FlaxEngine.Rectangle)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if the specified rectangle intersects with this one, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Intersects(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if the specified rectangle intersects with this one, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Offset(System.Single,System.Single)">
            <summary>
            Offset rectangle position
            </summary>
            <param name="x">X coordinate offset</param>
            <param name="y">Y coordinate offset</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Offset(FlaxEngine.Vector2)">
            <summary>
            Offset rectangle position
            </summary>
            <param name="offset">X and Y coordinate offset</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeOffseted(System.Single,System.Single)">
            <summary>
            Make offseted rectangle
            </summary>
            <param name="x">X coordinate offset</param>
            <param name="y">Y coordinate offset</param>
            <returns>Offseted rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeOffseted(FlaxEngine.Vector2)">
            <summary>
            Make offseted rectangle
            </summary>
            <param name="offset">X and Y coordinate offset</param>
            <returns>Offseted rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Expand(System.Single)">
            <summary>
            Expand rectangle area in all directions by given amount
            </summary>
            <param name="toExpand">Amount of units to expand a rectangle</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeExpanded(System.Single)">
            <summary>
            Make expanded rectangle area in all directions by given amount
            </summary>
            <param name="toExpand">Amount of units to expand a rectangle</param>
            <returns>Expanded rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Scale(System.Single)">
            <summary>
            Scale rectangle area in all directions by given amount
            </summary>
            <param name="scale">Scale value to expand a rectangle</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeScaled(System.Single)">
            <summary>
            Make scaled rectangle area in all directions by given amount
            </summary>
            <param name="scale">Scale value to expand a rectangle</param>
            <returns>Scaled rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Union(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Calculates a rectangle that contains the union of a and b rectangles
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>Rectangle that contains both a and b rectangles</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Union(FlaxEngine.Rectangle@,FlaxEngine.Rectangle@,FlaxEngine.Rectangle@)">
            <summary>
            Calculates a rectangle that contains the union of a and b rectangles
            </summary>
            <param name="a">First rectangle</param>
            <param name="b">Second rectangle</param>
            <param name="result">When the method completes, contains the rectangle that both a and b rectangles.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Shared(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Calculates a rectangle that contains the shared part of a and b rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>Rectangle that contains shared part of a and b rectangles.</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Shared(FlaxEngine.Rectangle@,FlaxEngine.Rectangle@,FlaxEngine.Rectangle@)">
            <summary>
            Calculates a rectangle that contains the shared part of a and b rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <param name="result">When the method completes, contains the rectangle that shared part of a and b rectangles.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.FromPoints(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Creates rectangle from two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Rectangle that contains both p1 and p2</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.FromPoints(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Creates rectangle from two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Rectangle that contains both p1 and p2</returns>
            <param name="result">When the method completes, contains the rectangle that contains both p1 and p2 points.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Addition(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Subtraction(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Multiply(FlaxEngine.Rectangle,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="scale">The scale.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rectangle" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Rectangle" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Rectangle" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.SphericalHarmonics`1">
            <summary>
            A representation of a sphere of values via Spherical Harmonics (SH).
            </summary>
            <typeparam name="TDataType">The type of data contained by the sphere</typeparam>
        </member>
        <member name="F:FlaxEngine.SphericalHarmonics`1.MaximumOrder">
            <summary>
            The maximum order supported.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Order">
            <summary>
            The order of calculation of the spherical harmonic.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Coefficients">
            <summary>
            Get the coefficients defining the spherical harmonics (the spherical coordinates x{l,m} multiplying the spherical base Y{l,m}).
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.#ctor">
            <summary>
            Creates a null spherical harmonics (for serialization).
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.#ctor(System.Int32)">
            <summary>
            The desired order to
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.Evaluate(FlaxEngine.Vector3)">
            <summary>
            Evaluate the value of the spherical harmonics in the provided direction.
            </summary>
            <param name="direction">The direction</param>
            <returns>The value of the spherical harmonics in the direction</returns>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns the coefficient x{l,m} of the spherical harmonics (the {l,m} spherical coordinate corresponding to the spherical base Y{l,m}).
            </summary>
            <param name="l">the l index of the coefficient</param>
            <param name="m">the m index of the coefficient</param>
            <returns>the value of the coefficient</returns>
        </member>
        <member name="T:FlaxEngine.SphericalHarmonics">
            <summary>
            A spherical harmonics representation of a cubemap.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalHarmonics.BaseCoefficients">
            <summary>
            Base coefficients for SH.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics.#ctor(System.Int32)">
            <summary>
            Create a new instance of Spherical Harmonics of provided order.
            </summary>
            <param name="order">The order of the harmonics</param>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics.Evaluate(FlaxEngine.Vector3)">
            <summary>
            Evaluates the color for the specified direction.
            </summary>
            <param name="direction">The direction to evaluate.</param>
            <returns>The color computed for this direction.</returns>
        </member>
        <member name="T:FlaxEngine.Transform">
            <summary>
            Represents a three dimensional mathematical transformation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Transform" /> type, in bytes
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Identity">
            <summary>
            A identity <see cref="T:FlaxEngine.Transform" /> with all default values
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Translation">
            <summary>
            Translation vector of the transform
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Orientation">
            <summary>
            Rotation of the transform
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Scale">
            <summary>
            Scale vector of the transform
            </summary>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
            <param name="rotation">Rotation in 3D space</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
            <param name="rotation">Rotation in 3D space</param>
            <param name="scale">Transform scale</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Matrix)">
            <summary>
            Creates a new Transfrom from a matrix
            </summary>
            <param name="matrix">World matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Matrix@)">
            <summary>
            Creates a new Transfrom from a matrix
            </summary>
            <param name="matrix">World matrix</param>
        </member>
        <member name="P:FlaxEngine.Transform.IsIdentity">
            <summary>
            Gets a value indicting whether this transform is identity
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Forward">
            <summary>
            Gets the forward vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Backward">
            <summary>
            Gets the backward vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Up">
            <summary>
            Gets the up vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Down">
            <summary>
            Gets the down vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Left">
            <summary>
            Gets the left vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Right">
            <summary>
            Gets the right vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Transform.GetRotation">
            <summary>
            Gets rotation matrix (from Orientation).
            </summary>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetRotation(FlaxEngine.Matrix@)">
            <summary>
            Gets rotation matrix (from Orientation).
            </summary>
            <param name="result">Matrix to set</param>
        </member>
        <member name="M:FlaxEngine.Transform.SetRotation(FlaxEngine.Matrix)">
            <summary>
            Sets rotation matrix (from Orientation).
            </summary>
            <param name="value">Rotation matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.SetRotation(FlaxEngine.Matrix@)">
            <summary>
            Sets rotation matrix (from Orientation).
            </summary>
            <param name="value">Rotation matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.GetWorld">
            <summary>
            Gets world matrix that describes transformation as a 4 by 4 matrix.
            </summary>
            <returns>World matrix</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetWorld(FlaxEngine.Matrix@)">
            <summary>
            Gets world matrix that describes transformation as a 4 by 4 matrix.
            </summary>
            <param name="result">World matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Transform)">
            <summary>
            Perform transformation of the given transform in local space
            </summary>
            <param name="other">Local space transform</param>
            <returns>World space transform</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given point in local space
            </summary>
            <param name="point">Local space point</param>
            <returns>World space point</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Perform transformation of the given points in local space
            </summary>
            <param name="points">Local space points</param>
            <param name="result">World space points</param>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Transform)">
            <summary>
            Perform transformation of the given transform in world space
            </summary>
            <param name="other">World space transform</param>
            <returns>Local space transform</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given point in world space
            </summary>
            <param name="point">World space point</param>
            <returns>Local space point</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Perform transformation of the given points in world space
            </summary>
            <param name="points">World space points</param>
            <param name="result">Local space points</param>
        </member>
        <member name="M:FlaxEngine.Transform.TransformDirection(FlaxEngine.Vector3)">
            <summary>
            Transforms the direction vector from the local space to the world space.
            </summary>
            <remarks>
            This operation is not affected by scale or position of the transform. The returned vector has the same length as direction.
            Use <see cref="M:FlaxEngine.Transform.TransformPoint(FlaxEngine.Vector3)"/> for the conversion if the vector represents a position rather than a direction.
            </remarks>
            <param name="direction">The direction.</param>
            <returns>The transformed direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.TransformPoint(FlaxEngine.Vector3)">
            <summary>
            Transforms the position from the local space to the world space.
            </summary>
            <remarks>
            Use <see cref="M:FlaxEngine.Transform.TransformDirection(FlaxEngine.Vector3)"/> for the conversion if the vector represents a direction rather than a position.
            </remarks>
            <param name="position">The position.</param>
            <returns>The transformed position.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Lerp(FlaxEngine.Transform,FlaxEngine.Transform,System.Single)">
            <summary>
            Performs a linear interpolation between two transformations.
            </summary>
            <param name="start">Start transformation.</param>
            <param name="end">End transformation.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two transformations.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Transform.Lerp(FlaxEngine.Transform@,FlaxEngine.Transform@,System.Single,FlaxEngine.Transform@)">
            <summary>
            Performs a linear interpolation between two transformations.
            </summary>
            <param name="start">Start transformation.</param>
            <param name="end">End transformation.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two transformations.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Transform.op_Equality(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.op_Inequality(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(FlaxEngine.Transform@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Transform" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(FlaxEngine.Transform)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Transform" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Viewport">
            <summary>
            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(FlaxEngine.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="location">The location of the upper-left corner of the viewport in pixels.</param>
            <param name="size">The size of the viewport in pixels.</param>
        </member>
        <member name="P:FlaxEngine.Viewport.Bounds">
            <summary>
            Gets the size of the viewport.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:FlaxEngine.Viewport.Size">
            <summary>
            Gets or sets the size of the viewport (width and height).
            </summary>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(FlaxEngine.Viewport@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(FlaxEngine.Viewport)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.op_Equality(FlaxEngine.Viewport,FlaxEngine.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.op_Inequality(FlaxEngine.Viewport,FlaxEngine.Viewport)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Project(FlaxEngine.Vector3,FlaxEngine.Matrix,FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Project(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">A combined WorldViewProjection matrix.</param>
            <param name="vector">The projected vector.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.Unproject(FlaxEngine.Vector3,FlaxEngine.Matrix,FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The unprojected Vector.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Unproject(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">An inverted combined WorldViewProjection matrix.</param>
            <param name="vector">The unprojected vector.</param>
        </member>
        <member name="P:FlaxEngine.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="T:FlaxEngine.Object">
            <summary>
            Base class for all objects Flax can reference. Every object has unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Object.ID">
            <summary>
            Gets unique object ID
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Object"/>.
            Always called from C++.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.Finalize">
            <summary>
            Notifies the unmanaged interop object that the managed instance was finalized.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.New``1">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.New(System.Type)">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Find``1(System.Guid@)">
            <summary>
            Finds the object with the given ID.
            </summary>
            <param name="id">Unique ID of the object.</param>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found object or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)">
            <summary>
            Destroys the specified object and clears the reference variable.
            The object obj will be destroyed now or after the time specified in seconds from now.
            If obj is a Script it will be removed from the Actor and deleted.
            If obj is an Actor it will be removed from the Scene and deleted as well as all its Scripts and all children of the Actor.
            Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
            </summary>
            <param name="obj">The object to destroy.</param>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Object.Destroy``1(``0@,System.Single)">
            <summary>
            Destroys the specified object and clears the reference variable.
            The object obj will be destroyed now or after the time specified in seconds from now.
            If obj is a Script it will be removed from the Actor and deleted.
            If obj is an Actor it will be removed from the Scene and deleted as well as all its Scripts and all children of the Actor.
            Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
            </summary>
            <param name="obj">The object to destroy.</param>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Object.op_Implicit(FlaxEngine.Object)~System.Boolean">
            <summary>
            Checks if the object exists (reference is not null and the unmanaged object pointer is valid).
            </summary>
            <param name="obj">The object to check.</param>
            <returns>True if object is valid, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Object.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> class.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="values">
            The values to assign to the A, B, C, and D components of the plane. This must be an array with
            four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C
            component, and 3 for the D component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Plane@,FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">
            When the method completes, contains the line of intersection
            as a <see cref="T:FlaxEngine.Ray" />, or a zero ray if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection(FlaxEngine.Matrix@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="result">When the method completes, contains the reflection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a
            shadow.
            This plane  is assumed to be normalized
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a
            shadow.
            This plane  is assumed to be normalized
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection(FlaxEngine.Matrix3x3@)">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs.
            This plane is assumed to be normalized
            </summary>
            <param name="result">When the method completes, contains the reflection Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection3x3">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs.
            This plane is assumed to be normalized
            </summary>
            <returns>The reflection Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4@,FlaxEngine.Plane@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="plane">
            The plane onto which to project the geometry as a shadow. This parameter is assumed to be
            normalized.
            </param>
            <param name="result">When the method completes, contains the shadow Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4,FlaxEngine.Plane)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="plane">
            The plane onto which to project the geometry as a shadow. This parameter is assumed to be
            normalized.
            </param>
            <returns>The shadow Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Multiply(FlaxEngine.Plane@,System.Single,FlaxEngine.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Multiply(FlaxEngine.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Dot(FlaxEngine.Plane@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Dot(FlaxEngine.Plane,FlaxEngine.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.DotCoordinate(FlaxEngine.Plane@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">
            When the method completes, contains the dot product of a specified vector and the normal of the
            Plane plus the distance value of the plane.
            </param>
        </member>
        <member name="M:FlaxEngine.Plane.DotCoordinate(FlaxEngine.Plane,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.DotNormal(FlaxEngine.Plane@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">
            When the method completes, contains the dot product of the specified vector and the normal of the
            plane.
            </param>
        </member>
        <member name="M:FlaxEngine.Plane.DotNormal(FlaxEngine.Plane,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize(FlaxEngine.Plane@,FlaxEngine.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize(FlaxEngine.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane@,FlaxEngine.Quaternion@,FlaxEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane,FlaxEngine.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane[],FlaxEngine.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane@,FlaxEngine.Matrix@,FlaxEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane,FlaxEngine.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane[],FlaxEngine.Matrix@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.Plane.op_Multiply(System.Single,FlaxEngine.Plane)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Multiply(FlaxEngine.Plane,System.Single)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Equality(FlaxEngine.Plane,FlaxEngine.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Inequality(FlaxEngine.Plane,FlaxEngine.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(FlaxEngine.Plane@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(FlaxEngine.Plane)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.GamePlugin">
            <summary>
            Base class for all plugins used at runtime in game.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
            <seealso cref="T:FlaxEngine.Plugin" />
        </member>
        <member name="T:FlaxEngine.Plugin">
            <summary>
            Base class for game engine editor plugins.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Plugin.Description">
            <summary>
            Gets the description.
            </summary>
            <remarks>
            Plugin description should be a constant part of the plugin created in constructor and valid before calling <see cref="M:FlaxEngine.Plugin.Initialize"/>.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Plugin.Initialize">
            <summary>
            Initialization method called when this plugin is loaded to the memory and can be used.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plugin.Deinitialize">
            <summary>
            Cleanup method called when this plugin is being unloaded or reloaded or engine is closing.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginDescription">
            <summary>
            The engine plugin description container.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Name">
            <summary>
            The name of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Version">
            <summary>
            The version of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Author">
            <summary>
            The name of the author of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.AuthorUrl">
            <summary>
            The plugin author website URL.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.HomepageUrl">
            <summary>
            The homepage URL for the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.RepositoryUrl">
            <summary>
            The plugin repository URL (for open-source plugins).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Description">
            <summary>
            The plugin description.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Category">
            <summary>
            The plugin category.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.IsBeta">
            <summary>
            True if plugin is during Beta tests (before release).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.IsAlpha">
            <summary>
            True if plugin is during Alpha tests (early version).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.SupportedPlatforms">
            <summary>
            The supported platforms by this plugin.
            </summary>
        </member>
        <member name="T:FlaxEngine.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Quaternion" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Quaternion" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.One">
            <summary>
            A <see cref="T:FlaxEngine.Quaternion" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Quaternion" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array
            with four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.EulerAngles">
            <summary>
            The rotation as Euler angles in degrees.
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:FlaxEngine.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:FlaxEngine.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Quaternion.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Quaternion.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Add(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Add(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Subtract(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Subtract(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <param name="result">When the method completes, contains the multiplied quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Negate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Negate(FlaxEngine.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Barycentric(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">
            When the method completes, contains a new <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian
            coordinates of the specified point.
            </param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Barycentric(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate(FlaxEngine.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Dot(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Dot(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.AngleBetween(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Calculates the angle between two quaternions.
            </summary>
            <param name="a">First source quaternion.</param>
            <param name="b">Second source quaternion.</param>
            <returns>Returns the angle in degrees between two rotations a and b.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Exponential(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Exponential(FlaxEngine.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert(FlaxEngine.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Lerp(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Lerp(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Logarithm(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Logarithm(FlaxEngine.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize(FlaxEngine.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation (in radians).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation (in radians).</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix3x3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookRotation(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a rotation with the specified forward and upwards directions
            </summary>
            <param name="forward">Forward direction</param>
            <param name="up">Up direction</param>
            <returns>Calculated quaternion</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationX(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationX(System.Single)">
            <summary>
            Creates a quaternion that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationY(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationY(System.Single)">
            <summary>
            Creates a quaternion that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationZ(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationZ(System.Single)">
            <summary>
            Creates a quaternion that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(FlaxEngine.Vector3)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="eulerAngles">The pitch, yaw and roll angles of rotation.</param>
            <returns>When the method completes, contains the newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="eulerAngles">The pitch, yaw and roll angles of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="x">The pitch of rotation (in degrees).</param>
            <param name="y">The yaw of rotation (in degrees).</param>
            <param name="z">The roll of rotation (in degrees).</param>
            <returns>When the method completes, contains the newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(System.Single,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values.
            Angles are in degrees.
            </summary>
            <param name="x">The pitch of rotation (in degrees).</param>
            <param name="y">The yaw of rotation (in degrees).</param>
            <param name="z">The roll of rotation (in degrees).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            Angles are in radians. Use <see cref="F:FlaxEngine.Mathf.RadiansToDegrees"/> to convert degrees to radians.
            </summary>
            <param name="yaw">The yaw of rotation (in radians).</param>
            <param name="pitch">The pitch of rotation (in radians).</param>
            <param name="roll">The roll of rotation (in radians).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            Angles are in radians.
            </summary>
            <param name="yaw">The yaw of rotation (in radians).</param>
            <param name="pitch">The pitch of rotation (in radians).</param>
            <param name="roll">The roll of rotation (in radians).</param>
            <returns>The newly created quaternion (in radians).</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Slerp(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Slerp(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Squad(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Squad(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.SquadSetup(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Addition(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Subtraction(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_UnaryNegation(FlaxEngine.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(System.Single,FlaxEngine.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(FlaxEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Equality(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Inequality(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(FlaxEngine.Quaternion@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Quaternion" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(FlaxEngine.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Quaternion" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:FlaxEngine.Ray.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Ray" /> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:FlaxEngine.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point at distance long ray.
            </summary>
            <param name="distance">The distance from ray origin.</param>
            <returns>The calculated point.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.GetPickRay(System.Single,System.Single,FlaxEngine.Viewport@,FlaxEngine.Matrix@)">
            <summary>
            Calculates a world space ray from 2d screen coordinates.
            </summary>
            <param name="x">The X coordinate on 2d screen.</param>
            <param name="y">The Y coordinate on 2d screen.</param>
            <param name="viewport">The screen viewport.</param>
            <param name="vp">The View*Projection matrix.</param>
            <returns>The resulting ray.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.op_Equality(FlaxEngine.Ray,FlaxEngine.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.op_Inequality(FlaxEngine.Ray,FlaxEngine.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(FlaxEngine.Ray@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(FlaxEngine.Ray)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.RequireChildActorAttribute">
            <summary>
            The RequireChildActor attribute automatically adds required child actor as dependencies.
            </summary>
        </member>
        <member name="F:FlaxEngine.RequireChildActorAttribute.Type">
            <summary>
            Type of the actor to require
            </summary>
        </member>
        <member name="M:FlaxEngine.RequireChildActorAttribute.#ctor(System.Type)">
            <summary>
            Require an child.
            </summary>
            <param name="requiredChild"></param>
        </member>
        <member name="T:FlaxEngine.ShadowsCastingMode">
            <summary>
            Shadows casting modes by visual elements.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.None">
            <summary>
            Never render shadows.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.StaticOnly">
            <summary>
            Render shadows only in static views (env probes, lightmaps, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.DynamicOnly">
            <summary>
            Render shadows only in dynamic views (game, editor, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.All">
            <summary>
            Always render shadows.
            </summary>
        </member>
        <member name="T:FlaxEngine.StaticFlags">
            <summary>
            Static flags for the actor objects.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.None">
            <summary>
            Non-static object.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.ReflectionProbe">
            <summary>
            Object is considered to be static for reflection probes offline caching.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Lightmap">
            <summary>
            Object is considered to be static for static lightmaps.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Transform">
            <summary>
            Object is considered to have static transformation in space (no dynamic physics and any movement at runtime).
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Navigation">
            <summary>
            Object is considered to affect navigation (static occluder or walkable surface).
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.FullyStatic">
            <summary>
            Objects is fully static on the scene.
            </summary>
        </member>
        <member name="T:FlaxEngine.FlaxException">
            <summary>
            Flax Engine exception object.
            </summary>
            <seealso cref="T:System.SystemException" />
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:FlaxEngine.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector2" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector2" /> (1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector2" /> (0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X and Y components of the vector. This must be an array with two
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than two
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            1].
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Vector2.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Vector2.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2@,System.Single@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2@,System.Single@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(System.Single@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(System.Single,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Negate(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Negate(FlaxEngine.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Barycentric(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Barycentric(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Clamp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Clamp(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Saturate">
            <summary>
            Saturates this instance in the range [0,1]
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2,FlaxEngine.Vector2)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize(FlaxEngine.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Round(FlaxEngine.Vector2)">
            <summary>
            Returns the vector with components rounded to the nearest integer.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Ceil(FlaxEngine.Vector2)">
            <summary>
            Returns the vector with components containing the smallest integer greater to or equal to the original value.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Mod(FlaxEngine.Vector2)">
            <summary>
            Breaks the components of the vector into an integral and a fractional part. Returns vector made of fractional parts.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.SmoothStep(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.SmoothStep(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Hermite(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Hermite(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Perpendicular(FlaxEngine.Vector2)">
            <summary>
            Calculates the 2D vector perpendicular to the given 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            </summary>
            <param name="inDirection">The input direction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Perpendicular(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the 2D vector perpendicular to the given 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            </summary>
            <param name="inDirection">The in direction.</param>
            <param name="result">When the method completes, contains the result of the calculation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.CatmullRom(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.CatmullRom(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Max(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector2.Max(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Min(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector2.Min(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Abs(FlaxEngine.Vector2)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Reflect(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Reflect(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Orthogonalize(FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Orthonormalize(FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2@,FlaxEngine.Quaternion@,FlaxEngine.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2[],FlaxEngine.Quaternion@,FlaxEngine.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_UnaryPlus(FlaxEngine.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_UnaryNegation(FlaxEngine.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(FlaxEngine.Vector2,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(System.Single,FlaxEngine.Vector2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Equality(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Inequality(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector2" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector2" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Vector3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Up">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating up (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Down">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating down (0, -1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Left">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating left (-1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Right">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating right (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Forward">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating forward in a left-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Backward">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating backward in a left-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(FlaxEngine.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, and Z components of the vector. This must be an array with three
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than three
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Normalized">
            <summary>
            Gets the normalized vector. Returned vector has length equal 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for
            the Z component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            2].
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Vector3.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Vector3.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate">
            <summary>
            Reverses the direction of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.UnwindEuler">
            <summary>
            When this vector contains Euler angles (degrees), ensure that angles are between +/-180
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(System.Single@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <param name="result">When the method completes, contains the divided vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Divies a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate(FlaxEngine.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Barycentric(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Barycentric(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Clamp(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Clamp(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Cross(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Cross(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3,FlaxEngine.Vector3)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXY(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the XY plane (ignoring Z).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXYSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the XY plane (ignoring Z).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXZ(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXZSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceYZ(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the YZ plane (ignoring X).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the YZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceYZSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the YZ plane (ignoring X).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the YZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.NearEqual(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.NearEqual(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize(FlaxEngine.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Lerp(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Lerp(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.SmoothStep(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.SmoothStep(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Hermite(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Hermite(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.CatmullRom(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.CatmullRom(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Max(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector3.Max(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Min(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector3.Min(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Abs(FlaxEngine.Vector3)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onNormal">The projection normal vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ProjectOnPlane(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="planeNormal">The plane normal vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Angle(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the angle (in degrees) between <paramref name="from"/> and <paramref name="to"/>. This is always the smallest value.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle (in degrees).</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Unproject(FlaxEngine.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Unproject(FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Reflect(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Reflect(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Orthogonalize(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Orthonormalize(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.OrthoNormalize(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Makes vectors normalized and orthogonal to each other
            </summary>
            <param name="normal">Normal vector</param>
            <param name="tangent">Tangent vector</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector3" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3[],FlaxEngine.Quaternion@,FlaxEngine.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix3x3"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3"/>.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Matrix3x3)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix3x3"/>.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector3"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector3[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector3[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_UnaryPlus(FlaxEngine.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_UnaryNegation(FlaxEngine.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Transforms a vector by the given rotation.
            </summary>
            <param name="vector">The vector to transform.</param>
            <param name="rotation">The quaternion.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(FlaxEngine.Vector3,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(System.Single,FlaxEngine.Vector3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Equality(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Inequality(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(FlaxEngine.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Vector4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:FlaxEngine.Vector4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the vector. This must be an array with
            four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="P:FlaxEngine.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Vector4.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Vector4.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4@,System.Single@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4@,System.Single@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(System.Single@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(System.Single,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Negate(FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Negate(FlaxEngine.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Barycentric(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Barycentric(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Clamp(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Clamp(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Distance(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Distance(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4,FlaxEngine.Vector4)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Dot(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Dot(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize(FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize(FlaxEngine.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Lerp(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Lerp(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.SmoothStep(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.SmoothStep(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Hermite(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Hermite(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.CatmullRom(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.CatmullRom(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Max(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector4.Max(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Min(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Vector4.Min(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Abs(FlaxEngine.Vector4)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Orthogonalize(FlaxEngine.Vector4[],FlaxEngine.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Orthonormalize(FlaxEngine.Vector4[],FlaxEngine.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4@,FlaxEngine.Quaternion@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4[],FlaxEngine.Quaternion@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4,FlaxEngine.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">
            The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="source" /> or <paramref name="destination" /> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_UnaryPlus(FlaxEngine.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_UnaryNegation(FlaxEngine.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(FlaxEngine.Vector4,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(System.Single,FlaxEngine.Vector4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Equality(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Inequality(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(FlaxEngine.Vector4@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(FlaxEngine.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Utilities.Screenshot">
            <summary>
            Utility class used to capture screenshots.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.Screenshot.Capture(FlaxEngine.Rendering.RenderTarget,System.String)">
            <summary>
            Captures the specified render target contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="target">The target render target to capture it's contents.</param>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.Screenshot.Capture(FlaxEngine.Rendering.SceneRenderTask,System.String)">
            <summary>
            Captures the specified render task backbuffer contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="target">The target task to capture it's backbuffer.</param>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="T:FlaxEngine.Utilities.Extensions">
            <summary>
            Collection of various extension methods.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.DeepClone``1(``0)">
            <summary>
            Creates deep clone for a class if all members of this class are marked as serializable (uses Json serialization).
            </summary>
            <param name="instance">Current instance of an object</param>
            <typeparam name="T">Instance type of an object</typeparam>
            <returns>Returns new object of provided class</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.GetLines(System.String,System.Boolean)">
            <summary>
            Splits string into lines
            </summary>
            <param name="str">Text to split</param>
            <param name="removeEmptyLines">True if remove empty lines, otherwise keep them</param>
            <returns>Array with all lines</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDouble(System.Random,System.Double)">
            <summary>
            Gets a random double.
            </summary>
            <param name="random">The random.</param>
            <param name="maxValue">The maximum value</param>
            <returns>A random double</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random double.
            </summary>
            <param name="random">The random.</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <returns>A random double</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random)">
            <summary>
            Gets a random float.
            </summary>
            <param name="random">The random.</param>
            <returns>A random float</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random,System.Single)">
            <summary>
            Gets a random float.
            </summary>
            <param name="random">The random.</param>
            <param name="maxValue">The maximum value</param>
            <returns>A random float</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random float.
            </summary>
            <param name="random">The random.</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextColor(System.Random)">
            <summary>
            Gets a random Color.
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector2(System.Random)">
            <summary>
            Gets a random Vector2 with components in range [0;1].
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector3(System.Random)">
            <summary>
            Gets a random Vector3 with components in range [0;1].
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector4(System.Random)">
            <summary>
            Gets a random Vector4 with components in range [0;1].
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextQuaternion(System.Random)">
            <summary>
            Gets a random Quaternion.
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextLong(System.Random)">
            <summary>
            Gets a random 64-bit signed integer value.
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDirection2D(System.Random)">
            <summary>
            Generates a random normalized 2D direction vector.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random normalized 2D direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDirection3D(System.Random)">
            <summary>
            Generates a random normalized 3D direction vector.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random normalized 3D direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.PointInACircle(System.Random,System.Single)">
            <summary>
            Generates a random point in a circle of a given radius.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="radius">Radius of circle. Default 1.0f.</param>
            <returns>A random point in a circle of a given radius.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="destination">The <see cref="T:System.Collections.Generic.ICollection`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be added to the end of the <paramref name="destination"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="destination"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueues the elements of the specified collection to the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be added to the <paramref name="queue"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="queue"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Pushes the elements of the specified collection to the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="stack">The <see cref="T:System.Collections.Generic.Stack`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be pushed on to the <paramref name="stack"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stack"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="source">The sequence of elements to execute the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>1.</param>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Choose``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Chooses a random item from the collection.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to choose item from.</param>
            <returns>A random item from collection</returns>
            <exception cref="T:System.ArgumentNullException">If the random argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Choose``1(System.Random,``0[])">
            <summary>
            Chooses a random item.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to choose item from.</param>
            <returns>A random item from collection</returns>
            <exception cref="T:System.ArgumentNullException">If the random  is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the collection in place.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to shuffle.</param>
            <exception cref="T:System.ArgumentNullException">If the random argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the random collection is null.</exception>
        </member>
        <member name="T:FlaxEngine.Utilities.State">
            <summary>
            State machine state
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.State.StateMachine">
            <summary>
            Gets the state machine.
            </summary>
            <value>
            The state machine.
            </value>
        </member>
        <member name="P:FlaxEngine.Utilities.State.IsActive">
            <summary>
            Gets a value indicating whether this state is active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.State.CanEnter">
            <summary>
            Checks if can enter to that state
            </summary>
            <returns>True if can enter to that state, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.State.CanExit(FlaxEngine.Utilities.State)">
            <summary>
            Checks if can exit from that state
            </summary>
            <param name="nextState">Next state to enter after exit from the current state</param>
            <returns>True if can exit from that state, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.State.OnEnter">
            <summary>
            Called when state is starting to be active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.State.OnExit(FlaxEngine.Utilities.State)">
            <summary>
            Called when state is ending to be active.
            </summary>
            <param name="nextState">The next state.</param>
        </member>
        <member name="T:FlaxEngine.Utilities.StateMachine">
            <summary>
            State machine logic pattern
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.StateMachine.currentState">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.StateMachine.states">
            <summary>
            The states.
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.StateMachine.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.StateMachine.StateChanging">
            <summary>
            Occurs when state is being changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.StateMachine.StateChanged">
            <summary>
            Occurs when state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GetState``1">
            <summary>
            Gets state of given type.
            </summary>
            <typeparam name="TStateType">The type of the state.</typeparam>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GoToState``1">
            <summary>
            Goes to the state.
            </summary>
            <typeparam name="TStateType">The type of the state.</typeparam>
            <exception cref="T:System.InvalidOperationException">Cannot find state of given type.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GoToState(FlaxEngine.Utilities.State)">
            <summary>
            Goes to the state.
            </summary>
            <param name="state">The target state.</param>
            <exception cref="T:System.ArgumentNullException">state</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.AddState(FlaxEngine.Utilities.State)">
            <summary>
            Adds the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.RemoveState(FlaxEngine.Utilities.State)">
            <summary>
            Removes the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.SwitchState(FlaxEngine.Utilities.State)">
            <summary>
            Switches the state.
            </summary>
            <param name="nextState">Then next state.</param>
        </member>
        <member name="T:FlaxEngine.StringUtils">
            <summary>
            String utilities class.
            </summary>
        </member>
        <member name="M:FlaxEngine.StringUtils.HexDigit(System.Char)">
            <summary>
            Parse hexadecimals digit to value.
            </summary>
            <param name="c">The hex character.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.GetPathWithoutExtension(System.String)">
            <summary>
            Removes extension from the file path.
            </summary>
            <param name="path">The path.</param>
            <returns>Path without extension.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.NormalizePath(System.String)">
            <summary>
            Normalizes the path to the standard Flax format (all separators are '/' except for drive 'C:\').
            </summary>
            <param name="path">The path.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.NormalizeExtension(System.String)">
            <summary>
            Normalizes the file extension to common format: no leading dot and all lowercase.
            For example: '.TxT' will return 'txt'.
            </summary>
            <param name="extension">The extension.</param>
            <returns>The normalized extension.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.CombinePaths(System.String,System.String)">
            <summary>
            Combines the paths.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.IsRelative(System.String)">
            <summary>
            Determines whether the specified path is relative or is absolute.
            </summary>
            <param name="path">The input path.</param>
            <returns>
              <c>true</c> if the specified path is relative; otherwise, <c>false</c> if is relative.
            </returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.ConvertRelativePathToAbsolute(System.String)">
            <summary>
            Converts path relative to the engine startup folder into absolute path.
            </summary>
            <param name="path">Path relative to the engine directory.</param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.ConvertRelativePathToAbsolute(System.String,System.String)">
            <summary>
            Converts path relative to basePath into absolute path.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="path">Path relative to basePath.</param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.Reverse(System.String)">
            <summary>
            Reverses the specified input string.
            </summary>
            <param name="s">The string to reverse.</param>
            <returns>The reversed string.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.IncrementNameNumber(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Tries to parse number in the name brackets at the end of the value and then increment it to create a new name.
            Supports numbers at the end without brackets.
            </summary>
            <param name="name">The input name.</param>
            <param name="isValid">Custom function to validate the created name.</param>
            <returns>The new name.</returns>
        </member>
        <member name="T:FlaxEngine.Utils">
            <summary>
            Class with helper functions.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utils.MemoryCopy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies data from one memory location to another using an unmanaged memory pointers.
            </summary>
            <remarks>
            Uses low-level memcpy call.
            </remarks>
            <param name="source">The source location.</param>
            <param name="destination">The destination location.</param>
            <param name="length">The length (amount of bytes to copy).</param>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo1DecimalPlace(System.Single)">
            <summary>
            Rounds the floating point value up to 1 decimal place.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo2DecimalPlaces(System.Single)">
            <summary>
            Rounds the floating point value up to 2 decimal places.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo3DecimalPlaces(System.Single)">
            <summary>
            Rounds the floating point value up to 3 decimal places.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetEmptyArray``1">
            <summary>
            Gets the empty array of the given type (shared one).
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The empty array object.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(``0[],``0[])">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(``0[],System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetAssemblyByName(System.String)">
            <summary>
            Gets the assembly with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The assembly or null if not found.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetAssemblyByName(System.String,System.Reflection.Assembly[])">
            <summary>
            Gets the assembly with the given name.
            </summary>
            <param name="name">The name.</param>
            <param name="assemblies">The assemblies collection to search for.</param>
            <returns>The assembly or null if not found.</returns>
        </member>
        <member name="T:UnmanagedCallAttribute">
            <summary>
            Attribute that marks methods and properties that call unmanaged code directly.
            </summary>
        </member>
    </members>
</doc>
