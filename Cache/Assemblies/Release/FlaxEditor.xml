<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlaxEditor</name>
    </assembly>
    <members>
        <member name="T:FlaxEditor.Editor">
            <summary>
            The main managed editor class. Editor root object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.Instance">
            <summary>
            Gets the Editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LocalCachePath">
            <summary>
            The path to the local cache folder shared by all the installed editor instance for a given user (used also by the Flax Launcher).
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsFlaxEngineTheBest">
            <summary>
            Gets a value indicating whether Flax Engine is the best in the world.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.IsDevInstance">
            <summary>
            Gets a value indicating whether this Editor is running a dev instance of the engine.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Windows">
            <summary>
            The windows module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.UI">
            <summary>
            The UI module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Thumbnails">
            <summary>
            The thumbnails module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Simulation">
            <summary>
            The simulation module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Scene">
            <summary>
            The scene module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Prefabs">
            <summary>
            The prefabs module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.SceneEditing">
            <summary>
            The scene editing module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ProgressReporting">
            <summary>
            The progress reporting module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentEditing">
            <summary>
            The content editing module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentDatabase">
            <summary>
            The content database module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ContentImporting">
            <summary>
            The content importing module.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.CodeEditing">
            <summary>
            The content editing
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.StateMachine">
            <summary>
            The editor state machine.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Options">
            <summary>
            The editor options manager.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.ProjectCache">
            <summary>
            The editor per-project cache manager.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Undo">
            <summary>
            The undo/redo
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.Icons">
            <summary>
            The icons container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.MainTransformGizmo">
            <summary>
            Gets the main transform gizmo used by the <see cref="T:FlaxEditor.Windows.SceneEditorWindow"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsHeadlessMode">
            <summary>
            Gets a value indicating whether this instance is running in  `headless` mode. No windows or popups should be shown. Used in CL environment (without a graphical user interface).
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.ProjectInfo">
            <summary>
            Gets the project information structure. Loaded on editor startup.
            </summary>
        </member>
        <member name="P:FlaxEditor.Editor.IsInitialized">
            <summary>
            Gets a value indicating whether Editor instance is initialized.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.InitializationStart">
            <summary>
            Occurs when editor initialization starts. All editor modules already received OnInit callback and editor splash screen is visible.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.InitializationEnd">
            <summary>
            Occurs when editor initialization ends. All editor modules already received OnEndInit callback and editor splash screen will be closed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.PerformUndo">
            <summary>
            Undo last action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.PerformRedo">
            <summary>
            Redo last action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.SaveAll">
            <summary>
            Saves all changes (scenes, assets, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.OpenProject(System.String)">
            <summary>
            Closes this project with running editor and opens the given project.
            </summary>
            <param name="projectFilePath">The project file path.</param>
        </member>
        <member name="M:FlaxEditor.Editor.EnsureState(FlaxEditor.States.EditorState)">
            <summary>
            Ensure that editor is in a given state, otherwise throws <see cref="T:FlaxEditor.States.InvalidStateException"/>.
            </summary>
            <param name="state">Valid state to check.</param>
            <exception cref="T:FlaxEditor.States.InvalidStateException"></exception>
        </member>
        <member name="M:FlaxEditor.Editor.EnsureState``1">
            <summary>
            Ensure that editor is in a state of given type, otherwise throws <see cref="T:FlaxEditor.States.InvalidStateException"/>.
            </summary>
            <typeparam name="TStateType">The type of the state type.</typeparam>
        </member>
        <member name="M:FlaxEditor.Editor.Log(System.String)">
            <summary>
            Logs the specified message to the log file.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:FlaxEditor.Editor.LogWarning(System.String)">
            <summary>
            Logs the specified warning message to the log file.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:FlaxEditor.Editor.LogWarning(System.Exception)">
            <summary>
            Logs the specified warning exception to the log file.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FlaxEditor.Editor.LogError(System.String)">
            <summary>
            Logs the specified error message to the log file.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="T:FlaxEditor.Editor.NewAssetType">
            <summary>
            New asset types allowed to create.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.Material">
            <summary>
            The material. See <see cref="T:FlaxEngine.Material"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.MaterialInstance">
            <summary>
            The material instance. See <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.CollisionData">
            <summary>
            The collision data. See <see cref="T:FlaxEngine.CollisionData"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.AnimationGraph">
            <summary>
            The animation graph. See <see cref="T:FlaxEngine.AnimationGraph"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.NewAssetType.SkeletonMask">
            <summary>
            The skeleton mask. See <see cref="T:FlaxEngine.SkeletonMask"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String)">
            <summary>
            Imports the asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String,FlaxEditor.Content.Import.TextureImportSettings)">
            <summary>
            Imports the texture asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <param name="settings">The settings.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String,FlaxEditor.Content.Import.ModelImportSettings)">
            <summary>
            Imports the model asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <param name="settings">The settings.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Import(System.String,System.String,FlaxEditor.Content.Import.AudioImportSettings)">
            <summary>
            Imports the audio asset file to the target location.
            </summary>
            <param name="inputPath">The source file path.</param>
            <param name="outputPath">The result asset file path.</param>
            <param name="settings">The settings.</param>
            <returns>True if importing failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.SaveJsonAsset(System.String,System.Object)">
            <summary>
            Serializes the given object to json asset.
            </summary>
            <param name="outputPath">The result asset file path.</param>
            <param name="obj">The obj to serialize.</param>
            <returns>True if saving failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.CookMeshCollision(System.String,FlaxEngine.CollisionDataType,FlaxEngine.Model,System.Int32,FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and saves it to the asset using <see cref="T:FlaxEngine.CollisionData"/> format. action cannot be performed on a main thread.
            </summary>
            <param name="path">The output asset path.</param>
            <param name="type">The collision data type.</param>
            <param name="model">The source model.</param>
            <param name="modelLodIndex">The source model LOD index.</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.GetMaterialShaderSourceCode(FlaxEngine.Material)">
            <summary>
            Gets the material shader source code (HLSL shader code).
            </summary>
            <param name="asset">The material asset.</param>
            <returns>The generated source code.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.CreatePrefab(System.String,FlaxEngine.Actor,System.Boolean)">
            <summary>
            Creates the prefab asset from the given root actor. Saves it to the output file path.
            </summary>
            <param name="path">The output asset path.</param>
            <param name="actor">The target actor (prefab root). It cannot be a scene but it can contain a scripts and/or full hierarchy of objects to save.</param>
            <param name="autoLink">True if auto connect the target actor and related objects to the created prefab.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.GetActorEditorSphere(FlaxEngine.Actor,FlaxEngine.BoundingSphere@)">
            <summary>
            Gets the actor bounding sphere (including child actors).
            </summary>
            <param name="actor">The actor.</param>
            <param name="sphere">The bounding sphere.</param>
        </member>
        <member name="M:FlaxEditor.Editor.GetActorEditorBox(FlaxEngine.Actor,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the actor bounding box (including child actors).
            </summary>
            <param name="actor">The actor.</param>
            <param name="box">The bounding box.</param>
        </member>
        <member name="E:FlaxEditor.Editor.EnvProbeBakeStart">
            <summary>
            Occurs when environment probe baking starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.EnvProbeBakeEnd">
            <summary>
            Occurs when environment probe baking ends.
            </summary>
        </member>
        <member name="T:FlaxEditor.Editor.LightmapsBakeSteps">
            <summary>
            Lightmaps baking steps.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.CacheEntries">
            <summary>
            The cache entries stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.GenerateLightmapCharts">
            <summary>
            The generate lightmap charts stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.PackLightmapCharts">
            <summary>
            The pack lightmap charts stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.UpdateLightmapsCollection">
            <summary>
            The update lightmaps collection stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.UpdateEntries">
            <summary>
            The update entries stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.GenerateHemispheresCache">
            <summary>
            The generate hemispheres cache stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.RenderHemispheres">
            <summary>
            The render hemispheres stage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Editor.LightmapsBakeSteps.Cleanup">
            <summary>
            The cleanup stage.
            </summary>
        </member>
        <member name="T:FlaxEditor.Editor.LightmapsBakeProgressDelegate">
            <summary>
            Lightmaps baking progress event delegate.
            </summary>
            <param name="step">The current step.</param>
            <param name="stepProgress">The current step progress (normalized to [0;1]).</param>
            <param name="totalProgress">The total baking progress (normalized to [0;1]).</param>
        </member>
        <member name="T:FlaxEditor.Editor.LightmapsBakeEndDelegate">
            <summary>
            Lightmaps baking nd event delegate.
            </summary>
            <param name="failed">True if baking failed or has been canceled, otherwise false.</param>
        </member>
        <member name="E:FlaxEditor.Editor.LightmapsBakeStart">
            <summary>
            Occurs when lightmaps baking starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.LightmapsBakeEnd">
            <summary>
            Occurs when lightmaps baking ends.
            </summary>
        </member>
        <member name="E:FlaxEditor.Editor.LightmapsBakeProgress">
            <summary>
            Occurs when lightmaps baking progress changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.BakeLightmapsOrCancel">
            <summary>
            Starts lightmaps baking for the open scenes or cancel it if already running.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.ClearLightmaps">
            <summary>
            Clears the lightmaps linkage for all open scenes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.CloseSplashScreen">
            <summary>
            Closes editor splash screen popup window.
            </summary>
        </member>
        <member name="M:FlaxEditor.Editor.CreateAsset(FlaxEditor.Editor.NewAssetType,System.String)">
            <summary>
            Creates new asset at the target location.
            </summary>
            <param name="type">New asset type.</param>
            <param name="outputPath">Output asset path.</param>
        </member>
        <member name="M:FlaxEditor.Editor.CanImport(System.String)">
            <summary>
            Checks if can import asset with the given extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>True if can import files with given extension, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.CanExport(System.String)">
            <summary>
            Checks if the given asset can be exported.
            </summary>
            <param name="path">The asset path (absolute path with an extension).</param>
            <returns>True if can export given asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Editor.Export(System.String,System.String)">
            <summary>
            Exports the given asset to the specified file location.
            </summary>
            <param name="inputPath">The input asset path (absolute path with an extension).</param>
            <param name="outputFolder">The output folder path (filename with extension is computed by auto).</param>
            <returns>True if given asset has been exported, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Editor.IsEveryAssemblyLoaded">
            <summary>
            Checks if every managed assembly has been loaded (including user scripts assembly).
            </summary>
        </member>
        <member name="T:FlaxEditor.Profiling.MainStats">
            <summary>
            Engine profiling data header. Contains main info and stats.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.ProcessMemory_UsedPhysicalMemory">
            <summary>
            The process CPU memory stats. Amount of used physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.ProcessMemory_UsedVirtualMemory">
            <summary>
            The process CPU memory stats.  Amount of used virtual memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.MemoryCPU_TotalPhysicalMemory">
            <summary>
            The CPU memory stats. Total amount of physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.MemoryCPU_UsedPhysicalMemory">
            <summary>
            The CPU memory stats. Amount of used physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.MemoryCPU_TotalVrtualMemory">
            <summary>
            The CPU memory stats. Total amount of virtual memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.MemoryCPU_UsedVirtualMemory">
            <summary>
            The CPU memory stats. Amount of used virtual memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.MemoryGPU_Total">
            <summary>
            The GPU memory stats. Total amount of memory in bytes (as reported by the driver).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.MemoryGPU_Used">
            <summary>
            The GPU memory stats. Used by the game amount of memory in bytes (estimated).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.FPS">
            <summary>
            The frames per second (fps counter).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.UpdateTimeMs">
            <summary>
            The update time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.PhysicsTimeMs">
            <summary>
            The fixed update time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.MainStats.DrawTimeMs">
            <summary>
            The draw time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="T:FlaxEditor.Profiling.EventCPU">
            <summary>
            The CPU profiling event data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventCPU.Start">
            <summary>
            The start time (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventCPU.End">
            <summary>
            The end time (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventCPU.Depth">
            <summary>
            The event depth (0 for root events).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventCPU.MemoryAllocation">
            <summary>
            The dynamic memory allocation size during this event (excluding the child events). Given value is in bytes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventCPU.Name">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="T:FlaxEditor.Profiling.ThreadStats">
            <summary>
            The CPU thread profiling data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.ThreadStats.Name">
            <summary>
            The thread name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.ThreadStats.Events">
            <summary>
            The events recorded since last profiling update.
            </summary>
        </member>
        <member name="T:FlaxEditor.Profiling.EventGPU">
            <summary>
            The GPU profiling event data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventGPU.Time">
            <summary>
            The event execution time on a GPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventGPU.Depth">
            <summary>
            The event depth (0 for root events).
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventGPU.Stats">
            <summary>
            The rendering stats for this event.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.EventGPU.Name">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="T:FlaxEditor.Profiling.RenderStatsData">
            <summary>
            Object that stores various render statistics.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.RenderStatsData.DrawCalls">
            <summary>
            The draw calls count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.RenderStatsData.ComputeCalls">
            <summary>
            The compute shader calls count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.RenderStatsData.Vertices">
            <summary>
            The vertices drawn count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.RenderStatsData.Triangles">
            <summary>
            The triangles drawn count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Profiling.RenderStatsData.PipelineStateChanges">
            <summary>
            The pipeline state changes count.
            </summary>
        </member>
        <member name="T:FlaxEditor.Profiling.ProfilingTools">
            <summary>
            Profiler tools for editor. Allows to gather profiling data and events from the engine.
            </summary>
        </member>
        <member name="P:FlaxEditor.Profiling.ProfilingTools.Stats">
            <summary>
            Gets the collected main stats by the profiler from local or remote session.
            </summary>
        </member>
        <member name="M:FlaxEditor.Profiling.ProfilingTools.GetEventsCPU">
            <summary>
            Gets the collected CPU events by the profiler from local or remote session.
            </summary>
            <returns>Buffer with events per thread.</returns>
        </member>
        <member name="M:FlaxEditor.Profiling.ProfilingTools.GetEventsGPU">
            <summary>
            Gets the collected GPU events by the profiler from local or remote session.
            </summary>
            <returns>Buffer with rendering events.</returns>
        </member>
        <member name="T:FlaxEditor.FoliageTools">
            <summary>
            Foliage tools for editor. Allows to spawn and modify foliage instances.
            </summary>
        </member>
        <member name="M:FlaxEditor.FoliageTools.Paint(FlaxEngine.Foliage,System.Int32[],FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Paints the foliage instances using the given foliage types selection and the brush location.
            </summary>
            <param name="foliage">The foliage actor.</param>
            <param name="foliageTypesIndices">The non-empty array of foliage types indices. Each array element is a zero-based index of the foliage instance type descriptor to use for painting.</param>
            <param name="brushPosition">The brush location (world space).</param>
            <param name="brushRadius">The brush radius (world space).</param>
            <param name="additive">True if paint with new instance, otherwise will remove existing ones.</param>
        </member>
        <member name="M:FlaxEditor.FoliageTools.Intersects(FlaxEngine.Foliage,FlaxEngine.Ray,System.Single@,FlaxEngine.Vector3@,System.Int32@)">
            <summary>
            Paints the foliage instances using the given foliage types selection and the brush location.
            </summary>
            <param name="foliage">The foliage actor.</param>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <param name="instanceIndex">When the method completes, contains zero-based index of the foliage instance that is the closest to the ray.</param>
            <returns>True whether the two objects intersected, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.BuildOptions">
            <summary>
            Game building options. Used as flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildOptions.None">
            <summary>
            No special options declared.
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildOptions.Debug">
            <summary>
            The debug build mode (opposite to release mode).
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildOptions.ShowOutput">
            <summary>
            Shows the output directory folder on building end.
            </summary>
        </member>
        <member name="T:FlaxEditor.BuildPlatform">
            <summary>
            Game build target platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildPlatform.Windows32">
            <summary>
            Windows x86 (32-bit architecture)
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildPlatform.Windows64">
            <summary>
            Windows x64 (64-bit architecture)
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildPlatform.WindowsStoreX86">
            <summary>
            Universal Windows Platform (UWP) (x86 architecture)
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildPlatform.WindowsStoreX64">
            <summary>
            Universal Windows Platform (UWP) (x64 architecture)
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildPlatform.XboxOne">
            <summary>
            Xbox One (x64 architecture)
            </summary>
        </member>
        <member name="T:FlaxEditor.BuildMode">
            <summary>
            The build mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildMode.Release">
            <summary>
            The release configuration.
            </summary>
        </member>
        <member name="F:FlaxEditor.BuildMode.Debug">
            <summary>
            The debug configuration.
            </summary>
        </member>
        <member name="T:FlaxEditor.GameCooker">
            <summary>
            Game building service. Processes project files and outputs build game for a target platform.
            </summary>
        </member>
        <member name="T:FlaxEditor.GameCooker.Options">
            <summary>
            Build options data.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.Platform">
            <summary>
            The platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.Flags">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.OutputPath">
            <summary>
            The output path (normalized, absolute).
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.Options.Defines">
            <summary>
            The custom defines.
            </summary>
        </member>
        <member name="M:FlaxEditor.GameCooker.Build(FlaxEditor.BuildPlatform,FlaxEditor.BuildOptions,System.String,System.String[])">
            <summary>
            Starts building game for the specified platform.
            </summary>
            <param name="platform">The target platform.</param>
            <param name="options">The build options.</param>
            <param name="outputPath">The output path (output directory).</param>
            <param name="defines">Scripts compilation define symbols (macros).</param>
        </member>
        <member name="T:FlaxEditor.GameCooker.EventType">
            <summary>
            Building event type.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.EventType.BuildStarted">
            <summary>
            The build started.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.EventType.BuildFailed">
            <summary>
            The build failed.
            </summary>
        </member>
        <member name="F:FlaxEditor.GameCooker.EventType.BuildDone">
            <summary>
            The build done.
            </summary>
        </member>
        <member name="T:FlaxEditor.GameCooker.BuildEventDelegate">
            <summary>
            Game building event delegate.
            </summary>
            <param name="type">The type.</param>
            <param name="options">The build options (read only).</param>
        </member>
        <member name="T:FlaxEditor.GameCooker.BuildProgressDelegate">
            <summary>
            Game building progress reporting delegate type.
            </summary>
            <param name="info">The information text.</param>
            <param name="totalProgress">The total progress percentage (normalized to 0-1).</param>
        </member>
        <member name="E:FlaxEditor.GameCooker.Event">
            <summary>
            Occurs when building event rises.
            </summary>
        </member>
        <member name="E:FlaxEditor.GameCooker.Progress">
            <summary>
            Occurs when building game progress fires.
            </summary>
        </member>
        <member name="M:FlaxEditor.GameCooker.GetPlatformType(FlaxEditor.BuildPlatform)">
            <summary>
            Gets the type of the platform from the game build platform type.
            </summary>
            <param name="buildPlatform">The build platform.</param>
            <returns>The run-type platform type.</returns>
        </member>
        <member name="P:FlaxEditor.GameCooker.IsRunning">
            <summary>
            Determines whether game building is running.
            </summary>
        </member>
        <member name="P:FlaxEditor.GameCooker.IsCancelRequested">
            <summary>
            Determines whether building cancel has been requested.
            </summary>
        </member>
        <member name="M:FlaxEditor.GameCooker.Cancel(System.Boolean)">
            <summary>
            Sends a cancel event to the game building service.
            </summary>
            <param name="waitForEnd">If set to <c>true</c> wait for the stopped building end.</param>
        </member>
        <member name="T:FlaxEditor.Scripting.ScriptsBuilder">
            <summary>
            Game scrips building service. Compiles user C# scripts into binary assemblies.
            Exposes many events used to track scripts compilation and reloading.
            </summary>
            <summary>
            Game scrips building service. Compiles user C# scripts into binary assemblies.
            </summary>
        </member>
        <member name="T:FlaxEditor.Scripting.ScriptsBuilder.CompilationEndDelegate">
            <summary>
            Compilation end event delegate.
            </summary>
            <param name="success">False if compilation has failed, otherwise true.</param>
        </member>
        <member name="T:FlaxEditor.Scripting.ScriptsBuilder.CompilationMessageDelegate">
            <summary>
            Compilation message events delegate.
            </summary>
            <param name="message">The message.</param>
            <param name="file">The target file.</param>
            <param name="line">The target line.</param>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationEnd">
            <summary>
            Occurs when compilation ends.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationSuccess">
            <summary>
            Occurs when compilation success.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationFailed">
            <summary>
            Occurs when compilation failed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationBegin">
            <summary>
            Occurs when compilation begins.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationStarted">
            <summary>
            Occurs when compilation just started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.ScriptsReloadCalled">
            <summary>
            Occurs when user scripts reload action is called.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.ScriptsReloadBegin">
            <summary>
            Occurs when user scripts reload starts.
            User objects should be removed at this point to reduce leaks and issues. Game scripts and game editor scripts assemblies will be reloaded.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.ScriptsReload">
            <summary>
            Occurs when user scripts reload is performed (just before the actual reload, scenes are serialized and unloaded). All user objects should be cleanup.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.ScriptsReloadEnd">
            <summary>
            Occurs when user scripts reload ends.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationError">
            <summary>
            Occurs on compilation error.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CompilationWarning">
            <summary>
            Occurs on compilation warning.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CodeEditorAsyncOpenBegin">
            <summary>
            Occurs when code editor starts asynchronous open a file or a solution.
            </summary>
        </member>
        <member name="E:FlaxEditor.Scripting.ScriptsBuilder.CodeEditorAsyncOpenEnd">
            <summary>
            Occurs when code editor ends asynchronous open a file or a solution.
            </summary>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.CheckForCompile">
            <summary>
            Checks if need to compile source code. If so calls compilation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Scripting.ScriptsBuilder.CompilationsCount">
            <summary>
            Gets amount of source code compile actions since Editor startup.
            </summary>
        </member>
        <member name="P:FlaxEditor.Scripting.ScriptsBuilder.SolutionPath">
            <summary>
            Gets the solution file path.
            </summary>
        </member>
        <member name="P:FlaxEditor.Scripting.ScriptsBuilder.IsSourceDirty">
            <summary>
            Returns true if source code has been edited since last compilation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Scripting.ScriptsBuilder.IsReady">
            <summary>
            Returns true if source code has been compiled and assemblies are ready to load.
            </summary>
        </member>
        <member name="P:FlaxEditor.Scripting.ScriptsBuilder.LastCompilationFailed">
            <summary>
            Checks if last scripting building failed due to errors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.MarkWorkspaceDirty">
            <summary>
            Indicates that scripting directory has been modified so scripts need to be rebuild.
            </summary>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.Compile">
            <summary>
            Requests project source code compilation.
            </summary>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.GeneratePluginProject(System.String)">
            <summary>
            Generates Visual Studio solution and project files for project as a plugin.
            </summary>
            <param name="assemblyName">Assembly name for the plugin.</param>
            <returns>True if cannot generate project files, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.GenerateProject(System.Boolean,System.Boolean)">
            <summary>
            Generates solution and project files.
            </summary>
            <param name="forceGenerateSolution">True if generate solution file by force even if there is no need to.</param>
            <param name="forceGenerateProject">True if generate project files by force even if there is no need to.</param>
            <returns>True if cannot perform that action, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.FindScript(System.String)">
            <summary>
            Tries to find a script type with the given name.
            </summary>
            <param name="name">The script full name.</param>
            <returns>Found script type or null if missing or invalid name.</returns>
        </member>
        <member name="M:FlaxEditor.Scripting.ScriptsBuilder.Compile(System.String,FlaxEditor.BuildMode)">
            <summary>
            Compiles the specified solution project.
            </summary>
            <remarks>
            It does not fire any CompileBegin, CompileEnd or other events except compilation warnings and errors. Also does not fires any scripting assemblies reload or any other actions. Scripts compilation is performed on a separate process.
            </remarks>
            <param name="solutionPath">The solution path (normalized, full path).</param>
            <param name="configuration">The build configuration.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.TerrainTools">
            <summary>
            Terrain tools for editor. Allows to create and modify terrain.
            </summary>
        </member>
        <member name="M:FlaxEditor.TerrainTools.RayCastChunk(FlaxEngine.Terrain,FlaxEngine.Ray,System.Single@,FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single)">
            <summary>
            Performs a raycast against this terrain collision shape. Returns the hit chunk.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="ray">The ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="resultPatchCoord">The raycast result hit terrain patch coordinates (x and z). Valid only if raycast hits anything.</param>
            <param name="resultChunkCoord">The raycast result hit terrain chunk coordinates (relative to the patch, x and z). Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.SerializePatch(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Serializes the terrain chunk data to JSON string.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <returns>The serialized chunk data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.DeserializePatch(FlaxEngine.Terrain,FlaxEngine.Int2@,System.String)">
            <summary>
            Deserializes the terrain chunk data from the JSON string.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="value">The JSON string with serialized patch data.</param>
        </member>
        <member name="M:FlaxEditor.TerrainTools.TryGetPatchCoordToAdd(FlaxEngine.Terrain,FlaxEngine.Ray,FlaxEngine.Int2@)">
            <summary>
            Checks if a given ray hits any of the terrain patches sides to add a new patch there.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="ray">The ray to use for tracing (eg. mouse ray in world space).</param>
            <param name="patchCoord">The result patch coordinates (x and z). Valid only when method returns true.</param>
            <returns>True if result is valid, otherwise nothing to add there.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.InitializePatch(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Initializes the patch heightmap and collision to the default flat level.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to initialize it.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ModifyHeightMap(FlaxEngine.Terrain,FlaxEngine.Int2@,System.IntPtr,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Modifies the terrain patch heightmap with the given samples.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to modify it.</param>
            <param name="samples">The samples. The array length is size.X*size.Y. It has to be type of float.</param>
            <param name="offset">The offset from the first row and column of the heightmap data (offset destination x and z start position).</param>
            <param name="size">The size of the heightmap to modify (x and z). Amount of samples in each direction.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ModifyHolesMask(FlaxEngine.Terrain,FlaxEngine.Int2@,System.IntPtr,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Modifies the terrain patch holes mask with the given samples.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to modify it.</param>
            <param name="samples">The samples. The array length is size.X*size.Y. It has to be type of byte.</param>
            <param name="offset">The offset from the first row and column of the mask data (offset destination x and z start position).</param>
            <param name="size">The size of the mask to modify (x and z). Amount of samples in each direction.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.ModifySplatMap(FlaxEngine.Terrain,FlaxEngine.Int2@,System.Int32,System.IntPtr,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Modifies the terrain patch splat map (layers mask) with the given samples.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to modify it.</param>
            <param name="index">The zero-based splatmap texture index.</param>
            <param name="samples">The samples. The array length is size.X*size.Y. It has to be type of <see cref="T:FlaxEngine.Color32"/>.</param>
            <param name="offset">The offset from the first row and column of the splatmap data (offset destination x and z start position).</param>
            <param name="size">The size of the splatmap to modify (x and z). Amount of samples in each direction.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GetHeightmapData(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Gets the raw pointer to the heightmap data (cached internally by the c++ core in editor).
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to gather it.</param>
            <returns>The pointer to the array of floats with terrain patch heights data. Null if failed to gather the data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GetHolesMaskData(FlaxEngine.Terrain,FlaxEngine.Int2@)">
            <summary>
            Gets the raw pointer to the holes mask data (cached internally by the c++ core in editor).
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to gather it.</param>
            <returns>The pointer to the array of bytes with terrain patch holes mask data. Null if failed to gather the data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GetSplatMapData(FlaxEngine.Terrain,FlaxEngine.Int2@,System.Int32)">
            <summary>
            Gets the raw pointer to the splatmap data (cached internally by the c++ core in editor).
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="patchCoord">The patch coordinates (x and z) to gather it.</param>
            <param name="index">The zero-based splatmap texture index.</param>
            <returns>The pointer to the array of Color32 with terrain patch packed splatmap data. Null if failed to gather the data.</returns>
        </member>
        <member name="M:FlaxEditor.TerrainTools.GenerateTerrain(FlaxEngine.Terrain,FlaxEngine.Int2@,FlaxEngine.Texture,System.Single,FlaxEngine.Texture,FlaxEngine.Texture)">
            <summary>
            Generates the terrain from the input heightmap and splat maps.
            </summary>
            <param name="terrain">The terrain.</param>
            <param name="numberOfPatches">The number of patches (X and Z axis).</param>
            <param name="heightmap">The heightmap texture.</param>
            <param name="heightmapScale">The heightmap scale. Applied to adjust the normalized heightmap values into the world units.</param>
            <param name="splatmap1">The custom terrain splat map used as a source of the terrain layers weights. Each channel from RGBA is used as an independent layer weight for terrain layers compositing. It's optional.</param>
            <param name="splatmap2">The custom terrain splat map used as a source of the terrain layers weights. Each channel from RGBA is used as an independent layer weight for terrain layers compositing. It's optional.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.PreviewsCache">
            <summary>
            Asset which contains set of asset items thumbnails (cached previews).
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconSize">
            <summary>
            The default asset previews icon size (both width and height since it's a square).
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsAtlasSize">
            <summary>
            The default assets previews atlas size
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsAtlasMargin">
            <summary>
            The default assets previews atlas margin (between icons)
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsPerRow">
            <summary>
            The amount of asset icons per atlas row.
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsPerAtlas">
            <summary>
            The amount of asset icons per atlas.
            </summary>
        </member>
        <member name="F:FlaxEditor.PreviewsCache.AssetIconsAtlasFormat">
            <summary>
            The default format of previews atlas.
            </summary>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.#ctor">
            <summary>
            Creates new <see cref="T:FlaxEditor.PreviewsCache"/> object.
            </summary>
        </member>
        <member name="P:FlaxEditor.PreviewsCache.IsReady">
            <summary>
            Checks if previews atlas is ready to be used (is loaded and has texture streamed).
            </summary>
        </member>
        <member name="P:FlaxEditor.PreviewsCache.HasFreeSlot">
            <summary>
            Check if there is any free slot in the atlas.
            </summary>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.Flush">
            <summary>
            Flushes atlas data.
            </summary>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.FindSlot(System.Guid)">
            <summary>
            Tries to find slot used by the given asset id.
            </summary>
            <param name="assetId">The asset identifier.</param>
            <returns>Found sprite or Sprite.Invalid if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.OccupySlot(FlaxEngine.Rendering.RenderTarget,System.Guid)">
            <summary>
            Occupies the atlas slot.
            </summary>
            <param name="renderTarget">The source texture to insert.</param>
            <param name="assetId">The asset identifier.</param>
            <returns>Created sprite or Sprite.Invalid if failed.</returns>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.ReleaseSlot(System.Guid)">
            <summary>
            Releases atlas slot used by the given asset.
            </summary>
            <param name="assetId">The asset identifier.</param>
            <returns>True if slot has been released, otherwise false if no slot has been used by the given asset.</returns>
        </member>
        <member name="M:FlaxEditor.PreviewsCache.Create(System.String)">
            <summary>
            Creates new previews cache atlas asset.
            </summary>
            <param name="path">The asset path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.AssetItemConverter">
            <summary>
            Serialize references to the FlaxEngine.Object as Guid (format N).
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEditor.Content.AssetItemConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItemConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItemConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.CreateFileEntry">
            <summary>
            File create entry.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.SourceUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.ResultUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.HasSettings">
            <summary>
            Gets a value indicating whether this entry has settings to modify.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.CreateFileEntry.Settings">
            <summary>
            Gets or sets the settings object to modify.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFileEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.CreateFileEntry"/> class.
            </summary>
            <param name="outputType">The output file type.</param>
            <param name="resultUrl">The result file url.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFileEntry.Create">
            <summary>
            Creates the result file.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFileEntry.Execute">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.CreateFilesDialog">
            <summary>
            Dialog used to edit new file settings.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFilesDialog.#ctor(FlaxEditor.Content.Create.CreateFileEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.CreateFilesDialog"/> class.
            </summary>
            <param name="entry">The entry to edit it's settings.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.CreateFilesDialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Create.SettingsCreateEntry">
            <summary>
            Engine settings asset creating handler. Allows to specify type of the settings to create (e.g. <see cref="T:FlaxEditor.Content.Settings.GameSettings"/>, <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>, etc.).
            </summary>
            <seealso cref="T:FlaxEditor.Content.Create.CreateFileEntry" />
        </member>
        <member name="T:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes">
            <summary>
            Types of the settings assets that can be created.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.GameSettings">
            <summary>
            The game settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.AudioSettings">
            <summary>
            The audio settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.TimeSettings">
            <summary>
            The time settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.LayersAndTagsSettings">
            <summary>
            The layers and tags settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.PhysicsSettings">
            <summary>
            The physics settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.GraphicsSettings">
            <summary>
            The graphics settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.NavigationSettings">
            <summary>
            The navigation settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.BuildSettings">
            <summary>
            The build settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.InputSettings">
            <summary>
            The input settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.WindowsPlatformSettings">
            <summary>
            The Windows settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.SettingsTypes.UWPPlatformSettings">
            <summary>
            The UWP settings.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Create.SettingsCreateEntry.Options">
            <summary>
            The create options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Create.SettingsCreateEntry.Options.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Create.SettingsCreateEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Create.SettingsCreateEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Create.SettingsCreateEntry"/> class.
            </summary>
            <param name="resultUrl">The result file url.</param>
        </member>
        <member name="M:FlaxEditor.Content.Create.SettingsCreateEntry.Create">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GUI.ContentNavigationButton">
            <summary>
            A navigation button for <see cref="T:FlaxEditor.Windows.ContentWindow"/>.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.NavigationButton" />
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentNavigationButton.TargetNode">
            <summary>
            Gets the target node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.#ctor(FlaxEditor.Content.ContentTreeNode,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.GUI.ContentNavigationButton"/> class.
            </summary>
            <param name="targetNode">The target node.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnClick">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentNavigationButton.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GUI.ContentView">
            <summary>
            Main control for <see cref="T:FlaxEditor.Windows.ContentWindow"/> used to present collection of <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
            <seealso cref="T:FlaxEditor.Content.IContentItemOwner" />
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnOpen">
            <summary>
            Called when user wants to open the item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnRename">
            <summary>
            Called when user wants to rename the item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnDelete">
            <summary>
            Called when user wants to delete the item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnPaste">
            <summary>
            Called when user wants to paste the files/folders.
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnDuplicate">
            <summary>
            Called when user wants to duplicate the item(s).
            </summary>
        </member>
        <member name="E:FlaxEditor.Content.GUI.ContentView.OnNavigateBack">
            <summary>
            Called when user wants to navigate backward.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.Selection">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.SelectedCount">
            <summary>
            Gets the selected count.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.HasSelection">
            <summary>
            Gets a value indicating whether any item is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.GUI.ContentView.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.GUI.ContentView.IsSearching">
            <summary>
            Flag is used to indicate if user is searching for items. Used to show a proper message to the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.GUI.ContentView"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.ClearItems">
            <summary>
            Clears the items in the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.ShowItems(System.Collections.Generic.List{FlaxEditor.Content.ContentItem},System.Boolean)">
            <summary>
            Shows the items collection in the view.
            </summary>
            <param name="items">The items to show.</param>
            <param name="additive">If set to <c>true</c> items will be added to the current selection. Otherwise selection will be cleared before.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.IsSelected(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether the specified item is selected.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the specified item is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.ClearSelection">
            <summary>
            Clears the selected items collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Select(System.Collections.Generic.List{FlaxEditor.Content.ContentItem},System.Boolean)">
            <summary>
            Selects the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="additive">If set to <c>true</c> items will be added to the current selection. Otherwise selection will be cleared before.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Select(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Selects the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="additive">If set to <c>true</c> item will be added to the current selection. Otherwise selection will be cleared before.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.SelectAll">
            <summary>
            Selects all the items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Deselect(FlaxEditor.Content.ContentItem)">
            <summary>
            Deselects the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Duplicate">
            <summary>
            Duplicates the selected items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Copy">
            <summary>
            Copies the selected items (to the system clipboard).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.CanPaste">
            <summary>
            Returns true if user can paste data to the view (copied any files before).
            </summary>
            <returns>True if can paste files.</returns>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Paste">
            <summary>
            Pastes the copied items (from the system clipboard).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.SelectFirstItem">
            <summary>
            Gives focus and selects the first item in the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.RefreshThumbnails">
            <summary>
            Refreshes thumbnails of all items in the <see cref="T:FlaxEditor.Content.GUI.ContentView"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnItemClick(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when user clicks on an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnItemDoubleClickName(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when user wants to rename item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnItemDoubleClick(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when user wants to open item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.FlaxEditor#Content#IContentItemOwner#OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GUI.ContentView.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.Request">
            <summary>
            The content item import request data container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.InputPath">
            <summary>
            The input item path (folder or file).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.OutputPath">
            <summary>
            The output path (folder or file).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.IsBinaryAsset">
            <summary>
            Flag set to true for binary assets handled by the engine internally.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.SkipSettingsDialog">
            <summary>
            Flag used to skip showing import settings dialog to used. Can be used for importing assets from code by plugins.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.Request.Settings">
            <summary>
            The custom settings object.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.AssetImportEntry">
            <summary>
            Asset import entry.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.AssetImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.AssetImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.AudioImportSettings">
            <summary>
            Proxy object to present audio import settings in <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth">
            <summary>
            A custom set of bit depth audio import sizes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._8">
            <summary>
            The 8.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._16">
            <summary>
            The 16.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._24">
            <summary>
            The 24.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AudioImportSettings.CustomBitDepth._32">
            <summary>
            The 32.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportSettings.ConvertBitDepth(System.Int32)">
            <summary>
            Converts the bit depth to enum.
            </summary>
            <param name="f">The bit depth.</param>
            <returns>The converted enum.</returns>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.Format">
            <summary>
            The audio data format to import the audio clip as. 
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.CompressionQuality">
            <summary>
            The audio data compression quality. Used only if target format is using compression. Value 0 means the smallest size, value 1 means the best quality.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.DisableStreaming">
            <summary>
            Disables dynamic audio streaming. The whole clip will be loaded into the memory. Useful for small clips (eg. gunfire sounds).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.Is3D">
            <summary>
            Checks should the clip be played as spatial (3D) audio or as normal audio. 3D audio is stored in Mono format.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportSettings.BitDepth">
            <summary>
            The size of a single sample in bits. The clip will be converted to this bit depth on import.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportSettings.TryRestore(FlaxEditor.Content.Import.AudioImportSettings@,System.String)">
            <summary>
            Tries the restore the asset import options from the target resource file.
            </summary>
            <param name="options">The options.</param>
            <param name="assetPath">The asset path.</param>
            <returns>True settings has been restored, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.AudioImportEntry">
            <summary>
            Audio asset import entry.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Import.AssetImportEntry" />
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.AudioImportEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.AudioImportEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportEntry.TryOverrideSettings(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.AudioImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.FolderImportEntry">
            <summary>
            Folder import entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.FolderImportEntry.SkipSettingsDialog">
            <summary>
            Flag used to skip showing import settings dialog to used. Can be used for importing assets from code by plugins.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.FolderImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.FolderImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.ImportFileEntryHandler">
            <summary>
            Creates new <see cref="T:FlaxEditor.Content.Import.ImportFileEntry"/> for the given source file.
            </summary>
            <param name="request">The import request.</param>
            <returns>The file entry.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.ImportFileEntry">
            <summary>
            File import entry.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.SourceUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.ResultUrl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.HasSettings">
            <summary>
            Gets a value indicating whether this entry has settings to modify.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFileEntry.Settings">
            <summary>
            Gets or sets the settings object to modify.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.TryOverrideSettings(System.Object)">
            <summary>
            Tries the override import settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>True if settings override was successful and there is no need to edit them in dedicated dialog, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.ImportFileEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.ModifyResultFilename(System.String)">
            <summary>
            Modifies the result URL filename (keeps destination folder and extension).
            </summary>
            <param name="filename">The new filename.</param>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.Import">
            <summary>
            Performs file importing.
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="F:FlaxEditor.Content.Import.ImportFileEntry.FileTypes">
            <summary>
            The file types registered for importing. Key is a file extension (without a leading dot).
            Allows to plug custom importing options gather for different input file types.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.CreateEntry(FlaxEditor.Content.Import.Request@)">
            <summary>
            Creates the entry.
            </summary>
            <param name="request">The import request.</param>
            <returns>Created file entry.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFileEntry.Execute">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.ImportFilesDialog">
            <summary>
            Dialog used to edit import files settings.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="P:FlaxEditor.Content.Import.ImportFilesDialog.EntriesCount">
            <summary>
            Gets the entries count.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.#ctor(System.Collections.Generic.List{FlaxEditor.Content.Import.ImportFileEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/> class.
            </summary>
            <param name="entries">The entries to edit settings.</param>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.ItemNode.OnMouseDoubleClickHeader(FlaxEngine.Vector2@,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.ItemNode.StartRenaming">
            <summary>
            Shows the rename popup for the item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ImportFilesDialog.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelLightmapUVsSource">
            <summary>
            Importing model lightmap UVs source
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Disable">
            <summary>
            No lightmap UVs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Generate">
            <summary>
            Generate lightmap UVs from model geometry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel0">
            <summary>
            The texcoords channel 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel1">
            <summary>
            The texcoords channel 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel2">
            <summary>
            The texcoords channel 2.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelLightmapUVsSource.Channel3">
            <summary>
            The texcoords channel 3.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelType">
            <summary>
            Declares the imported data type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelType.Model">
            <summary>
            The model asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelType.SkinnedModel">
            <summary>
            The skinned model asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.ModelType.Animation">
            <summary>
            The animation asset.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.AnimationDuration">
            <summary>
            Declares the imported animation clip duration.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AnimationDuration.Imported">
            <summary>
            The imported duration.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.AnimationDuration.Custom">
            <summary>
            The custom duration specified via keyframes range.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelImportSettings">
            <summary>
            Proxy object to present model import settings in <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Type">
            <summary>
            Gets or sets the type of the imported asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.CalculateNormals">
            <summary>
            True if calculate model normals, otherwise will import them.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SmoothingNormalsAngle">
            <summary>
            Calculated normals smoothing angle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.CalculateTangents">
            <summary>
            True if calculate model tangents, otherwise will import them.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SmoothingTangentsAngle">
            <summary>
            Calculated normals smoothing angle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.OptimizeMeshes">
            <summary>
            Enable/disable meshes geometry optimization.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.MergeMeshes">
            <summary>
            Enable/disable geometry merge for meshes with the same materials.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportLODs">
            <summary>
            Enable/disable importing meshes Level of Details.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.ImportVertexColors">
            <summary>
            Enable/disable importing vertex colors (channel 0 only).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.LightmapUVsSource">
            <summary>
            The lightmap UVs source.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Scale">
            <summary>
            Custom uniform import scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Rotation">
            <summary>
            Custom import geometry rotation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Translation">
            <summary>
            Custom import geometry offset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.CenterGeometry">
            <summary>
            If checked, the imported geometry will be shifted to the center of mass.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.Duration">
            <summary>
            The imported animation duration mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.FramesRangeStart">
            <summary>
            The imported animation first frame index. Used only if Duration mode is set to Custom.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.FramesRangeEnd">
            <summary>
            The imported animation end frame index. Used only if Duration mode is set to Custom.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.DefaultFrameRate">
            <summary>
            The imported animation default frame rate. Can specify the default frames per second amount for imported animation. If value is 0 then the original animation frame rate will be used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SamplingRate">
            <summary>
            The imported animation sampling rate. If value is 0 then the original animation speed will be used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.SkipEmptyCurves">
            <summary>
            The imported animation will have removed tracks with no keyframes or unspecified data.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.OptimizeKeyframes">
            <summary>
            The imported animation channels will be optimized to remove redundant keyframes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.EnableRootMotion">
            <summary>
            Enables root motion extraction support from this animation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.RootNodeName">
            <summary>
            The custom node name to be used as a root motion source. If not specified the actual root node will be used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.AnimationIndex">
            <summary>
            The zero-based index for the animation clip to import. If the source file has more than one animation it can be used to pick a desire clip.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportSettings.RestoreMaterialsOnReimport">
            <summary>
            If checked, the importer will try to restore the model material slots.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportSettings.TryRestore(FlaxEditor.Content.Import.ModelImportSettings@,System.String)">
            <summary>
            Tries the restore the asset import options from the target resource file.
            </summary>
            <param name="options">The options.</param>
            <param name="assetPath">The asset path.</param>
            <returns>True settings has been restored, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.ModelImportEntry">
            <summary>
            Model asset import entry.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Import.AssetImportEntry" />
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.ModelImportEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.ModelImportEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportEntry.TryOverrideSettings(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.ModelImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureFormatType">
            <summary>
            Texture format types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.ColorRGB">
            <summary>
            The color with RGB channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.ColorRGBA">
            <summary>
            The color with RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.NormalMap">
            <summary>
            The normal map (packed and compressed).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.GrayScale">
            <summary>
            The gray scale (R channel).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.HdrRGBA">
            <summary>
            The HDR color (RGBA channels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureFormatType.HdrRGB">
            <summary>
            The HDR color (RGB channels).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings">
            <summary>
            Proxy object to present texture import settings in <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType">
            <summary>
            A custom version of <see cref="T:FlaxEditor.Content.Import.TextureFormatType"/> for GUI.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.ColorRGB">
            <summary>
            The color with RGB channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.ColorRGBA">
            <summary>
            The color with RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.NormalMap">
            <summary>
            The normal map (packed and compressed).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.GrayScale">
            <summary>
            The gray scale (R channel).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.HdrRGBA">
            <summary>
            The HDR color (RGBA channels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomTextureFormatType.HdrRGB">
            <summary>
            The HDR color (RGB channels).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType">
            <summary>
            A custom set of max texture import sizes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._32">
            <summary>
            The 32.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._64">
            <summary>
            The 64.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._128">
            <summary>
            The 128.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._256">
            <summary>
            The 256.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._512">
            <summary>
            The 512.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._1024">
            <summary>
            The 1024.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._2048">
            <summary>
            The 2048.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._4096">
            <summary>
            The 4096.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.CustomMaxSizeType._8192">
            <summary>
            The 8192.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportSettings.ConvertMaxSize(System.Int32)">
            <summary>
            Converts the maximum size to enum.
            </summary>
            <param name="f">The max size.</param>
            <returns>The converted enum.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo">
            <summary>
            The sprite info.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo.Area">
            <summary>
            The sprite area.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo.Name">
            <summary>
            The sprite name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo.#ctor(FlaxEngine.Rectangle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.TextureImportSettings.SpriteInfo"/> struct.
            </summary>
            <param name="area">The area.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Type">
            <summary>
            Texture format type
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.IsAtlas">
            <summary>
            True if texture should be imported as a texture atlas resource
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.NeverStream">
            <summary>
            True if disable dynamic texture streaming
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Compress">
            <summary>
            Enables/disables texture data compression.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.IndependentChannels">
            <summary>
            True if texture channels have independent data
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.IsSRGB">
            <summary>
            True if texture contains sRGB format and engine should keep that data format
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.GenerateMipMaps">
            <summary>
            True if generate mip maps chain for the texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.FlipY">
            <summary>
            True if flip Y coordinate of the texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Scale">
            <summary>
            The import texture scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.MaxSize">
            <summary>
            Maximum size of the texture (for both width and height).
            Higher resolution textures will be resized during importing process.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Resize">
            <summary>
            True if resize texture on import. Use Size property to define texture width and height. Texture scale property will be ignored.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportSettings.Size">
            <summary>
            Gets or sets the size of the imported texture. If Resize property is set to true then texture will be resized during the import to this value. Otherwise it will be ignored.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Import.TextureImportSettings.Sprites">
            <summary>
            The sprites. Used to keep created sprites on sprite atlas reimport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportSettings.TryRestore(FlaxEditor.Content.Import.TextureImportSettings@,System.String)">
            <summary>
            Tries the restore the asset import options from the target resource file.
            </summary>
            <param name="options">The options.</param>
            <param name="assetPath">The asset path.</param>
            <returns>True settings has been restored, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Import.TextureImportEntry">
            <summary>
            Texture asset import entry.
            </summary>
            <seealso cref="T:FlaxEditor.Content.Import.AssetImportEntry" />
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportEntry.#ctor(FlaxEditor.Content.Import.Request@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Import.TextureImportEntry"/> class.
            </summary>
            <param name="request">The import request.</param>
        </member>
        <member name="P:FlaxEditor.Content.Import.TextureImportEntry.Settings">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportEntry.TryOverrideSettings(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Import.TextureImportEntry.Import">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Settings.NavigationSettings">
            <summary>
            The navigation system settings container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.CellHeight">
            <summary>
            The height of a grid cell in the navigation mesh building steps using heightfields. 
            A lower number means higher precision on the vertical axis but longer build times.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.CellSize">
            <summary>
            The width/height of a grid cell in the navigation mesh building steps using heightfields. 
            A lower number means higher precision on the horizontal axes but longer build times.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.TileSize">
            <summary>
            Tile size used for Navigation mesh tiles, the final size of a tile is CellSize*TileSize.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MinRegionArea">
            <summary>
            The minimum number of cells allowed to form isolated island areas.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MergeRegionArea">
            <summary>
            Any regions with a span count smaller than this value will, if possible, be merged with larger regions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxEdgeLen">
            <summary>
            The maximum allowed length for contour edges along the border of the mesh.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxEdgeError">
            <summary>
            The maximum distance a simplfied contour's border edges should deviate from the original raw contour.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.DetailSamplingDist">
            <summary>
            The sampling distance to use when generating the detail mesh. For height detail only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxDetailSamplingError">
            <summary>
            The maximum distance the detail mesh surface should deviate from heightfield data. For height detail only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableRadius">
            <summary>
            The radius of the smallest objects to traverse this nav mesh. Objects can't pass through gaps of less than twice the radius.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableHeight">
            <summary>
            The height of the smallest objects to traverse this nav mesh. Objects can't enter areas with ceilings lower than this value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableMaxClimb">
            <summary>
            The maximum ledge height that is considered to still be traversable.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.WalkableMaxSlopeAngle">
            <summary>
            The maximum slope that is considered walkable (in degrees). Objects can't go up or down slopes higher than this value.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.AudioSettings">
            <summary>
            The audio payback engine settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.DopplerFactor">
            <summary>
            The doppler doppler effect factor. Scale for source and listener velocities. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.MuteOnFocusLoss">
            <summary>
            True if mute all audio playback when game has no use focus.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildPreset">
            <summary>
            A <see cref="T:FlaxEditor.GameCooker"/> game building preset with set of build targets.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildPreset.Name">
            <summary>
            The name of the preset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildPreset.Targets">
            <summary>
            The target configurations.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.BuildPreset.GetTarget(System.String)">
            <summary>
            Gets the target of the given name (ignore case search) or returns null if cannot find it.
            </summary>
            <param name="name">The target name.</param>
            <returns>Found target or null if is missing.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildSettings">
            <summary>
            The game building settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.MaxAssetsPerPackage">
            <summary>
            The maximum amount of assets to include into a single assets package. Assets will be split into several packages if need to.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.MaxPackageSizeMB">
            <summary>
            The maximum size of the single assets package (in megabytes). Assets will be split into several packages if need to.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ContentKey">
            <summary>
            The game content cooking Keys. Use the same value for a game and DLC packages to support loading them by the build game. Use 0 to randomize it during building.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.Presets">
            <summary>
            The build presets.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.BuildSettings.GetPreset(System.String)">
            <summary>
            Gets the preset of the given name (ignore case search) or returns null if cannot find it.
            </summary>
            <param name="name">The preset name.</param>
            <returns>Found preset or null if is missing.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildTarget">
            <summary>
            A <see cref="T:FlaxEditor.GameCooker"/> game building target with configuration properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Name">
            <summary>
            The name of the target.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Output">
            <summary>
            The output folder path.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Platform">
            <summary>
            The target platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Mode">
            <summary>
            The configuration mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.PreBuildAction">
            <summary>
            The pre-build action command line.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.PostBuildAction">
            <summary>
            The post-build action command line.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildTarget.Defines">
            <summary>
            The defines.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Settings.BuildTarget.Options">
            <summary>
            Gets the build options computed from the target configuration.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.GameSettings">
            <summary>
            The game settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.ProductName">
            <summary>
            The product full name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CompanyName">
            <summary>
            The company full name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CopyrightNotice">
            <summary>
            The copyright note used for content signing (eg. source code header).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Version">
            <summary>
            The product version. Separated with dots: major.minor.build.revision.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Icon">
            <summary>
            The default application icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.FirstScene">
            <summary>
            Reference to the first scene to load on a game startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Defines">
            <summary>
            The custom macros used using scripts compilation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Time">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Audio">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.AudioSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.LayersAndTags">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.LayersAndTagsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Physics">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Input">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.InputSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Graphics">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.GraphicsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Navigation">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.NavigationSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.GameCooking">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.BuildSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CustomSettings">
            <summary>
            The custom settings to use with a game. Can be specified by the user to define game-specific options and be used by the external plugins (used as key-value pair).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.WindowsPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.WindowsPlatformSettings"/> asset. Used to apply configuration on Windows platform.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.UWPPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.UWPPlatformSettings"/> asset. Used to apply configuration on Universal Windows Platform.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Settings.GameSettings.GameSettingsAssetPath">
            <summary>
            Gets the absolute path to the game settings asset file.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Load">
            <summary>
            Loads the game settings asset.
            </summary>
            <returns>The loaded game settings.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Load``1">
            <summary>
            Loads the settings of the given type.
            </summary>
            <remarks>
            Supports loading game settings, any sub settings container (e.g. <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/>) and custom settings (see <see cref="F:FlaxEditor.Content.Settings.GameSettings.CustomSettings"/>).
            </remarks>
            <code>
            var time = GameSettings.Load&amp;ltTimeSettings&amp;gt;();
            </code>
            <typeparam name="T">The game settings type (e.g. <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).</typeparam>
            <returns>Loaded settings object or null if fails.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Save``1(``0)">
            <summary>
            Saves the settings of the given type.
            </summary>
            <remarks>
            Supports saving game settings, any sub settings container (e.g. <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/>).
            </remarks>
            <code>
            var time = GameSettings.Load&amp;ltTimeSettings&amp;gt;();
            time.TimeScale = 0.5f;
            GameSettings.Save&amp;ltTimeSettings&amp;gt;(time);
            </code>
            <typeparam name="T">The game settings type (e.g. <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).</typeparam>
            <returns>True if failed otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.SetCustomSettings(System.String,FlaxEngine.JsonAsset)">
            <summary>
            Sets the custom settings (or unsets if provided asset is null).
            </summary>
            <param name="key">The custom key (must be unique per context).</param>
            <param name="customSettingsAsset">The custom settings asset.</param>
            <returns>True if failed otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Apply">
            <summary>
            Loads the current game settings asset and applies it to the engine runtime configuration.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.GraphicsSettings">
            <summary>
            The graphics rendering settings container. Allows to edit asset via editor. To modify those settings at runtime use <see cref="T:FlaxEngine.Rendering.GraphicsQuality"/>.
            </summary>
            <seealso cref="T:FlaxEngine.Rendering.GraphicsQuality"/>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.AAQuality">
            <summary>
            Anti Aliasing quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.SSRQuality">
            <summary>
            Screen Space Reflections quality.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.InputSettings">
            <summary>
            The input settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.InputSettings.ActionMappings">
            <summary>
            Maps a discrete button or key press events to a "friendly name" that will later be bound to event-driven behavior. The end effect is that pressing (and/or releasing) a key, mouse button, or keypad button.
            </summary>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="F:FlaxEditor.Content.Settings.InputSettings.AxisMappings">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="T:FlaxEditor.Content.Settings.LayersAndTagsSettings">
            <summary>
            The layers and objects tags settings. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LayersAndTagsSettings.Tags">
            <summary>
            The tag names.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LayersAndTagsSettings.Layers">
            <summary>
            The layers names.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.GetCurrentTags">
            <summary>
            Gets the current tags collection.
            </summary>
            <returns>The tags collection.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.GetCurrentLayers">
            <summary>
            Gets the current layer names (max 32 items but trims last empty items).
            </summary>
            <returns>The layers.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.PhysicsSettings">
            <summary>
            The physics simulation settings container. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.DefaultGravity">
            <summary>
            The default gravity force value (in cm^2/s).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.QueriesHitTriggers">
            <summary>
            If enabled, any Raycast or other scene query that intersects with a Collider marked as a Trigger will returns with a hit. Individual raycasts can override this behavior.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.TriangleMeshTriangleMinAreaThreshold">
            <summary>
            Triangles from triangle meshes (CSG) with an area less than or equal to this value will be removed from physics collision data. Set to less than or equal 0 to disable.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.BounceThresholdVelocity">
            <summary>
            Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.FrictionCombineMode">
            <summary>
            Default friction combine mode, controls how friction is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.RestitutionCombineMode">
            <summary>
            Default restitution combine mode, controls how restitution is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.DisableCCD">
            <summary>
            If true CCD will be ignored. This is an optimization when CCD is never used which removes the need for PhysX to check it internally.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.EnableAdaptiveForce">
            <summary>
            Enables adaptive forces to accelerate convergence of the solver. Can improve physics simulation performance but lead to artifacts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.MaxDeltaTime">
            <summary>
            The maximum allowed delta time (in seconds) for the physics simulation step.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.EnableSubstepping">
            <summary>
            Whether to substep the physics simulation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.SubstepDeltaTime">
            <summary>
            Delta time (in seconds) for an individual simulation substep.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.MaxSubsteps">
            <summary>
            The maximum number of substeps for physics simulation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.LayerMasks">
            <summary>
            The collision layers masks. Used to define layer-based collision detection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.SupportCookingAtRuntime">
            <summary>
            Enables support for cooking physical collision shapes geometry at runtime. Use it to enable generating runtime terrain collision or convex mesh colliders.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.PhysicsSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.SettingsBase">
            <summary>
            The base class for all the settings assets.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.TimeSettings">
            <summary>
            The time settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.UpdateFPS">
            <summary>
            The target amount of the game logic updates per second (script updates frequency).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.PhysicsFPS">
            <summary>
            The target amount of the physics simulation updates per second (also fixed updates frequency).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.DrawFPS">
            <summary>
            The target amount of the frames rendered per second (actual game FPS).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.TimeScale">
            <summary>
            The game time scale factor. Default is 1.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.UWPPlatformSettings">
            <summary>
            The Universal Windows Platform (UWP) platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.UWPPlatformSettings.WindowMode">
            <summary>
            The preferred launch windowing mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.WindowMode.FullScreen">
            <summary>
            The full screen mode
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.WindowMode.ViewSize">
            <summary>
            The view size.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations">
            <summary>
            The display orientation modes. Can be combined as flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.Landscape">
            <summary>
            The landscape.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.LandscapeFlipped">
            <summary>
            The landscape flipped.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.Portrait">
            <summary>
            The portrait.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.DisplayOrientations.PortraitFlipped">
            <summary>
            The portrait flipped.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.PreferredLaunchWindowingMode">
            <summary>
            The preferred launch windowing mode. Always fullscreen on Xbox.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.AutoRotationPreferences">
            <summary>
            The display orientation modes. Can be combined as flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.UWPPlatformSettings.CertificateLocation">
            <summary>
            The location of the package certificate (relative to the project).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.WindowsPlatformSettings">
            <summary>
            The Windows platform settings asset archetype. Allows to edit asset via editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.FullscreenMode">
            <summary>
            Use fullscreen mode as default.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ScreenWidth">
            <summary>
            The default game window width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ScreenHeight">
            <summary>
            The default game window height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ResizableWindow">
            <summary>
            Enables resizing the game window by the user.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.RunInBackground">
            <summary>
            Enables game running when application window loses focus.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ForceSingleInstance">
            <summary>
            Limits maximum amount of concurrent game instances running to one, otherwise user may launch application more than once.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.OverrideIcon">
            <summary>
            Custom icon texture to use for the application (overrides the default one).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX11">
            <summary>
            Enables support for DirectX 11. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX10">
            <summary>
            Enables support for DirectX 10 and DirectX 10.1. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportVulkan">
            <summary>
            Enables support for Vulkan. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.IFileEntryAction">
            <summary>
            File entry action (import or create).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.IFileEntryAction.SourceUrl">
            <summary>
            The source file path (may be empty or null).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.IFileEntryAction.ResultUrl">
            <summary>
            The result file path.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.IFileEntryAction.Execute">
            <summary>
            Executes this action.
            </summary>
            <returns>True if, failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Content.FileItem">
            <summary>
            Content item for the auxiliary files.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="M:FlaxEditor.Content.FileItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.FileItem"/> class.
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="P:FlaxEditor.Content.FileItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.PrefabItem">
            <summary>
            Content item that contains <see cref="T:FlaxEngine.Prefab"/> data.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.PrefabItem.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.PrefabItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="id">The asset identifier.</param>
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.ItemDomain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AnimationGraphProxy">
            <summary>
            A <see cref="T:FlaxEngine.AnimationGraph"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationGraphProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationGraphProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AnimationProxy">
            <summary>
            A <see cref="T:FlaxEngine.Animation"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AnimationProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AnimationProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AudioClipProxy">
            <summary>
            A <see cref="T:FlaxEngine.AudioClip"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AudioClipProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.OnThumbnailDrawCleanup(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AudioClipProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.CollisionDataProxy">
            <summary>
            A <see cref="T:FlaxEngine.CollisionData"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CollisionDataProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CollisionDataProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CollisionDataProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CollisionDataProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.FileProxy">
            <summary>
            File proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="P:FlaxEditor.Content.FileProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FileProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FileProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FileProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.PrefabProxy">
            <summary>
            Content proxy for <see cref="T:FlaxEditor.Content.PrefabItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="F:FlaxEditor.Content.PrefabProxy.Extension">
            <summary>
            The prefab files extension.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.PrefabProxy.AssetTypename">
            <summary>
            The prefab asset data typename.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.IsProxyFor``1">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PrefabProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PrefabProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SettingsProxy`1">
            <summary>
            Content proxy for json settings assets (e.g <see cref="T:FlaxEditor.Content.Settings.GameSettings"/> or <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SettingsProxy`1.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SettingsProxy`1.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SettingsProxy`1.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SettingsProxy`1.IsProxyFor``1">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SettingsProxy`1.TypeName">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SkeletonMaskProxy">
            <summary>
            A <see cref="T:FlaxEngine.SkeletonMask"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkeletonMaskProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkeletonMaskProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkeletonMaskProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkeletonMaskProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SkinnedModelProxy">
            <summary>
            A <see cref="T:FlaxEngine.SkinnedModel"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SkinnedModelProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SkinnedModelProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.RootContentTreeNode">
            <summary>
            Root tree node for the content workspace.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentTreeNode" />
        </member>
        <member name="M:FlaxEditor.Content.RootContentTreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.RootContentTreeNode"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.RootContentTreeNode.NavButtonLabel">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.BinaryAssetProxy">
            <summary>
            Base class for all binary asset proxy objects used to manage <see cref="T:FlaxEditor.Content.BinaryAssetItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetProxy" />
        </member>
        <member name="F:FlaxEditor.Content.BinaryAssetProxy.Extension">
            <summary>
            The binary asset files extension.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetProxy.IsProxyFor``1">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetProxy.AssetType">
            <summary>
            Gets the type of the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentProxy">
            <summary>
            Base class for assets proxy objects used to manage <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.Name">
            <summary>
            Gets the asset type name (used by GUI, should be localizable).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether this proxy is for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if is proxy for asset item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.IsProxyFor``1">
            <summary>
            Determines whether this proxy is for the specified asset.
            </summary>
            <returns><c>true</c> if is proxy for asset item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.IsAsset">
            <summary>
            Gets a value indicating whether this proxy if for assets.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.FileExtension">
            <summary>
            Gets the file extension used by the items managed by this proxy.
            ALL LOWERCASE! WITHOUT A DOT! example: for 'myFile.TxT' proper extension is 'txt'
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <summary>
            Opens the specified item.
            </summary>
            <param name="editor"></param>
            <param name="item">The item.</param>
            <returns>Opened window or null if cannot do it.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.CanExport">
            <summary>
            Gets a value indicating whether content items used by this proxy can be exported.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Export(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Exports the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="outputPath">The output path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <summary>
            Determines whether this proxy can create items in the specified target location.
            </summary>
            <param name="targetLocation">The target location.</param>
            <returns><c>true</c> if this proxy can create items in the specified target location; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether this proxy can reimport specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this proxy can reimport given item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Create(System.String,System.Object)">
            <summary>
            Creates new item at the specified output path.
            </summary>
            <param name="outputPath">The output path.</param>
            <param name="arg">The custom argument provided for the item creation. Can be used as a source of data or null.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.OnContentWindowContextMenu(FlaxEngine.GUI.ContextMenu,FlaxEditor.Content.ContentItem)">
            <summary>
            Called when content window wants to show the context menu. Allows to add custom functions for the given asset type.
            </summary>
            <param name="menu">The menu.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:FlaxEditor.Content.ContentProxy.AccentColor">
            <summary>
            Gets the unique accent color for that asset type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentProxy.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.AssetItem">
            <summary>
            Asset item object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.ID">
            <summary>
            Gets the asset unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.TypeName">
            <summary>
            Gets the asset type identifier.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.#ctor(System.String,System.String,System.Guid@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.AssetItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="typeName">The asset type name.</param>
            <param name="id">The asset identifier.</param>
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.ItemDomain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AssetItem.DrawShadow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.Find(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.AssetItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.BinaryAssetItem">
            <summary>
            Represents binary asset item.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="F:FlaxEditor.Content.BinaryAssetItem.Type">
            <summary>
            The type of the asset (the same as <see cref="P:FlaxEditor.Content.AssetItem.TypeName"/> but cached as type reference).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetItem.#ctor(System.String,System.Guid,System.String,FlaxEngine.ContentDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="id">The asset identifier.</param>
            <param name="typeName">The asset type name identifier.</param>
            <param name="domain">The asset domain.</param>
        </member>
        <member name="M:FlaxEditor.Content.BinaryAssetItem.GetImportPath(System.String@)">
            <summary>
            Gets the asset import path.
            </summary>
            <param name="importPath">The import path.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetItem.ItemDomain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.BinaryAssetItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentFolderType">
            <summary>
            Types of content directories.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Content">
            <summary>
            The directory with assets.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Source">
            <summary>
            The directory with script source files.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Editor">
            <summary>
            The directory with Editor private files.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Engine">
            <summary>
            The directory with Engine private files.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolderType.Other">
            <summary>
            The other type of directory.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.ContentFolder">
            <summary>
            Represents workspace directory item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.FolderType">
            <summary>
            Gets the type of the folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanHaveScripts">
            <summary>
            Returns true if that folder can import/manage scripts.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanHaveAssets">
            <summary>
            Returns true if that folder can import/manage assets.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.IsProjectOnly">
            <summary>
            Returns true if that folder belongs to the project workspace.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.IsEnginePrivate">
            <summary>
            Returns true if that folder belongs to the Engine or Editor private files.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.Node">
            <summary>
            Gets the content node.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentFolder.Children">
            <summary>
            The subitems of this folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.#ctor(FlaxEditor.Content.ContentFolderType,System.String,FlaxEditor.Content.ContentTreeNode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentFolder"/> class.
            </summary>
            <param name="type">The folder type.</param>
            <param name="path">The path to the item.</param>
            <param name="node">The folder parent node.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.FindChild(System.String)">
            <summary>
            Tries to find child element with given path
            </summary>
            <param name="path">Element path to find</param>
            <returns>Found element of null</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.ContainsChild(System.String)">
            <summary>
            Check if folder contains child element with given path
            </summary>
            <param name="path">Element path to find</param>
            <returns>True if contains that element, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanRename">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.Exists">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ContentFolder.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.UpdatePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnParentFolderChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Find(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Find(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Find(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.FindScriptWitScriptName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentFolder.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentItemType">
            <summary>
            Content item types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Asset">
            <summary>
            The binary or text asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Folder">
            <summary>
            The directory.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Script">
            <summary>
            The script file.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Scene">
            <summary>
            The scene file.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemType.Other">
            <summary>
            The other type.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.ContentItemSearchFilter">
            <summary>
            Content item filter types used for searching.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Model">
            <summary>
            The model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.SkinnedModel">
            <summary>
            The skinned model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Material">
            <summary>
            The material.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Scene">
            <summary>
            The scene.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Prefab">
            <summary>
            The prefab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Audio">
            <summary>
            The audio.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Animation">
            <summary>
            The animation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Json">
            <summary>
            The json.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItemSearchFilter.Other">
            <summary>
            The other.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.IContentItemOwner">
            <summary>
            Interface for objects that can reference the content items in order to receive events from them.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when referenced item gets deleted (asset unloaded, file deleted, etc.).
            Item should not be used after that.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when referenced item gets renamed (filename change, path change, etc.)
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when item gets reimported or reloaded.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Content.IContentItemOwner.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <summary>
            Called when referenced item gets disposed (editor closing, database internal changes, etc.).
            Item should not be used after that.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEditor.Content.ContentItem">
            <summary>
            Base class for all content items.
            Item parent GUI control is always <see cref="T:FlaxEditor.Content.GUI.ContentView"/> or null if not in a view.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultMarginSize">
            <summary>
            The default margin size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultTextHeight">
            <summary>
            The default text height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultThumbnailSize">
            <summary>
            The default thumbnail size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultWidth">
            <summary>
            The default width.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ContentItem.DefaultHeight">
            <summary>
            The default height.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ItemDomain">
            <summary>
            Gets the item domain.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.SearchFilter">
            <summary>
            Gets the type of the item searching filter to use.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.IsAsset">
            <summary>
            Gets a value indicating whether this instance is asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.IsFolder">
            <summary>
            Gets a value indicating whether this instance is folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.CanHaveChildren">
            <summary>
            Gets a value indicating whether this instance can have children.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.CanRename">
            <summary>
            Determines whether this item can be renamed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.CanDrag">
            <summary>
            Gets a value indicating whether this item can be dragged and dropped.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:FlaxEditor.Content.ContentItem"/> exists on drive.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ParentFolder">
            <summary>
            Gets the parent folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.Path">
            <summary>
            Gets the path to the item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ShortName">
            <summary>
            Gets the item short name (filename without extension).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.NamePath">
            <summary>
            Gets the asset name relative to the project root folder (without asset file extension)
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.DefaultThumbnail">
            <summary>
            Gets the default name of the content item thumbnail.
            Returns null if not used.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.HasDefaultThumbnail">
            <summary>
            Gets a value indicating whether this item has default thumbnail.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.Thumbnail">
            <summary>
            Gets or sets the item thumbnail. Warning, thumbnail may not be available if item has no references (<see cref="P:FlaxEditor.Content.ContentItem.ReferencesCount"/>).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.UpdatePath(System.String)">
            <summary>
            Updates the item path. Use with caution or even don't use it. It's dangerous.
            </summary>
            <param name="value">The new path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.RefreshThumbnail">
            <summary>
            Refreshes the item thumbnail.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Find(System.String)">
            <summary>
            Tries to find the item at the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Found item or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Find(FlaxEditor.Content.ContentItem)">
            <summary>
            Tries to find a specified item in the assets tree.
            </summary>
            <param name="item">The item.</param>
            <returns>True if has been found, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Find(System.Guid)">
            <summary>
            Tries to find the item with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>Found item or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.FindScriptWitScriptName(System.String)">
            <summary>
            Tries to find script with the given name.
            </summary>
            <param name="scriptName">Name of the script.</param>
            <returns>Found script or null if missing.</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.DrawShadow">
            <summary>
            Gets a value indicating whether draw item shadow.
            </summary>
            <value>
              <c>true</c> if draw shadow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.TextRectangle">
            <summary>
            Gets the local space rectangle for element name text area.
            </summary>
            <value>
            The text rectangle.
            </value>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.DrawThumbnail(FlaxEngine.Rectangle@)">
            <summary>
            Draws the item thumbnail.
            </summary>
            <param name="rectangle">The thumbnail rectangle.</param>
        </member>
        <member name="P:FlaxEditor.Content.ContentItem.ReferencesCount">
            <summary>
            Gets the amount of references to that item.
            </summary>
            <value>
            The references count.
            </value>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.AddReference(FlaxEditor.Content.IContentItemOwner)">
            <summary>
            Adds the reference to the item.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.RemoveReference(FlaxEditor.Content.IContentItemOwner)">
            <summary>
            Removes the reference from the item.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnDelete">
            <summary>
            Called when content item gets removed (by the user or externally).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnParentFolderChanged">
            <summary>
            Called when item parent folder gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.RequestThumbnail">
            <summary>
            Requests the thumbnail.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.ReleaseThumbnail">
            <summary>
            Releases the thumbnail.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnReimport">
            <summary>
            Called when item gets reimported or reloaded.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.DoDrag">
            <summary>
            Does the drag and drop operation with this asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.JsonAssetItem">
            <summary>
            Asset item stored in a Json format file.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetItem.#ctor(System.String,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.JsonAssetItem"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="id">The identifier.</param>
            <param name="typeName">Name of the resource type.</param>
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.ItemDomain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetItem.DrawShadow">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.NewItem">
            <summary>
            Helper content item used to mock UI during creating new assets by <see cref="T:FlaxEditor.Windows.ContentWindow"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.Proxy">
            <summary>
            Gets the proxy object related to the created asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.NewItem.Argument">
            <summary>
            Gets the argument passed to the proxy for the item creation. In most cases it is null.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.NewItem.#ctor(System.String,FlaxEditor.Content.ContentProxy,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.NewItem"/> class.
            </summary>
            <param name="path">The path for the new item.</param>
            <param name="proxy">The content proxy object.</param>
            <param name="arg">The argument passed to the proxy for the item creation. In most cases it is null.</param>
        </member>
        <member name="P:FlaxEditor.Content.NewItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.NewItem.DrawShadow">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SceneItem">
            <summary>
            Content item that contains <see cref="T:FlaxEngine.Scene"/> data.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetItem" />
        </member>
        <member name="M:FlaxEditor.Content.SceneItem.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.SceneItem"/> class.
            </summary>
            <param name="path">The asset path.</param>
            <param name="id">The asset identifier.</param>
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.ItemDomain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ScriptItem">
            <summary>
            Content item that contains C# script file with source code.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.ScriptName">
            <summary>
            Gets the name of the script (deducted from the asset name).
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.IsValid">
            <summary>
            Checks if the script item references the valid use script type that can be used in a gameplay.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ScriptItem"/> class.
            </summary>
            <param name="path">The path to the item.</param>
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.CreateScriptName(System.String)">
            <summary>
            Creates the name of the script for the given file.
            </summary>
            <param name="path">The path.</param>
            <returns>Script name</returns>
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.ItemType">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.SearchFilter">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ScriptItem.DefaultThumbnail">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.FindScriptWitScriptName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptItem.OnDelete">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.AssetProxy">
            <summary>
            Base class for all asset proxy objects used to manage <see cref="T:FlaxEditor.Content.AssetItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="P:FlaxEditor.Content.AssetProxy.Domain">
            <summary>
            Gets the assets domain.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.AssetProxy.IsAsset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.AssetProxy.TypeName">
            <summary>
            Gets the full name of the asset type (stored data format).
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.AcceptsAsset(System.String,System.String)">
            <summary>
            Checks if this proxy supports the given asset type id at the given path.
            </summary>
            <param name="typeName">The asset type identifier.</param>
            <param name="path">The asset path.</param>
            <returns>True if proxy supports assets of the given type id and path.</returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <summary>
            Constructs the item for the asset.
            </summary>
            <param name="path">The asset path.</param>
            <param name="typeName">The asset type name identifier.</param>
            <param name="id">The asset identifier.</param>
            <returns>Created item.</returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <summary>
            Called when thumbnail request gets prepared for drawing.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <summary>
            Determines whether thumbnail can be drawn for the specified item.
            </summary>
            <param name="request">The request.</param>
            <returns>
              <c>true</c> if this thumbnail can be drawn for the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <summary>
            Called when thumbnail drawing begins. Proxy should setup scene GUI for guiRoot.
            </summary>
            <param name="request">The request to render thumbnail.</param>
            <param name="guiRoot">The GUI root container control.</param>
            <param name="context">GPU context.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <summary>
            Called when thumbnail drawing ends. Proxy should clear custom GUI from guiRoot from that should be not destroyed.
            </summary>
            <param name="request">The request to render thumbnail.</param>
            <param name="guiRoot">The GUI root container control.</param>
        </member>
        <member name="M:FlaxEditor.Content.AssetProxy.OnThumbnailDrawCleanup(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <summary>
            Called when thumbnail requests cleans data after drawing.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:FlaxEditor.Content.CubeTextureProxy">
            <summary>
            A <see cref="T:FlaxEngine.CubeTexture"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.CubeTextureProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.CubeTextureProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.FontProxy">
            <summary>
            A <see cref="T:FlaxEngine.FontAsset"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FontProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FontProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.FontProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.FontProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.IESProfileProxy">
            <summary>
            A <see cref="T:FlaxEngine.IESProfile"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.IESProfileProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.IESProfileProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.JsonAssetBaseProxy">
            <summary>
            Base class for all Json asset proxy objects used to manage <see cref="T:FlaxEditor.Content.JsonAssetItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetProxy" />
        </member>
        <member name="T:FlaxEditor.Content.JsonAssetProxy">
            <summary>
            Json assets proxy.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="F:FlaxEditor.Content.JsonAssetProxy.Extension">
            <summary>
            The json files extension.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.JsonAssetProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.AcceptsAsset(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.JsonAssetProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.GenericJsonAssetProxy">
            <summary>
            Generic Json assets proxy (supports all json assets that don't have dedicated proxy).
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="P:FlaxEditor.Content.GenericJsonAssetProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.GenericJsonAssetProxy.AcceptsAsset(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SpawnableJsonAssetProxy`1">
            <summary>
            Content proxy for a json assets of the given type that can be spawned in the editor.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SpawnableJsonAssetProxy`1.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpawnableJsonAssetProxy`1.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpawnableJsonAssetProxy`1.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpawnableJsonAssetProxy`1.TypeName">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MaterialInstanceProxy">
            <summary>
            A <see cref="T:FlaxEngine.MaterialInstance"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialInstanceProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialInstanceProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MaterialProxy">
            <summary>
            A <see cref="T:FlaxEngine.Material"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.MaterialProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnContentWindowContextMenu(FlaxEngine.GUI.ContextMenu,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.CreateMaterialInstance(FlaxEditor.Content.BinaryAssetItem)">
            <summary>
            Creates the material instance from the given material.
            </summary>
            <param name="materialItem">The material item to use as a base material.</param>
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MaterialProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ModelProxy">
            <summary>
            A <see cref="T:FlaxEngine.Model"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ModelProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ModelProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.PreviewsCacheProxy">
            <summary>
            A <see cref="T:FlaxEditor.PreviewsCache"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.PreviewsCacheProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.PreviewsCacheProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SceneProxy">
            <summary>
            Content proxy for <see cref="T:FlaxEditor.Content.SceneItem"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Content.JsonAssetBaseProxy" />
        </member>
        <member name="F:FlaxEditor.Content.SceneProxy.Extension">
            <summary>
            The scene files extension.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SceneProxy.TypeName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SceneProxy.ConstructItem(System.String,System.String,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ScriptProxy">
            <summary>
            Context proxy object for script files (represented by <see cref="T:FlaxEditor.Content.ScriptItem"/>).
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentProxy" />
        </member>
        <member name="F:FlaxEditor.Content.ScriptProxy.Extension">
            <summary>
            The script files extension.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.ScriptProxy.ExtensionFiler">
            <summary>
            The script files extension filter.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ScriptProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.IsProxyFor(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.CanCreate(FlaxEditor.Content.ContentFolder)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.Create(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ScriptProxy.FileExtension">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ScriptProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.ScriptProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.SpriteAtlasProxy">
            <summary>
            A <see cref="T:FlaxEngine.SpriteAtlas"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.SpriteAtlasProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.SpriteAtlasProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.TextureProxy">
            <summary>
            A <see cref="T:FlaxEngine.Texture"/> asset proxy object.
            </summary>
            <seealso cref="T:FlaxEditor.Content.BinaryAssetProxy" />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.CanReimport(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.Open(FlaxEditor.Editor,FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.Domain">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Content.TextureProxy.AssetType">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.OnThumbnailDrawPrepare(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.CanDrawThumbnail(FlaxEditor.Content.Thumbnails.ThumbnailRequest)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.OnThumbnailDrawBegin(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl,FlaxEngine.Rendering.GPUContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.OnThumbnailDrawEnd(FlaxEditor.Content.Thumbnails.ThumbnailRequest,FlaxEngine.GUI.ContainerControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.TextureProxy.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailRequest">
            <summary>
            Contains information about asset thumbnail rendering.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States">
            <summary>
            The request state types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Created">
            <summary>
            The initial state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Prepared">
            <summary>
            Request has been prepared for the rendering but still may wait for resources to load fully.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Rendered">
            <summary>
            The thumbnail has been rendered. Request can be finalized.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.States.Disposed">
            <summary>
            The finalized state.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Thumbnails.ThumbnailRequest.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Proxy">
            <summary>
            The proxy object for the asset item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Asset">
            <summary>
            The asset reference. May be null if not cached yet.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Tag">
            <summary>
            The custom tag object used by the thumbnails rendering pipeline. Can be used to store the data related to the thumbnail rendering by the asset proxy.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Thumbnails.ThumbnailRequest.IsReady">
            <summary>
            Determines whether thumbnail can be drawn for the item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.#ctor(FlaxEditor.Content.AssetItem,FlaxEditor.Content.AssetProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Thumbnails.ThumbnailRequest"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="proxy">The proxy.</param>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Prepare">
            <summary>
            Prepares this request.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.FinishRender(FlaxEngine.Sprite@)">
            <summary>
            Finishes the rendering and updates the item thumbnail.
            </summary>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailRequest.Dispose">
            <summary>
            Finalizes this request.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailsModule">
            <summary>
            Manages asset thumbnails rendering and presentation.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailsModule.MinimumRequriedResourcesQuality">
            <summary>
            The minimum required quality (in range [0;1]) for content streaming resources to be loaded in order to generate thumbnail for them.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.RequestPreview(FlaxEditor.Content.ContentItem)">
            <summary>
            Requests the item preview.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.DeletePreview(FlaxEditor.Content.ContentItem)">
            <summary>
            Deletes the item preview from the cache.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.FlaxEditor#Content#IContentItemOwner#OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot">
            <summary>
            Thumbnails GUI root control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.AccentColor">
            <summary>
            The item accent color to draw.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.Thumbnails.ThumbnailsModule.PreviewRoot.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.ContentTreeNode">
            <summary>
            Content folder tree node.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.TreeNode" />
        </member>
        <member name="F:FlaxEditor.Content.ContentTreeNode._folder">
            <summary>
            The folder.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.Folder">
            <summary>
            Gets the content folder item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.FolderType">
            <summary>
            Gets the type of the folder.
            </summary>
            <value>
            The type of the folder.
            </value>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.CanHaveScripts">
            <summary>
            Returns true if that folder can import/manage scripts.
            </summary>
            <returns>True if can contain scripts for project, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.CanHaveAssets">
            <summary>
            Returns true if that folder can import/manage assets.
            </summary>
            <returns>True if can contain assets for project, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.IsProjectOnly">
            <summary>
            Returns true if that folder belongs to the project workspace.
            </summary>
            <returns>True if folder belongs to the project workspace otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.IsEnginePrivate">
            <summary>
            Returns true if that folder belongs to the Engine or Editor private files.
            </summary>
            <returns>True if folder belongs to Engine private files otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.Path">
            <summary>
            Gets the folder path.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.ContentTreeNode.NavButtonLabel">
            <summary>
            Gets the navigation button label.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.#ctor(FlaxEditor.Content.ContentTreeNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentTreeNode"/> class.
            </summary>
            <param name="parent">The parent node.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.#ctor(FlaxEditor.Content.ContentFolderType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.ContentTreeNode"/> class.
            </summary>
            <param name="type">The folder type.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.StartRenaming">
            <summary>
            Shows the rename popup for the item.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.UpdateFilter(System.String)">
            <summary>
            Updates the query search filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragLeaveHeader">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnLongPress">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.ContentTreeNode.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Content.MainContentTreeNode">
            <summary>
            Content tree node used for main directories.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentTreeNode" />
        </member>
        <member name="M:FlaxEditor.Content.MainContentTreeNode.#ctor(FlaxEditor.Content.ContentFolderType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.MainContentTreeNode"/> class.
            </summary>
            <param name="type">The folder type.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:FlaxEditor.Content.MainContentTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Content.MainContentTreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Int2Editor">
            <summary>
            Default implementation of the inspector used to edit Int2 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int2Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int2Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Int2Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int2Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int2Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Int3Editor">
            <summary>
            Default implementation of the inspector used to edit Int3 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int3Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int3Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int3Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Int3Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int3Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int3Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Int4Editor">
            <summary>
            Default implementation of the inspector used to edit Int4 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Int4Editor.WElement">
            <summary>
            The W component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Int4Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int4Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Int4Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorLayerEditor">
            <summary>
            Custom editor for picking actor layer. Instead of choosing bit mask or layer index it shows a combo box with simple layer picking by name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ActorLayerEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorLayerEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorLayerEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorStaticFlagsEditor">
            <summary>
            Custom editor for picking actor static flags. Overrides the default enum editor logic to provide more useful functionalities.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorStaticFlagsEditor.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTagEditor">
            <summary>
            Custom editor for picking actor tag. Instead of choosing tag index or entering tag text it shows a combo box with simple tag picking by name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ActorTagEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTagEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTagEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTransformEditor">
            <summary>
            Actor transform editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.AxisColorX">
            <summary>
            The X axis color.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.AxisColorY">
            <summary>
            The Y axis color.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.AxisColorZ">
            <summary>
            The Z axis color.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.PositionScaleEditor">
            <summary>
            Custom editor for actor position/scale property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.Vector3Editor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.PositionScaleEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.OrientationEditor">
            <summary>
            Custom editor for actor orientation property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.QuaternionEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ActorTransformEditor.OrientationEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ArrayEditor">
            <summary>
            Default implementation of the inspector used to edit arrays.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ArrayEditor.Count">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ArrayEditor.Allocate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ArrayEditor.Resize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ArrayEditor.CloneValues">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.AssetItemRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEditor.Content.AssetItem"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SceneRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEngine.SceneReference"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.AssetRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEngine.Asset"/>.
            </summary>
            <remarks>Supports editing reference to the asset using various containers: <see cref="T:FlaxEngine.Asset"/> or <see cref="T:FlaxEditor.Content.AssetItem"/> or <see cref="T:System.Guid"/>.</remarks>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.AssetRefEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.AssetRefEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.AssetRefEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.BooleanEditor">
            <summary>
            Default implementation of the inspector used to edit bool value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.BooleanEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.BooleanEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.BooleanEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.CollectionEditor">
            <summary>
            Default implementation of the inspector used to edit arrays/list.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel">
            <summary>
            The custom implementation of the collection items labels that can be used to reorder items.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel.Editor">
            <summary>
            The editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel.Index">
            <summary>
            The index of the item (zero-based).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel.#ctor(FlaxEditor.CustomEditors.Editors.CollectionEditor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.CollectionEditor.CollectionItemLabel"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.CollectionEditor.Count">
            <summary>
            Gets the length of the collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.CollectionEditor.ElementType">
            <summary>
            Gets the type of the collection elements.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Move(System.Int32,System.Int32)">
            <summary>
            Moves the specified item at the given index and swaps it with the other item. It supports undo.
            </summary>
            <param name="srcIndex">Index of the source item.</param>
            <param name="dstIndex">Index of the destination item to swap with.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Remove(System.Int32)">
            <summary>
            Removes the item at the specified index. It supports undo.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Allocate(System.Int32)">
            <summary>
            Allocates the collection of the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The collection.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Resize(System.Int32)">
            <summary>
            Resizes collection to the specified new size.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.CloneValues">
            <summary>
            Clones the collection values.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CollectionEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ColorEditor">
            <summary>
            Default implementation of the inspector used to edit Color value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ColorEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ColorTrackball">
            <summary>
            Custom implementation of the inspector used to edit Vector4 color value type properties with color grading trackball.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ColorTrackball.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorTrackball.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ColorTrackball.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.DictionaryEditor">
            <summary>
            Default implementation of the inspector used to edit key-value dictionaries.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.CanEditType(System.Type)">
            <summary>
            Determines whether this editor[can edit the specified dictionary type.
            </summary>
            <param name="type">Type of the dictionary.</param>
            <returns>True if can edit, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Count">
            <summary>
            Gets the length of the collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Resize(System.Int32)">
            <summary>
            Resizes collection to the specified new size.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DictionaryEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.DoubleEditor">
            <summary>
            Default implementation of the inspector used to edit double value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.DoubleEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DoubleEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.DoubleEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.EnumEditor">
            <summary>
            Default implementation of the inspector used to edit float value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.EnumEditor.element">
            <summary>
            The enum element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.EnumEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.EnumEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.EnumEditor.OnValueChanged">
            <summary>
            Called when value get changed. Allows to override default value setter logic.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.EnumEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor">
            <summary>
            Default implementation of the inspector used to edit reference to the <see cref="T:FlaxEngine.Object"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl">
            <summary>
            A custom control type used to pick reference to <see cref="T:FlaxEngine.Object"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.Type">
            <summary>
            Gets or sets the allowed objects type (given type and all sub classes). Must be <see cref="T:FlaxEngine.Object"/> type of any subclass.
            </summary>
            <value>
            The allowed objects type.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.Value">
            <summary>
            Gets or sets the selected object value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.ValueID">
            <summary>
            Gets or sets the selected object value by identifier.
            </summary>
            <value>
            The selected object value identifier.
            </value>
        </member>
        <member name="E:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.ReferencePickerControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FlaxObjectRefEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.FloatEditor">
            <summary>
            Default implementation of the inspector used to edit float value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.FloatEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FloatEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.FloatEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.GenericEditor">
            <summary>
            Default implementation of the inspector used when no specified inspector is provided for the type. Inspector 
            displays GUI for all the inspectable fields in the object.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo">
            <summary>
            Describes object property/field information for custom editors pipeline.
            </summary>
            <seealso cref="T:System.IComparable" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Info">
            <summary>
            The member information from reflection.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Order">
            <summary>
            The order attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Display">
            <summary>
            The display attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Tooltip">
            <summary>
            The tooltip attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CustomEditor">
            <summary>
            The custom editor attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CustomEditorAlias">
            <summary>
            The custom editor alias attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Space">
            <summary>
            The space attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.Header">
            <summary>
            The header attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.VisibleIf">
            <summary>
            The visible if attribute.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.IsReadOnly">
            <summary>
            The read-only attribute usage flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.ExpandGroups">
            <summary>
            The expand groups flag.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.UseGroup">
            <summary>
            Gets a value indicating whether use dedicated group.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.OverrideEditor">
            <summary>
            Gets the overridden custom editor for item editing.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.TooltipText">
            <summary>
            Gets the tooltip text (may be null if not provided).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo"/> class.
            </summary>
            <param name="info">The reflection information.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.#ctor(System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo"/> class.
            </summary>
            <param name="info">The reflection information.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.GetValues(FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Gets the values.
            </summary>
            <param name="instanceValues">The instance values.</param>
            <returns>The values container.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo.CanMerge(FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <summary>
            Determines whether can merge two item infos to present them at once.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
              <c>true</c> if can merge two item infos to present them at once; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.GetItemsForType(System.Type)">
            <summary>
            Gets the items for the type
            </summary>
            <param name="type">The type.</param>
            <returns>The items.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.GetItemsForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets the items for the type
            </summary>
            <param name="type">The type.</param>
            <param name="useProperties">True if use type properties.</param>
            <param name="useFields">True if use type fields.</param>
            <returns>The items.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <summary>
            Spawns the property for the given item.
            </summary>
            <param name="itemLayout">The item layout.</param>
            <param name="itemValues">The item values.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GenericEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.GuidEditor">
            <summary>
            Default implementation of the inspector used to edit Guid properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.GuidEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GuidEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.GuidEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.IBrushEditor">
            <summary>
            Default implementation of the inspector used to edit <see cref="T:FlaxEngine.GUI.IBrush"/> type properties.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush"/>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor"/>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.IBrushEditor.Options">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.IntegerEditor">
            <summary>
            Default implementation of the inspector used to edit integer value type properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.IntegerEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.IntegerEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.IntegerEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor">
            <summary>
            Default implementation of the inspector used to edit signed integer value type properties (maps to the full range of long type).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.GetLimits(System.Int64@,System.Int64@)">
            <summary>
            Gets the value limits.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.GetValue(System.Object)">
            <summary>
            Gets the value as long.
            </summary>
            <param name="value">The value from object.</param>
            <returns>The value for editor.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SignedIntegerValueEditor.SetValue(System.Int64)">
            <summary>
            Gets the value from long.
            </summary>
            <param name="value">The value from editor.</param>
            <returns>The value to object.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SByteEditor">
            <summary>
            Default implementation of the inspector used to edit sbyte value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SByteEditor.GetLimits(System.Int64@,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SByteEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SByteEditor.SetValue(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ShortEditor">
            <summary>
            Default implementation of the inspector used to edit short value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ShortEditor.GetLimits(System.Int64@,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ShortEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ShortEditor.SetValue(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.LongEditor">
            <summary>
            Default implementation of the inspector used to edit long value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.LongEditor.GetLimits(System.Int64@,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.LongEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.LongEditor.SetValue(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor">
            <summary>
            Default implementation of the inspector used to edit unsigned integer value type properties (maps to the full range of ulong type).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <summary>
            Gets the value limits.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.GetValue(System.Object)">
            <summary>
            Gets the value as long.
            </summary>
            <param name="value">The value from object.</param>
            <returns>The value for editor.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UnsignedIntegerValueEditor.SetValue(System.UInt64)">
            <summary>
            Gets the value from long.
            </summary>
            <param name="value">The value from editor.</param>
            <returns>The value to object.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ByteEditor">
            <summary>
            Default implementation of the inspector used to edit byte value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ByteEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ByteEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ByteEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.CharEditor">
            <summary>
            Default implementation of the inspector used to edit char value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CharEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CharEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.CharEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.UShortEditor">
            <summary>
            Default implementation of the inspector used to edit ushort value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UShortEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UShortEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UShortEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.UintEditor">
            <summary>
            Default implementation of the inspector used to edit uint value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UintEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UintEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.UintEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ULongEditor">
            <summary>
            Default implementation of the inspector used to edit ulong value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ULongEditor.GetLimits(System.UInt64@,System.UInt64@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ULongEditor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ULongEditor.SetValue(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ListEditor">
            <summary>
            Default implementation of the inspector used to edit lists.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ListEditor.Count">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ListEditor.Allocate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ListEditor.Resize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ListEditor.CloneValues">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.MatrixEditor">
            <summary>
            Default implementation of the inspector used to edit Matrix value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.MatrixEditor.Elements">
            <summary>
            The 16 components editors.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.MatrixEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.MatrixEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.MatrixEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ModelEntryInfoEditor">
            <summary>
            Default implementation of the inspector used to edit ModelEntryInfo value type properties.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ModelEntryInfoEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ModelEntryInfoEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor">
            <summary>
            Base implementation of the inspector used to edit properties of the given abstract or interface type that contain a setter to assign a derived implementation type.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType">
            <summary>
            Defines type that can be assigned to the modified property.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.Name">
            <summary>
            The type name used to show in the type selector dropdown menu (for user interface).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.Creator">
            <summary>
            The creator function that spawns the object of the given type.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType"/> struct.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.OptionType"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.Options">
            <summary>
            Gets the options collection for the property value assignment.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.ObjectSwitcherEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.QuaternionEditor">
            <summary>
            Default implementation of the inspector used to edit Quaternion value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.QuaternionEditor.XElement">
            <summary>
            The X component element
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.QuaternionEditor.YElement">
            <summary>
            The Y component element
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.QuaternionEditor.ZElement">
            <summary>
            The Z component element
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.QuaternionEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.QuaternionEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.QuaternionEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SkeletonBoneEditor">
            <summary>
            Custom editor for picking skeleton bone. Instead of choosing bone index or entering bone text it shows a combo box with simple tag picking by name.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.SkeletonBoneEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SkeletonBoneEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SkeletonBoneEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.SpriteEditor">
            <summary>
            Default implementation of the inspector used to edit <see cref="T:FlaxEngine.Sprite"/> references.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.SpriteEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SpriteEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SpriteEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.SpriteEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.StringEditor">
            <summary>
            Default implementation of the inspector used to edit string properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.StringEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.StringEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.StringEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Vector2Editor">
            <summary>
            Default implementation of the inspector used to edit Vector2 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector2Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector2Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Vector2Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector2Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector2Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Vector3Editor">
            <summary>
            Default implementation of the inspector used to edit Vector3 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector3Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector3Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector3Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Vector3Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector3Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector3Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.Vector4Editor">
            <summary>
            Default implementation of the inspector used to edit Vector4 value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.XElement">
            <summary>
            The X component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.YElement">
            <summary>
            The Y component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.ZElement">
            <summary>
            The Z component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.Vector4Editor.WElement">
            <summary>
            The W component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.Vector4Editor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector4Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.Vector4Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Editors.VersionEditor">
            <summary>
            Default implementation of the inspector used to edit Version value type properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Major">
            <summary>
            The Version.Major component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Minor">
            <summary>
            The Version.Minor component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Build">
            <summary>
            The Version.Build component editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Editors.VersionEditor.Revision">
            <summary>
            The Version.Revision component editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Editors.VersionEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.VersionEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Editors.VersionEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.DisplayStyle">
            <summary>
            Custom editor layout style modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.DisplayStyle.Group">
            <summary>
            Creates a separate group for the editor (drop down element). This is a default value.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.DisplayStyle.Inline">
            <summary>
            Inlines editor contents into the property area without creating a drop-down group.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.DisplayStyle.InlineIntoParent">
            <summary>
            Inlines editor contents into the parent editor layout. Won;t use property with label name.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditor">
            <summary>
            Base class for all custom editors used to present object(s) properties. Allows to extend game objects editing with more logic and customization.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.Style">
            <summary>
            Gets the custom editor style.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.IsSingleObject">
            <summary>
            Gets a value indicating whether single object is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.HasDifferentValues">
            <summary>
            Gets a value indicating whether selected objects are different values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.HasDifferentTypes">
            <summary>
            Gets a value indicating whether selected objects are different types.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.ValuesTypes">
            <summary>
            Gets the values types array (without duplicates).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.ParentEditor">
            <summary>
            Gets the parent editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.ChildrenEditors">
            <summary>
            Gets the children editors (readonly).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.Presenter">
            <summary>
            Gets the presenter control. It's the top most part of the Custom Editors layout.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.IsSetBlocked">
            <summary>
            Gets a value indicating whether setting value is blocked (during refresh).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditor.LinkedLabel">
            <summary>
            The linked label used to show this custom editor. Can be null if not used (eg. editor is inlined or is using a very customized UI layout).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RebuildLayout">
            <summary>
            Rebuilds the editor layout. Cleans the whole UI with child elements/editors and then builds new hierarchy. Call it only when necessary.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RebuildLayoutOnRefresh">
            <summary>
            Rebuilds the editor layout on editor refresh. Postponed after dirty value gets synced. Call it after <see cref="M:FlaxEditor.CustomEditors.CustomEditor.SetValue(System.Object,System.Object)"/> to update editor after actual value assign.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SkipChildrenRefresh">
            <summary>
            Sets the request to skip the custom editor children refresh during next update. Can be used when editor layout has to be rebuild during the update itself.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <summary>
            Initializes this editor.
            </summary>
            <param name="layout">The layout builder.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Deinitialize">
            <summary>
            Deinitializes this editor (unbind events and cleanup).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Cleanup">
            <summary>
            Cleanups this editor resources and child editors.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Refresh">
            <summary>
            Refreshes this editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.CanRevertDefaultValue">
            <summary>
            Gets a value indicating whether this editor can revert the value to default value.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RevertToDefaultValue">
            <summary>
            Reverts the property value to default value (if has). Handles undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RefreshDefaultValue">
            <summary>
            Updates the default value assigned to the editor's values container. Sends the event down the custom editors hierarchy to propagate the change.
            </summary>
            <remarks>
            Has no effect on editors that don't have default value assigned.
            </remarks>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.ClearDefaultValueAll">
            <summary>
            Clears all the default value of the container in the whole custom editors tree (this container and all children).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.CanRevertReferenceValue">
            <summary>
            Gets a value indicating whether this editor can revert the value to reference value.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RevertToReferenceValue">
            <summary>
            Reverts the property value to reference value (if has). Handles undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.RefreshReferenceValue">
            <summary>
            Updates the reference value assigned to the editor's values container. Sends the event down the custom editors hierarchy to propagate the change.
            </summary>
            <remarks>
            Has no effect on editors that don't have reference value assigned.
            </remarks>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.ClearReferenceValueAll">
            <summary>
            Clears all the reference value of the container in the whole custom editors tree (this container and all children).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Copy">
            <summary>
            Copies the value to the system clipboard.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditor.CanPaste">
            <summary>
            Gets a value indicating whether can paste value from the system clipboard to the property value container.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.Paste">
            <summary>
            Sets the value from the system clipboard.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SetValueToDefault">
            <summary>
            Sets the editor value to the default value (if assigned).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SetValueToReference">
            <summary>
            Sets the editor value to the reference value (if assigned).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the object value. Actual update is performed during editor refresh in sync.
            </summary>
            <param name="value">The value.</param>
            <param name="token">The source editor token used by the value setter to support batching Undo actions (eg. for sliders or color pickers).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <summary>
            Called when custom editor gets dirty (UI value has been modified).
            Allows to filter the event, block it or handle in a custom way.
            </summary>
            <param name="editor">The editor.</param>
            <param name="value">The value.</param>
            <param name="token">The source editor token used by the value setter to support batching Undo actions (eg. for sliders or color pickers).</param>
            <returns>True if allow to handle this event, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditor.ClearToken">
            <summary>
            Clears the token assigned with <see cref="M:FlaxEditor.CustomEditors.CustomEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)"/> parameter. Called on merged undo action end (eg. users stops using slider).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorsUtil.GetPropertyNameUI(System.String)">
            <summary>
            Gets the property name for UI. Removes unnecessary characters and filters text. Makes it more user-friendly.
            </summary>
            <param name="name">The name.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor">
            <summary>
            Dedicated custom editor for <see cref="T:FlaxEngine.Actor"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.GetItemsForType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.Deinitialize">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Dedicated.ActorEditor.RemovedScriptDummy.PrefabObject">
            <summary>
            The removed prefab object (from the prefab default instance).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ActorEditor.RemovedScriptDummy.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.EnvironmentProbeEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.EnvironmentProbe"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.EnvironmentProbeEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.FontReferenceEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.FontReference"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.FontReferenceEditor.GetItemsForType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor">
            <summary>
            Custom editor for layers matrix editor. Used to define layer-based collision detection for <see cref="F:FlaxEditor.Content.Settings.PhysicsSettings.LayerMasks"/>
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.LayersMatrixEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.PhysicalMaterial"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PhysicalMaterialEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor">
            <summary>
            <see cref="T:FlaxEngine.Rendering.PostProcessSettings"/> editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.GetItemsForType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.PostProcessSettingsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.RigidBody"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor.SpawnProperty(FlaxEditor.CustomEditors.LayoutElementsContainer,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.Editors.GenericEditor.ItemInfo)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.RigidBodyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.DragAreaControl">
            <summary>
            Drag and drop scripts area control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.ScriptsEditor">
            <summary>
            The parent scripts editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.DragAreaControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.DragAreaControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon">
            <summary>
            Small image control added per script group that allows to drag and drop a reference to it. Also used to reorder the scripts.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Image" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.Script">
            <summary>
            Gets the target script.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.#ctor(FlaxEditor.CustomEditors.Dedicated.ScriptsEditor,FlaxEngine.Script,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon"/> class.
            </summary>
            <param name="editor">The script editor.</param>
            <param name="script">The target script.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="size">The size (both width and height).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptDragIcon.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptArrangeBar.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor">
            <summary>
            Custom editor for actor scripts collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptDragDelegate">
            <summary>
            Delegate for script drag start and event events.
            </summary>
            <param name="start">Set to true if drag started, otherwise false.</param>
            <param name="script">The target script to reorder.</param>
        </member>
        <member name="E:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptDragChange">
            <summary>
            Occurs when script drag changes (starts or ends).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor._scripts">
            <summary>
            The scripts collection. Undo operations are recorder for scripts.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.UndoObjects">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer">
            <summary>
            Values container for the collection of the scripts. Helps with prefab linkage and reference value usage (uses Prefab Instance ID rather than index in array).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer.PrefabObjectId">
            <summary>
            Gets the prefab object identifier used by the container scripts. Empty if there is no valid linkage to the prefab object.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer.#ctor(System.Type,System.Int32,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements (script type).</param>
            <param name="index">The script index in the actor scripts collection.</param>
            <param name="values">The collection values (scripts array).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ScriptsContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.OnScriptDragChange(System.Boolean,FlaxEngine.Script)">
            <summary>
            Called when script drag changes.
            </summary>
            <param name="start">if set to <c>true</c> drag just started, otherwise ended.</param>
            <param name="script">The target script.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.ReorderScript(FlaxEngine.Script,System.Int32)">
            <summary>
            Changes the script order (with undo).
            </summary>
            <param name="script">The script to reorder.</param>
            <param name="targetIndex">The target index to move script.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.ScriptsEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.SkyLightEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.SkyLight"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.SkyLightEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.TerrainEditor">
            <summary>
            Custom editor for <see cref="T:FlaxEngine.Terrain"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Dedicated.ActorEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.TerrainEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Dedicated.UIControlControlEditor">
            <summary>
            Dedicated custom editor for <see cref="P:FlaxEngine.UIControl.Control"/> object.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Dedicated.UIControlControlEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.CheckBoxElement">
            <summary>
            The checkbox element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.CheckBoxElement.CheckBox">
            <summary>
            The check box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.CheckBoxElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.CheckBoxElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.CheckBoxElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ComboBoxElement">
            <summary>
            The combobx element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.ComboBoxElement.ComboBox">
            <summary>
            The combo box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ComboBoxElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.ComboBoxElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.ComboBoxElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.CustomElementsContainer`1">
            <summary>
            The custom layout element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.CustomElementsContainer`1.CustomControl">
            <summary>
            The custom control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.CustomElementsContainer`1.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.CustomElement`1">
            <summary>
            The custom layout element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.CustomElement`1.CustomControl">
            <summary>
            The custom control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.CustomElement`1.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.DoubleValueElement">
            <summary>
            The double precision floating point value element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.DoubleValueElement.DoubleValue">
            <summary>
            The double value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.FloatValueElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.DoubleValueElement.SetLimits(FlaxEditor.CustomEditors.Elements.DoubleValueElement)">
            <summary>
            Sets the editor limits from the other <see cref="T:FlaxEditor.CustomEditors.Elements.DoubleValueElement"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.DoubleValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.DoubleValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.DoubleValueElement.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.EnumElement">
            <summary>
            The enum editor element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement._comboBox">
            <summary>
            The combo box used to show enum values.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement._enumType">
            <summary>
            The enum type.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement._entries">
            <summary>
            The enum entries. The same order as items in combo box.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement._cachedValue">
            <summary>
            The cached value from the UI.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement._hasValueCached">
            <summary>
            True if has value cached, otherwise false.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.EnumElement.Entry">
            <summary>
            The enum entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement.Entry.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.EnumElement.Entry.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.Entry.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.EnumElement.Entry"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.EnumElement.EnumComboBox">
            <summary>
            The custom combobox for enum editing. Supports some special cases for flag enums.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ComboBox" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.EnumComboBox.#ctor(FlaxEditor.CustomEditors.Elements.EnumElement)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.EnumElement.EnumComboBox"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.EnumComboBox.OnItemClicked(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.EnumElement.BuildEntriesDelegate">
            <summary>
            Custom extension delegate used to build enum element entries layout.
            </summary>
            <param name="type">The type.</param>
            <param name="entries">The output entries collection.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.EnumElement.IsFlags">
            <summary>
            Gets a value indicating whether this enum has flags.
            </summary>
            <value>
              <c>true</c> if this enum has flags; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.EnumElement.EnumTypeValue">
            <summary>
            Gets or sets the value of the enum (may not be int).
            </summary>
            <value>
            The enum type value.
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.EnumElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.CacheValue">
            <summary>
            Caches the selected UI enum value.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.Elements.EnumElement.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.#ctor(System.Type,FlaxEditor.CustomEditors.Elements.EnumElement.BuildEntriesDelegate,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.EnumElement"/> class.
            </summary>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="formatMode">The formatting mode.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.EnumElement.BuildEntriesDefault(System.Type,System.Collections.Generic.List{FlaxEditor.CustomEditors.Elements.EnumElement.Entry},FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Builds the default entries for the given enum type.
            </summary>
            <param name="type">The type.</param>
            <param name="entries">The output entries.</param>
            <param name="formatMode">The formatting mode.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.EnumElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.FloatValueElement">
            <summary>
            The floating point value element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.FloatValueElement.FloatValue">
            <summary>
            The float value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.FloatValueElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.FloatValueElement.SetLimits(FlaxEditor.CustomEditors.Elements.FloatValueElement)">
            <summary>
            Sets the editor limits from the other <see cref="T:FlaxEditor.CustomEditors.Elements.FloatValueElement"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.FloatValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.FloatValueElement.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.FloatValueElement.IsSliding">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.IFloatValueEditor">
            <summary>
            The floating point value editor element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IFloatValueEditor.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IFloatValueEditor.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.IIntegerValueEditor">
            <summary>
            The integer value editor element.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IIntegerValueEditor.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IIntegerValueEditor.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ImageElement">
            <summary>
            The image element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.ImageElement.Image">
            <summary>
            The image.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.ImageElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.IntegerValueElement">
            <summary>
            The integer value element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.IntegerValueElement.IntValue">
            <summary>
            The integer value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.IntegerValueElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.LimitAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.IntegerValueElement.SetLimits(FlaxEditor.CustomEditors.Elements.IntegerValueElement)">
            <summary>
            Sets the editor limits from the other <see cref="T:FlaxEditor.CustomEditors.Elements.IntegerValueElement"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IntegerValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IntegerValueElement.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.IntegerValueElement.IsSliding">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement">
            <summary>
            The signed integer value element (maps to the full range of long type).
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.LongValue">
            <summary>
            The signed integer (long) value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SignedIntegerValueElement.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement">
            <summary>
            The unsigned integer value element (maps to the full range of ulong type).
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.ULongValue">
            <summary>
            The unsigned integer (ulong) value box.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.UnsignedIntegerValueElement.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.LabelElement">
            <summary>
            The label element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.LabelElement.Label">
            <summary>
            The label.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.LabelElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.CheckBoxElement"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.LabelElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement">
            <summary>
            <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> properties list element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer"/>
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.PropertiesListElement.Properties">
            <summary>
            The list.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.PropertiesListElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.PropertiesListElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.PropertiesListElement.OnAddEditor(FlaxEditor.CustomEditors.CustomEditor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.PropertiesListElement.ClearLayout">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.SliderElement">
            <summary>
            The slider element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.SliderElement.Slider">
            <summary>
            The slider control.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SliderElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.SliderElement"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SliderElement.SetLimits(System.Reflection.MemberInfo)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.RangeAttribute"/>.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SliderElement.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the editor limits from member <see cref="T:FlaxEngine.RangeAttribute"/>.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.Control">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.FlaxEditor#CustomEditors#Elements#IIntegerValueEditor#Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SliderElement.IsSliding">
            <inheritdoc cref="P:FlaxEditor.CustomEditors.Elements.IFloatValueEditor.IsSliding" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.TreeElement">
            <summary>
            The tree structure element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.TreeElement.TreeControl">
            <summary>
            The tree control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TreeElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.TreeElement.Node(System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ITreeElement">
            <summary>
            Tree nodes elements.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ITreeElement.Node(System.String)">
            <summary>
            Adds new tree node element.
            </summary>
            <param name="text">The node name (title text).</param>
            <returns>The created element.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.TreeNodeElement">
            <summary>
            The tree structure node element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.TreeNodeElement.TreeNode">
            <summary>
            The tree node control.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TreeNodeElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.TreeNodeElement.Node(System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.SpaceElement">
            <summary>
            The spacer element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.SpaceElement.Spacer">
            <summary>
            The spacer.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.SpaceElement.Init(System.Single)">
            <summary>
            Initializes the element.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.SpaceElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.TextBoxElement">
            <summary>
            The textbox element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.TextBoxElement.TextBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TextBoxElement.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.TextBoxElement.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.Elements.TextBoxElement"/> class.
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.TextBoxElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.VerticalPanelElement">
            <summary>
            The vertical panel element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.VerticalPanelElement.Panel">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.VerticalPanelElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.ButtonElement">
            <summary>
            The button element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.ButtonElement.Button">
            <summary>
            The button.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ButtonElement.Init(System.String)">
            <summary>
            Initializes the element.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.ButtonElement.Init(System.String,FlaxEngine.Color)">
            <summary>
            Initializes the element.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.ButtonElement.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.Elements.GroupElement">
            <summary>
            The layout group element.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.Elements.GroupElement.Panel">
            <summary>
            The drop panel.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.Elements.GroupElement.Init(System.String)">
            <summary>
            Initializes the element.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.Elements.GroupElement.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel">
            <summary>
            Custom property name label that contains a checkbox used to enable/disable a property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.CheckBox">
            <summary>
            The check box.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.CheckChanged">
            <summary>
            Event fired when 'checked' state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.UpdateStyle">
            <summary>
            Updates the label style.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.CheckablePropertyNameLabel.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel">
            <summary>
            Custom property name label that fires mouse events for label.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseDelegate">
            <summary>
            Mouse action delegate.
            </summary>
            <param name="label">The label.</param>
            <param name="location">The mouse location.</param>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseLeftClick">
            <summary>
            The mouse left button clicks on the label.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseRightClick">
            <summary>
            The mouse right button clicks on the label.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseLeftDoubleClick">
            <summary>
            The mouse left button double clicks on the label.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.MouseRightDoubleClick">
            <summary>
            The mouse right button double clicks on the label.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel">
            <summary>
            Custom property name label that fires mouse events for label and supports dragging.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.DragDelegate">
            <summary>
            Mouse drag action delegate.
            </summary>
            <param name="label">The label.</param>
            <returns>The drag data or null if not use drag.</returns>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.Drag">
            <summary>
            The mouse starts the drag. Callbacks gets the drag data.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.DragablePropertyNameLabel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.PropertiesList">
            <summary>
            <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> properties list control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertiesList.SplitterSize">
            <summary>
            The splitter size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertiesList.SplitterMargin">
            <summary>
            The splitter margin (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.GUI.PropertiesList.SplitterValue">
            <summary>
            Gets or sets the splitter value (always in range [0; 1]).
            </summary>
            <value>
            The splitter value (always in range [0; 1]).
            </value>
        </member>
        <member name="P:FlaxEditor.CustomEditors.GUI.PropertiesList.Element">
            <summary>
            Gets the properties list element. It's a parent object for this control.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.#ctor(FlaxEditor.CustomEditors.Elements.PropertiesListElement)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.GUI.PropertiesList"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertiesList.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel">
            <summary>
            Displays custom editor property name.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Label" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.SetupContextMenuDelegate">
            <summary>
            Custom event delegate that can be sued to extend the property name label with an additional functionality.
            </summary>
            <param name="label">The label.</param>
            <param name="menu">The menu.</param>
            <param name="linkedEditor">The linked editor. Can be null.</param>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.FirstChildControlIndex">
            <summary>
            Helper value used by the <see cref="T:FlaxEditor.CustomEditors.GUI.PropertiesList"/> to draw property names in a proper area.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.LinkedEditor">
            <summary>
            The linked custom editor (shows the label property).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.HighlightStripColor">
            <summary>
            The highlight strip color drawn on a side (transparent if skip rendering).
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.SetupContextMenu">
            <summary>
            Occurs when label creates the context menu popup for th property. Can be used to add some custom logic per property editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.GUI.PropertyNameLabel"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.GUI.PropertyNameLabel.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.SyncPointEditor">
            <summary>
            Synchronizes objects modifications and records undo operations.
            Allows to override undo action target objects for the part of the custom editors hierarchy.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.SyncPointEditor._isDirty">
            <summary>
            The 'is dirty' flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.SyncPointEditor._setValueToken">
            <summary>
            The cached token used by the value setter to support batching Undo actions (eg. for sliders or color pickers).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.SyncPointEditor.UndoObjects">
            <summary>
            Gets the undo objects used to record undo operation changes.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.SyncPointEditor.Undo">
            <summary>
            Gets the undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.OnModified">
            <summary>
            Called when data gets modified by the custom editors.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.OnDirty(FlaxEditor.CustomEditors.CustomEditor,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.ClearToken">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.SyncPointEditor.EndUndoRecord">
            <summary>
            Ends the undo recording if started with custom token (eg. by value slider).
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for any type of storage and data management logic.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomValueContainer.GetDelegate">
            <summary>
            Get value delegate.
            </summary>
            <param name="instance">The parent object instance.</param>
            <param name="index">The index (for multi selected objects).</param>
            <returns>The value.</returns>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomValueContainer.SetDelegate">
            <summary>
            Set value delegate.
            </summary>
            <param name="instance">The parent object instance.</param>
            <param name="index">The index (for multi selected objects).</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.#ctor(System.Type,FlaxEditor.CustomEditors.CustomValueContainer.GetDelegate,FlaxEditor.CustomEditors.CustomValueContainer.SetDelegate,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomValueContainer"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="getter">The value getter.</param>
            <param name="setter">The value setter.</param>
            <param name="attributes">The custom type attributes used to override the value editor logic or appearance (eg. instance of <see cref="T:FlaxEngine.LimitAttribute"/>).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.#ctor(System.Type,System.Object,FlaxEditor.CustomEditors.CustomValueContainer.GetDelegate,FlaxEditor.CustomEditors.CustomValueContainer.SetDelegate,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomValueContainer"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="initialValue">The initial value.</param>
            <param name="getter">The value getter.</param>
            <param name="setter">The value setter.</param>
            <param name="attributes">The custom type attributes used to override the value editor logic or appearance (eg. instance of <see cref="T:FlaxEngine.LimitAttribute"/>).</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.GetAttributes">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.DictionaryValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.DictionaryValueContainer.Key">
            <summary>
            The key in the collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.DictionaryValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.#ctor(System.Type,System.Object,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.DictionaryValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="key">The key.</param>
            <param name="values">The collection values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.DictionaryValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.ListValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for <see cref="T:System.Collections.IList"/> (used for <see cref="T:System.Array"/> and <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.ListValueContainer.Index">
            <summary>
            The index in the collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ListValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.#ctor(System.Type,System.Int32,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ListValueContainer"/> class.
            </summary>
            <param name="elementType">Type of the collection elements.</param>
            <param name="index">The index.</param>
            <param name="values">The collection values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ListValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.ReadOnlyValueContainer">
            <summary>
            Custom <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> for read-only values.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.ValueContainer" />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ReadOnlyValueContainer"/> class.
            </summary>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.ReadOnlyValueContainer.RefreshReferenceValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.ValueContainer">
            <summary>
            Editable object values.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._hasDefaultValue">
            <summary>
            The has default value flag. Set if <see cref="F:FlaxEditor.CustomEditors.ValueContainer._defaultValue"/> is valid and assigned.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._defaultValue">
            <summary>
            The default value used to show difference in the UI compared to the default object values. Used to revert modified properties.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._hasReferenceValue">
            <summary>
            The has reference value flag. Set if <see cref="F:FlaxEditor.CustomEditors.ValueContainer._referenceValue"/> is valid and assigned.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer._referenceValue">
            <summary>
            The reference value used to show difference in the UI compared to the other object. Used by the prefabs system.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.ValueContainer.Info">
            <summary>
            The values source information from reflection. Used to update values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.Type">
            <summary>
            Gets the values type.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsSingleObject">
            <summary>
            Gets a value indicating whether single object is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasDifferentValues">
            <summary>
            Gets a value indicating whether selected objects are different values.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasDifferentTypes">
            <summary>
            Gets a value indicating whether selected objects are different types.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasNull">
            <summary>
            Gets a value indicating whether any value in the collection is null. Returns false if collection is empty.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasValueType">
            <summary>
            Gets a value indicating whether this any value in the collection is of value type (eg. a structure, not a class type). Returns false if collection is empty.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsArray">
            <summary>
            Gets a value indicating whether this values container type is array.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.ValuesTypes">
            <summary>
            Gets the values types array (without duplicates).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="info">The member info.</param>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasReferenceValue">
            <summary>
            Gets a value indicating whether this instance has reference value assigned (see <see cref="P:FlaxEditor.CustomEditors.ValueContainer.ReferenceValue"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.ReferenceValue">
            <summary>
            Gets the reference value used to show difference in the UI compared to the other object. Used by the prefabs system.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsReferenceValueModified">
            <summary>
            Gets a value indicating whether this instance has reference value and the any of the values in the contains is modified (compared to the reference).
            </summary>
            <remarks>
            For prefabs system it means that object property has been modified compared to the prefab value.
            </remarks>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.HasDefaultValue">
            <summary>
            Gets a value indicating whether this instance has default value assigned (see <see cref="P:FlaxEditor.CustomEditors.ValueContainer.DefaultValue"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.DefaultValue">
            <summary>
            Gets the default value used to show difference in the UI compared to the default value object. Used to revert modified properties.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.ValueContainer.IsDefaultValueModified">
            <summary>
            Gets a value indicating whether this instance has default value and the any of the values in the contains is modified (compared to the reference).
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Reflection.MemberInfo,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="info">The member info.</param>
            <param name="instanceValues">The parent values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Type,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="customType">The target custom type of the container values. Used to override the data.</param>
            <param name="other">The other values container to clone.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.#ctor(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.ValueContainer"/> class.
            </summary>
            <param name="info">The member info.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.GetAttributes">
            <summary>
            Gets the custom attributes defined for the values source member.
            </summary>
            <returns>The attributes objects array.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Refresh(FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Refreshes the specified instance values.
            </summary>
            <param name="instanceValues">The parent values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,System.Object)">
            <summary>
            Sets the specified instance values. Refreshes this values container.
            </summary>
            <param name="instanceValues">The parent values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Sets the specified instance values. Refreshes this values container.
            </summary>
            <param name="instanceValues">The parent values.</param>
            <param name="values">The other values to set this container to.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.Set(FlaxEditor.CustomEditors.ValueContainer)">
            <summary>
            Sets the specified instance values with the container values.
            </summary>
            <param name="instanceValues">The parent values.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.SetDefaultValue(System.Object)">
            <summary>
            Sets the default value of the container.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.RefreshDefaultValue(System.Object)">
            <summary>
            Refreshes the default value of the container.
            </summary>
            <param name="instanceValue">The parent value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.ClearDefaultValue">
            <summary>
            Clears the default value of the container.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.SetReferenceValue(System.Object)">
            <summary>
            Sets the reference value of the container.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.RefreshReferenceValue(System.Object)">
            <summary>
            Refreshes the reference value of the container.
            </summary>
            <param name="instanceValue">The parent value.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.ValueContainer.ClearReferenceValue">
            <summary>
            Clears the reference value of the container.
            </summary>
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditorPresenter">
            <summary>
            Main class for Custom Editors used to present selected objects properties and allow to modify them.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElementsContainer" />
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel">
            <summary>
            The panel control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.VerticalPanel" />
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel.Presenter">
            <summary>
            Gets the presenter.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.PresenterPanel.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor">
            <summary>
            The root editor. Mocks some custom editors events. Created a child editor for the selected objects.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.SyncPointEditor" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.Editor">
            <summary>
            The selected objects editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.OverrideEditor">
            <summary>
            Gets or sets the override custom editor used to edit selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor"/> class.
            </summary>
            <param name="noSelectionText">The text to show when no item is selected.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.Setup(FlaxEditor.CustomEditors.CustomEditorPresenter)">
            <summary>
            Setups editor for selected objects.
            </summary>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.RootEditor.OnModified">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Panel">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Editor">
            <summary>
            The selected objects editor (root, it generates actual editor for selection).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Selection">
            <summary>
            The selected objects list (read-only).
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.Undo">
            <summary>
            The undo object used by this editor.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.CustomEditorPresenter.SelectionChanged">
            <summary>
            Occurs when selection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.CustomEditors.CustomEditorPresenter.Modified">
            <summary>
            Occurs when any property gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.CustomEditorPresenter.GetUndoObjects">
            <summary>
            Occurs when presenter wants to gather undo objects to record changes. Can be overriden to provide custom objects collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.SelectionCount">
            <summary>
            Gets the amount of objects being selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.OverrideEditor">
            <summary>
            Gets or sets the override custom editor used to edit selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.BuildOnUpdate">
            <summary>
            Gets a value indicating whether build on update flag is set and layout will be updated during presenter update.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.#ctor(FlaxEditor.Undo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditors.CustomEditorPresenter"/> class.
            </summary>
            <param name="undo">The undo. It's optional.</param>
            <param name="noSelectionText">The custom text to display when no object is selected. Default is No selection.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Select(System.Object)">
            <summary>
            Selects the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Select(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Selects the specified objects.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Deselect">
            <summary>
            Clears the selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.BuildLayout">
            <summary>
            Builds the editors layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.BuildLayoutOnUpdate">
            <summary>
            Sets the request to build the editor layout on the next update.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.OnSelectionChanged">
            <summary>
            Called when selection gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.CustomEditorPresenter.Update">
            <summary>
            Updates custom editors. Refreshes UI values and applies changes to the selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.CustomEditorPresenter.ContainerControl">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditors.LayoutElement">
            <summary>
            Represents single element of the Custom Editor layout.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.LayoutElement.Control">
            <summary>
            Gets the control represented by this element.
            </summary>
            <value>
            The control.
            </value>
        </member>
        <member name="T:FlaxEditor.CustomEditors.LayoutElementsContainer">
            <summary>
            Represents a container control for <see cref="T:FlaxEditor.CustomEditors.LayoutElement"/>. Can contain child elements.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.LayoutElement" />
        </member>
        <member name="F:FlaxEditor.CustomEditors.LayoutElementsContainer.isRootGroup">
            <summary>
            Helper flag that is set to true if this container is in root presenter area, otherwise it's one of child groups.
            It's used to collapse all child groups and open the root ones by auto.
            </summary>
        </member>
        <member name="F:FlaxEditor.CustomEditors.LayoutElementsContainer.Children">
            <summary>
            The children.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.LayoutElementsContainer.ContainerControl">
            <summary>
            Gets the control represented by this element.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Group(System.String,System.Boolean)">
            <summary>
            Adds new group element.
            </summary>
            <param name="title">The title.</param>
            <param name="useTransparentHeader">True if use drop down icon and transparent group header, otherwise use normal style.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Button(System.String)">
            <summary>
            Adds new button element.
            </summary>
            <param name="text">The text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Button(System.String,FlaxEngine.Color)">
            <summary>
            Adds new button element with custom color.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Custom``1">
            <summary>
            Adds new custom element.
            </summary>
            <typeparam name="T">The custom control.</typeparam>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Custom``1(System.String,System.String)">
            <summary>
            Adds new custom element with name label.
            </summary>
            <param name="name">The property name.</param>
            <typeparam name="T">The custom control.</typeparam>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.CustomContainer``1">
            <summary>
            Adds new custom elements container.
            </summary>
            <typeparam name="T">The custom control.</typeparam>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.CustomContainer``1(System.String,System.String)">
            <summary>
            Adds new custom elements container with name label.
            </summary>
            <param name="name">The property name.</param>
            <typeparam name="T">The custom control.</typeparam>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Space(System.Single)">
            <summary>
            Adds new space.
            </summary>
            <param name="height">The space height.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Image(FlaxEngine.Sprite)">
            <summary>
            Adds sprite image to the layout.
            </summary>
            <param name="sprite">The sprite.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Image(FlaxEngine.Texture)">
            <summary>
            Adds texture image to the layout.
            </summary>
            <param name="texture">The texture.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Image(FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Adds render target image to the layout.
            </summary>
            <param name="renderTarget">The render target.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Header(System.String)">
            <summary>
            Adds new header control.
            </summary>
            <param name="text">The header text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.TextBox(System.Boolean)">
            <summary>
            Adds new text box element.
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Checkbox">
            <summary>
            Adds new check box element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Checkbox(System.String,System.String)">
            <summary>
            Adds new check box element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Tree">
            <summary>
            Adds new tree element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Label(System.String,FlaxEngine.TextAlignment)">
            <summary>
            Adds new label element.
            </summary>
            <param name="text">The label text.</param>
            <param name="horizontalAlignment">The label text horizontal alignment.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Label(System.String,System.String,System.String)">
            <summary>
            Adds new label element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="text">The label text.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.FloatValue">
            <summary>
            Adds new float value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.FloatValue(System.String,System.String)">
            <summary>
            Adds new float value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.DoubleValue">
            <summary>
            Adds new double value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.DoubleValue(System.String,System.String)">
            <summary>
            Adds new double value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Slider">
            <summary>
            Adds new slider element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Slider(System.String,System.String)">
            <summary>
            Adds new slider element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.SignedIntegerValue">
            <summary>
            Adds new signed integer (up to long range) value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.UnsignedIntegerValue">
            <summary>
            Adds new unsigned signed integer (up to ulong range) value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.IntegerValue">
            <summary>
            Adds new integer value element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.IntegerValue(System.String,System.String)">
            <summary>
            Adds new integer value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.ComboBox">
            <summary>
            Adds new combobox element.
            </summary>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.ComboBox(System.String,System.String)">
            <summary>
            Adds new combobox element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Enum(System.Type,FlaxEditor.CustomEditors.Elements.EnumElement.BuildEntriesDelegate,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Adds new enum value element.
            </summary>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="formatMode">The formatting mode.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Enum(System.String,System.Type,FlaxEditor.CustomEditors.Elements.EnumElement.BuildEntriesDelegate,System.String,FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Adds new enum value element with name label.
            </summary>
            <param name="name">The property name.</param>
            <param name="type">The enum type.</param>
            <param name="customBuildEntriesDelegate">The custom entries layout builder. Allows to hide existing or add different enum values to editor.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <param name="formatMode">The formatting mode.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Object(FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor)">
            <summary>
            Adds object(s) editor. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Object(System.String,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object(s) editor with name label. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="name">The property name.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Object(FlaxEditor.CustomEditors.GUI.PropertyNameLabel,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object(s) editor with name label. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="label">The property label.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Property(System.String,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object property editor. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="name">The property name.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.Property(FlaxEditor.CustomEditors.GUI.PropertyNameLabel,FlaxEditor.CustomEditors.ValueContainer,FlaxEditor.CustomEditors.CustomEditor,System.String)">
            <summary>
            Adds object property editor. Selects proper <see cref="T:FlaxEditor.CustomEditors.CustomEditor"/> based on overrides.
            </summary>
            <param name="label">The property label.</param>
            <param name="values">The values.</param>
            <param name="overrideEditor">The custom editor to use. If null will detect it by auto.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.AddPropertyItem(System.String,System.String)">
            <summary>
            Adds the <see cref="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement"/> to the current layout or reuses the previous one. Used to inject properties.
            </summary>
            <param name="name">The property label name.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.AddPropertyItem(FlaxEditor.CustomEditors.GUI.PropertyNameLabel,System.String)">
            <summary>
            Adds the <see cref="T:FlaxEditor.CustomEditors.Elements.PropertiesListElement"/> to the current layout or reuses the previous one. Used to inject properties.
            </summary>
            <param name="label">The property label.</param>
            <param name="tooltip">The property label tooltip text.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.OnAddElement(FlaxEditor.CustomEditors.LayoutElement)">
            <summary>
            Called when element is added to the layout.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.OnAddEditor(FlaxEditor.CustomEditors.CustomEditor)">
            <summary>
            Called when editor is added.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.CustomEditors.LayoutElementsContainer.ClearLayout">
            <summary>
            Clears the layout.
            </summary>
        </member>
        <member name="P:FlaxEditor.CustomEditors.LayoutElementsContainer.Control">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase">
            <summary>
            Base class for transformation gizmos that can be used to select objects and transform them.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase._startTransforms">
            <summary>
            The start transforms list cached for selected objects before transformation apply. Can be sued to create undo operations.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.Position">
            <summary>
            Gets the gizmo position.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.LastDelta">
            <summary>
            Gets the last transformation delta.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.TransformGizmoBase" /> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.StartTransforming">
            <summary>
            Starts the objects transforming (optionally with duplicate).
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.EndTransforming">
            <summary>
            Ends the objects transforming.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.CanTransform">
            <summary>
            Gets a value indicating whether this tool can transform objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.CanDuplicate">
            <summary>
            Gets a value indicating whether this tool can duplicate objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.SelectionCount">
            <summary>
            Gets the selected objects count.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.GetSelectedObject(System.Int32)">
            <summary>
            Gets the selected object transformation.
            </summary>
            <param name="index">The selected object index.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.GetSelectedObjectsBounds(FlaxEngine.BoundingBox@,System.Boolean@)">
            <summary>
            Gets the selected objects bounding box (contains the whole selection).
            </summary>
            <param name="bounds">The bounds of the selected objects (merged bounds).</param>
            <param name="navigationDirty">True if editing the selected objects transformations marks the navigation system area dirty (for auto-rebuild), otherwise skip update.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnStartTransforming">
            <summary>
            Called when user starts transforming selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnApplyTransformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Called when gizmo tools wants to apply transformation delta to the selected objects pool.
            </summary>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnEndTransforming">
            <summary>
            Called when user ends transforming selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.OnDuplicate">
            <summary>
            Called when user duplicates selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.GetSelectionCenter">
            <summary>
            Gets the selection center point (in world space).
            </summary>
            <returns>Center point or <see cref="F:FlaxEngine.Vector3.Zero"/> if no object selected.</returns>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PrecisionModeScale">
            <summary>
            The value to adjust all transformation when precisionMode is active.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TranslationSnapEnable">
            <summary>
            True if enable grid snapping when moving objects
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.RotationSnapEnabled">
            <summary>
            True if enable grid snapping when rotating objects
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.ScaleSnapEnabled">
            <summary>
            True if enable grid snapping when scaling objects
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TranslationSnapValue">
            <summary>
            Translation snap value
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.RotationSnapValue">
            <summary>
            Rotation snap value
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.ScaleSnapValue">
            <summary>
            Scale snap value
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActivePivot">
            <summary>
            Gets the current pivot type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActiveAxis">
            <summary>
            Gets the current axis type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActiveMode">
            <summary>
            Gets or sts the current gizmo mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.ModeChanged">
            <summary>
            Event fired when active gizmo mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmoBase.ActiveTransformSpace">
            <summary>
            Gets or sets the current gizmo transform space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpaceChanged">
            <summary>
            Event fired when active transform space gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmoBase.ToggleTransformSpace">
            <summary>
            Toggles gizmo transform space
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.Axis">
            <summary>
            Gizmo axis modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.X">
            <summary>
            The X axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.Y">
            <summary>
            The Y axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.Z">
            <summary>
            The Z axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.XY">
            <summary>
            The XY plane.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.ZX">
            <summary>
            The ZX plane.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.YZ">
            <summary>
            The YZ plane.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Axis.Center">
            <summary>
            The center point.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.Mode">
            <summary>
            Gizmo tool mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Mode.Translate">
            <summary>
            Translate object(s)
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Mode.Rotate">
            <summary>
            Rotate object(s)
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.Mode.Scale">
            <summary>
            Scale object(s)
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpace">
            <summary>
            Transform object space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpace.Local">
            <summary>
            Object local space coordinates
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.TransformSpace.World">
            <summary>
            World space coordinates
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmoBase.PivotType">
            <summary>
            Pivot location type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PivotType.ObjectCenter">
            <summary>
            First selected object center
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PivotType.SelectionCenter">
            <summary>
            Selection pool center point
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmoBase.PivotType.WorldOrigin">
            <summary>
            World origin
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.IEditorPrimitivesOwner">
            <summary>
            Interface for editor viewports that can contain and use <see cref="T:FlaxEditor.Gizmo.EditorPrimitives"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.IGizmoOwner" />
        </member>
        <member name="P:FlaxEditor.Gizmo.IEditorPrimitivesOwner.DebugDrawData">
            <summary>
            Gets the debug draw data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.EditorPrimitives">
            <summary>
            In-build postFx used to render debug shapes, gizmo tools and other editor primitives to MSAA render target and composite it with the editor preview window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.EditorPrimitives.DrawDebugDraw">
            <summary>
            Gets or sets a value indicating whether draw <see cref="T:FlaxEngine.DebugDraw"/> shapes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.EditorPrimitives.Viewport">
            <summary>
            The target viewport.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.EditorPrimitives.Order">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.EditorPrimitives.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Gizmo.GridGizmo">
            <summary>
            Draws a grid to feel better world origin position and the world units.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="P:FlaxEditor.Gizmo.GridGizmo.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEditor.Gizmo.GridGizmo"/> is enabled.
            </summary>
        </member>
        <member name="E:FlaxEditor.Gizmo.GridGizmo.EnabledChanged">
            <summary>
            Occurs when enabled state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GridGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.GridGizmo"/> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GridGizmo.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Gizmo.SelectionOutline">
            <summary>
            In-build postFx used to render outline for selected objects in editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.SelectionOutline._actors">
            <summary>
            The cached actors list used for drawing (reusable to reduce memory allocations). Always cleared before and after objects rendering.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.SelectionOutline.SelectionGetter">
            <summary>
            The selection getter.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.SelectionOutline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.SelectionOutline"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.HasDataReady">
            <summary>
            Gets a value indicating whether this instance has data ready.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.SelectionOutline.CanRender">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.SelectionOutline.Render(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget,FlaxEngine.Rendering.RenderTarget)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.SelectionOutline.DrawSelectionDepth(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Draws the selected object to depth buffer.
            </summary>
            <param name="context">The context.</param>
            <param name="task">The task.</param>
            <param name="customDepth">The custom depth (output).</param>
        </member>
        <member name="T:FlaxEditor.Gizmo.GizmoBase">
            <summary>
            Base class for all Gizmo controls that can be attached to the <see cref="T:FlaxEditor.Gizmo.IGizmoOwner"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.GizmoBase.Owner">
            <summary>
            Gets the gizmo owner.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.GizmoBase.IsActive">
            <summary>
            Gets a value indicating whether this gizmo is active.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.GizmoBase"/> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.OnSelectionChanged(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Called when selected objects collection gets changed.
            </summary>
            <param name="newSelection">The new selection pool.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.OnActivated">
            <summary>
            Called when gizmo gets activated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.OnDeactivated">
            <summary>
            Called when gizmo gets deactivated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.Update(System.Single)">
            <summary>
            Updates the gizmo logic (called even if not active).
            </summary>
            <param name="dt">Update delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.Pick">
            <summary>
            Performs scene object picking. Called by the viewport on left mouse button released.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmoBase.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <summary>
            Draws the gizmo.
            </summary>
            <param name="collector">The draw calls collector.</param>
        </member>
        <member name="T:FlaxEditor.Gizmo.GizmosCollection">
            <summary>
            Represents collection of Gizmo tools where one is active and in use.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="E:FlaxEditor.Gizmo.GizmosCollection.ActiveChanged">
            <summary>
            Occurs when active gizmo tool gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.GizmosCollection.Active">
            <summary>
            Gets or sets the active gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmosCollection.Remove(FlaxEditor.Gizmo.GizmoBase)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.GizmosCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.IGizmoOwner">
            <summary>
            Describes objects that can own gizmo tools.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.Gizmos">
            <summary>
            Gets the gizmos collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.RenderTask">
            <summary>
            Gets the render task used by the owner to render the scene and the gizmos.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsLeftMouseButtonDown">
            <summary>
            Gets a value indicating whether left mouse button is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsRightMouseButtonDown">
            <summary>
            Gets a value indicating whether right mouse button is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsAltKeyDown">
            <summary>
            Gets a value indicating whether Alt key is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.IsControlDown">
            <summary>
            Gets a value indicating whether Control key is pressed down.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.SnapToGround">
            <summary>
            Gets a value indicating whether snap selected objects to ground (check if user pressed the given input key to call action).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewPosition">
            <summary>
            Gets the view position.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewOrientation">
            <summary>
            Gets the view orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.ViewFarPlane">
            <summary>
            Gets the view far clipping plane.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.MouseRay">
            <summary>
            Gets the mouse ray (in world space of the viewport).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.MouseDelta">
            <summary>
            Gets the mouse movement delta.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.UseSnapping">
            <summary>
            Gets a value indicating whether use grid snapping during gizmo operations.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.UseDuplicate">
            <summary>
            Gets a value indicating whether duplicate objects during gizmo operation (eg. when transforming).
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.IGizmoOwner.Undo">
            <summary>
            Gets a <see cref="T:FlaxEditor.Undo"/> object used by the gizmo owner.
            </summary>
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmo">
            <summary>
            The most import gizmo tool used to move, rotate, scale and select scene objects in editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.TransformGizmoBase" />
        </member>
        <member name="T:FlaxEditor.Gizmo.TransformGizmo.ApplyTransformationDelegate">
            <summary>
            Applies scale to the selected objects pool.
            </summary>
            <param name="selection">The selected objects pool.</param>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmo.ApplyTransformation">
            <summary>
            The event to apply objects transformation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Gizmo.TransformGizmo.Duplicate">
            <summary>
            The event to duplicate selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmo.SelectedParents">
            <summary>
            Gets the array of selected parent objects (as actors).
            </summary>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Gizmo.TransformGizmo" /> class.
            </summary>
            <param name="owner">The gizmos owner.</param>
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnSelectionChanged(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Gizmo.TransformGizmo.SelectionCount">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.GetSelectedObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.GetSelectedObjectsBounds(FlaxEngine.BoundingBox@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnApplyTransformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnEndTransforming">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Gizmo.TransformGizmo.OnDuplicate">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.NavigationBar">
            <summary>
            A navigation bar control. Shows the current location path with UI buttons to navigate around.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEditor.GUI.NavigationBar.DefaultButtonsMargin">
            <summary>
            The default buttons margin.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.NavigationBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationBar.Arrange">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.NavigationBar.UpdateBounds(FlaxEditor.GUI.ToolStrip)">
            <summary>
            Updates the bar bounds and positions it after the last toolstrip button. Ensures to fit the toolstrip area (navigation bar horizontal scroll bar can be used to view the full path).
            </summary>
            <param name="toolstrip">The toolstrip.</param>
        </member>
        <member name="T:FlaxEditor.GUI.NavigationButton">
            <summary>
            A navigation bar button. Allows to change the current location and view the path.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Button" />
        </member>
        <member name="F:FlaxEditor.GUI.NavigationButton._validDragOver">
            <summary>
            The valid drag is over flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.NavigationButton.DefaultMargin">
            <summary>
            The default margin (horizontal).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationButton.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.NavigationButton"/> class.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.NavigationButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.NavigationButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.AssetSearchPopup">
            <summary>
            Popup that shows the list of assets to pick. Supports searching and basic items filtering.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu" />
        </member>
        <member name="T:FlaxEditor.GUI.AssetSearchPopup.AssetItemView">
            <summary>
            The asset item.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item" />
        </member>
        <member name="F:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.IconSize">
            <summary>
            The icon size (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.Asset">
            <summary>
            Gets the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.#ctor(FlaxEditor.Content.AssetItem)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.AssetSearchPopup.AssetItemView"/> class.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.GetTextRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.AssetItemView.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.AssetSearchPopup.IsAssetItemValidDelegate">
            <summary>
            Validates if the given asset item can be used to pick it.
            </summary>
            <param name="asset">The asset.</param>
            <returns>True if is valid.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEditor.GUI.AssetSearchPopup.IsAssetItemValidDelegate,System.Action{FlaxEditor.Content.AssetItem})">
            <summary>
            Shows the popup.
            </summary>
            <param name="showTarget">The show target.</param>
            <param name="showTargetLocation">The show target location.</param>
            <param name="isValid">Event called to check if a given asset item is valid to be used.</param>
            <param name="selected">Event called on asset item pick.</param>
            <returns>The dialog.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.AssetSearchPopup.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockHintWindow">
            <summary>
            Helper class used to handle docking windows dragging and docking.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Create(FlaxEditor.GUI.Docking.FloatWindowDockPanel)">
            <summary>
            Creates the new dragging hit window.
            </summary>
            <param name="toMove">Floating dock panel to move.</param>
            <returns>The dock hint window object.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Create(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Creates the new dragging hit window.
            </summary>
            <param name="toMove">Dock window to move.</param>
            <returns>The dock hint window object.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.CalculateDockRect(FlaxEditor.GUI.Docking.DockState,FlaxEngine.Rectangle@)">
            <summary>
            Calculates window rectangle in the dock window.
            </summary>
            <param name="state">Window dock state.</param>
            <param name="rect">Dock panel rectangle.</param>
            <returns>Calculated window rectangle.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockHintWindow.Proxy">
            <summary>
            Contains helper proxy windows shared across docking panels. They are used to visualize docking window locations.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Window">
            <summary>
            The drag proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Left">
            <summary>
            The left hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Right">
            <summary>
            The right hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Up">
            <summary>
            The up hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Down">
            <summary>
            The down hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Center">
            <summary>
            The center hint proxy window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.HintWindowsSize">
            <summary>
            The hint windows size.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.InitHitProxy">
            <summary>
            Initializes the hit proxy windows. Those windows are used to indicate drag target areas (left, right, top, bottom, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Init(FlaxEngine.Vector2@)">
            <summary>
            Initializes the hint window.
            </summary>
            <param name="initSize">Initial size of the proxy window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Hide">
            <summary>
            Hides proxy windows.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockHintWindow.Proxy.Dispose">
            <summary>
            Releases proxy data and windows.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockState">
            <summary>
            Dockable window mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.Unknown">
            <summary>
            The unknown state.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.Float">
            <summary>
            The floating window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockFill">
            <summary>
            The dock fill as a tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockTop">
            <summary>
            The dock top.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockLeft">
            <summary>
            The dock left.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockBottom">
            <summary>
            The dock bottom.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.DockRight">
            <summary>
            The dock right.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockState.Hidden">
            <summary>
            The hidden state.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockPanel">
            <summary>
            Dockable panel control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultHeaderHeight">
            <summary>
            The default dock tabs header height.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultLeftTextMargin">
            <summary>
            The default tabs header text left margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultRightTextMargin">
            <summary>
            The default tabs header text right margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultButtonsSize">
            <summary>
            The default tabs header buttons size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultButtonsMargin">
            <summary>
            The default tabs header buttons margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanel.DefaultSplitterValue">
            <summary>
            The default splitters value.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.IsMaster">
            <summary>
            Returns true if this panel is a master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.IsFloating">
            <summary>
            Returns true if this panel is a floating window panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.DockAreaBounds">
            <summary>
            Gets docking area bounds (tabs rectangle) in a screen space.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.ChildPanels">
            <summary>
            Gets the child panels.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.ChildPanelsCount">
            <summary>
            Gets the child panels count.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.Tabs">
            <summary>
            Gets the tabs.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.TabsCount">
            <summary>
            Gets amount of the tabs in a dock panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.SelectedTabIndex">
            <summary>
            Gets index of the selected tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.SelectedTab">
            <summary>
            Gets the selected tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.FirstTab">
            <summary>
            Gets the first tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.LastTab">
            <summary>
            Gets the last tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.ParentDockPanel">
            <summary>
            Gets the parent panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockPanel.TabsProxy">
            <summary>
            Gets the tabs header proxy.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.#ctor(FlaxEditor.GUI.Docking.DockPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.DockPanel"/> class.
            </summary>
            <param name="parentPanel">The parent panel.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.CloseAll(FlaxEngine.ClosingReason)">
            <summary>
            Closes all the windows.
            </summary>
            <param name="reason">Window closing reason.</param>
            <returns>True if action has been cancelled (due to window internal logic).</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.GetTab(System.Int32)">
            <summary>
            Gets tab at the given index.
            </summary>
            <param name="tabIndex">The index of the tab page.</param>
            <returns>The tab.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.GetTabIndex(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Gets tab at the given index.
            </summary>
            <param name="tab">The tab page.</param>
            <returns>The index of the given tab.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.ContainsTab(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Determines whether panel contains the specified tab.
            </summary>
            <param name="tab">The tab.</param>
            <returns>
              <c>true</c> if panel contains the specified tab; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.SelectTab(System.Int32)">
            <summary>
            Selects the tab page.
            </summary>
            <param name="tabIndex">The index of the tab page to select.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.SelectTab(FlaxEditor.GUI.Docking.DockWindow,System.Boolean)">
            <summary>
            Selects the tab page.
            </summary>
            <param name="tab">The tab page to select.</param>
            <param name="autoFocus">True if focus tab after selection change.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.OnSelectedTabChanged">
            <summary>
            Called when selected tab gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.HitTest(FlaxEngine.Vector2@)">
            <summary>
            Performs hit test over dock panel
            </summary>
            <param name="position">Screen space position to test</param>
            <returns>Dock panel that has been hit or null if nothing found</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.TryGetDockState(System.Single@)">
            <summary>
            Try get panel dock state
            </summary>
            <param name="splitterValue">Splitter value</param>
            <returns>Dock State</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.CreateChildPanel(FlaxEditor.GUI.Docking.DockState,System.Single)">
            <summary>
            Create child dock panel
            </summary>
            <param name="state">Dock panel state</param>
            <param name="splitterValue">Initial splitter value</param>
            <returns>Child panel</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.OnLastTabRemoved">
            <summary>
            Called when last tab gets removed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.DockWindow(FlaxEditor.GUI.Docking.DockState,FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Docks the window.
            </summary>
            <param name="state">The state.</param>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.UndockWindow(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Undocks the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.AddTab(FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Adds the tab.
            </summary>
            <param name="window">The window to insert as a tab.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockPanelProxy">
            <summary>
            Proxy control used for docking <see cref="T:FlaxEditor.GUI.Docking.DockWindow"/> inside <see cref="T:FlaxEditor.GUI.Docking.DockPanel"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseLeftButtonDown">
            <summary>
            The is mouse down flag (left button).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseRightButtonDown">
            <summary>
            The is mouse down flag (right button).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseMiddleButtonDown">
            <summary>
            The is mouse down flag (middle button).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.IsMouseDownOverCross">
            <summary>
            The is mouse down over cross button flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.MouseDownWindow">
            <summary>
            The mouse down window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.MousePosition">
            <summary>
            The mouse position.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockPanelProxy.StartDragAsyncWindow">
            <summary>
            The start drag asynchronous window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.#ctor(FlaxEditor.GUI.Docking.DockPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.DockPanelProxy"/> class.
            </summary>
            <param name="panel">The panel.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockPanelProxy.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.DockWindow">
            <summary>
            Dockable window UI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockWindow._masterPanel">
            <summary>
            The master panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.DockWindow._dockedTo">
            <summary>
            The parent panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.HideOnClose">
            <summary>
            Gets or sets a value indicating whether hide window on close.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.MasterPanel">
            <summary>
            Gets the master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.ParentDockPanel">
            <summary>
            Gets the parent dock panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.IsDocked">
            <summary>
            Gets a value indicating whether this window is docked.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.IsSelected">
            <summary>
            Gets a value indicating whether this window is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.DefaultSize">
            <summary>
            Gets the default window size.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.SerializationTypename">
            <summary>
            Gets the serialization typename.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.Title">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.TitleSize">
            <summary>
            Gets the size of the title.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.#ctor(FlaxEditor.GUI.Docking.MasterDockPanel,System.Boolean,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.DockWindow"/> class.
            </summary>
            <param name="masterPanel">The master docking panel.</param>
            <param name="hideOnClose">True if hide window on closing, otherwise it will be destroyed.</param>
            <param name="scrollBars">The scroll bars.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.ShowFloating">
            <summary>
            Shows the window in a floating state.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.ShowFloating(FlaxEngine.WindowStartPosition)">
            <summary>
            Shows the window in a floating state.
            </summary>
            <param name="position">Window location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.ShowFloating(FlaxEngine.Vector2,FlaxEngine.WindowStartPosition)">
            <summary>
            Shows the window in a floating state.
            </summary>
            <param name="size">Window size, set Vector2.Zero to use default.</param>
            <param name="position">Window location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Show(FlaxEditor.GUI.Docking.DockState,FlaxEditor.GUI.Docking.DockPanel)">
            <summary>
            Shows the window.
            </summary>
            <param name="state">Initial window state.</param>
            <param name="toDock">Panel to dock to it.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Show(FlaxEditor.GUI.Docking.DockState,FlaxEditor.GUI.Docking.DockWindow)">
            <summary>
            Shows the window.
            </summary>
            <param name="state">Initial window state.</param>
            <param name="toDock">Window to dock to it.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.FocusOrShow">
            <summary>
            Focuses or shows the window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.FocusOrShow(FlaxEditor.GUI.Docking.DockState)">
            <summary>
            Focuses or shows the window.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">Window closing reason.</param>
            <returns>True if action has been cancelled (due to window internal logic).</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.SelectTab(System.Boolean)">
            <summary>
            Selects this tab page.
            </summary>
            <param name="autoFocus">True if focus tab after selection change.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnUnlink">
            <summary>
            Called when window is unlinked from the master panel.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Undock">
            <summary>
            Undocks this window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnClosing(FlaxEngine.ClosingReason)">
            <summary>
            Called when window is closing. Operation can be cancelled.
            </summary>
            <param name="reason">The reason.</param>
            <returns>True if cancel, otherwise false to allow.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnClose">
            <summary>
            Called when window is closed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnShow">
            <summary>
            Called when window shows.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.DockWindow.UseLayoutData">
            <summary>
            Gets a value indicating whether window uses custom layout data.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <summary>
            Called when during windows layout serialization. Each window can use it to store custom interface data (eg. splitter position).
            </summary>
            <param name="writer">The Xml writer.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <summary>
            Called when during windows layout deserialization. Each window can use it to load custom interface data (eg. splitter position).
            </summary>
            <param name="node">The Xml document node.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnLayoutDeserialize">
            <summary>
            Called when during windows layout deserialization if window has no layout data to load. Can be used to restore default UI layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.DockWindow.OnShowContextMenu(FlaxEngine.GUI.ContextMenu)">
            <summary>
            Called when dock panel wants to show the context menu for this window. Can be used to inject custom buttons and items to the context menu (on top).
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Docking.FloatWindowDockPanel">
            <summary>
            Floating Window Dock Panel control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Docking.DockPanel" />
        </member>
        <member name="P:FlaxEditor.GUI.Docking.FloatWindowDockPanel.MasterPanel">
            <summary>
            Gets the master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.FloatWindowDockPanel.Window">
            <summary>
            Gets the window.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.#ctor(FlaxEditor.GUI.Docking.MasterDockPanel,FlaxEngine.GUI.RootControl)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.FloatWindowDockPanel"/> class.
            </summary>
            <param name="masterPanel">The master panel.</param>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.BeginDrag">
            <summary>
            Begin drag operation on the window
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.CreateFloatWindow(FlaxEngine.GUI.RootControl,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.WindowStartPosition,System.String)">
            <summary>
            Creates a floating window.
            </summary>
            <param name="parent">Parent window handle.</param>
            <param name="location">Client area location.</param>
            <param name="size">Window client area size.</param>
            <param name="startPosition">Window start position.</param>
            <param name="title">Initial window title.</param>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.FloatWindowDockPanel.IsFloating">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.TryGetDockState(System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.OnLastTabRemoved">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.OnSelectedTabChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.FloatWindowDockPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Docking.MasterDockPanel">
            <summary>
            Master Dock Panel control used as a root control for dockable windows workspace.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Docking.DockPanel" />
        </member>
        <member name="F:FlaxEditor.GUI.Docking.MasterDockPanel.Windows">
            <summary>
            Array with all created dock windows for that master panel.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Docking.MasterDockPanel.FloatingPanels">
            <summary>
            Array with all floating windows for that master panel.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.MasterDockPanel.VisibleWindowsCount">
            <summary>
            Gets the visible windows count.
            </summary>
            <value>
            The visible windows count.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Docking.MasterDockPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.ResetLayout">
            <summary>
            Resets windows layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.HitTest(FlaxEngine.Vector2@,FlaxEditor.GUI.Docking.FloatWindowDockPanel)">
            <summary>
            Performs hit test over dock panel.
            </summary>
            <param name="position">Screen space position to test.</param>
            <param name="excluded">Floating window to omit during searching (and all docked to that one).</param>
            <returns>Dock panel that has been hit or null if nothing found.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Docking.MasterDockPanel.IsMaster">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Docking.MasterDockPanel.TryGetDockState(System.Single@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.AssetPicker">
            <summary>
            Assets picking control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
            <seealso cref="T:FlaxEditor.Content.IContentItemOwner" />
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.SelectedID">
            <summary>
            Gets or sets the selected asset identifier.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.SelectedAsset">
            <summary>
            Gets or sets the selected asset object.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.AssetPicker.AssetType">
            <summary>
            Gets or sets the assets types that this picker accepts (it supports types derived from the given type).
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.AssetPicker.SelectedItemChanged">
            <summary>
            Occurs when selected item gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.AssetPicker"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.#ctor(System.Type,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.AssetPicker"/> class.
            </summary>
            <param name="assetType">The assets types that this picker accepts.</param>
            <param name="location">The control location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnSelectedItemChanged">
            <summary>
            Called when selected item gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.AssetPicker.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ColumnDefinition">
            <summary>
            Table column descriptor.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.ColumnDefinition.ValueFormatDelegate">
            <summary>
            Converts raw cell value to the string used by the column formatting policy.
            </summary>
            <param name="value">The value.</param>
            <returns>The value string.</returns>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.UseExpandCollapseMode">
            <summary>
            True if use expand/collapse rows feature for this column. See <see cref="P:FlaxEditor.GUI.Row.Depth"/> property which is used to describe the rows hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.CellAlignment">
            <summary>
            The cell text alignment horizontally.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.Title">
            <summary>
            The column title.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.TitleFont">
            <summary>
            The title font.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.TitleColor">
            <summary>
            The column title text color.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.TitleBackgroundColor">
            <summary>
            The column title background background.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MinSize">
            <summary>
            The minimum size (in pixels) of the column.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MinSizePercentage">
            <summary>
            The minimum size percentage of the column (in range 0-100).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MaxSize">
            <summary>
            The maximum size (in pixels) of the column.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.MaxSizePercentage">
            <summary>
            The maximum size percentage of the column (in range 0-100).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ColumnDefinition.FormatValue">
            <summary>
            The value formatting delegate.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ColumnDefinition.ClampColumnSize(System.Single,System.Single)">
            <summary>
            Clamps the size of the column (in percentage size of the table).
            </summary>
            <param name="value">The percentage size of the column (split value).</param>
            <param name="tableSize">Size of the table (width in pixels).</param>
            <returns>The clamped percentage size of the column (split value).</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActors">
            <summary>
            Actors references collection drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors.#ctor(System.Func{FlaxEditor.SceneGraph.ActorNode,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragActors"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActors`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.SceneGraph.ActorNode"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragActors`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.SceneGraph.ActorNode"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.#ctor(System.Func{FlaxEditor.SceneGraph.ActorNode,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.ToDragData(FlaxEngine.Actor)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="actor">The actor.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.ToDragData(FlaxEditor.SceneGraph.ActorNode)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.SceneGraph.ActorNode})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.GetDragData(FlaxEngine.Actor)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="actor">The actor.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.GetDragData(FlaxEditor.SceneGraph.ActorNode)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.SceneGraph.ActorNode})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActors`1.FromDragData(FlaxEngine.GUI.DragData)">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActorType">
            <summary>
            Actor type drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragActorType"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragActorType`1">
            <summary>
            Helper class for handling actor type drag and drop (for spawning).
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragActorType`1.DragPrefix">
            <summary>
            The default prefix for drag data used for actor type drag and drop.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.ToDragData(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.ToDragData(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.GetDragData(System.Type)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The actor type.</param>
            <returns>The data</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragActorType`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data to extract <see cref="T:System.Type"/> collection.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty array if cannot get any valid.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragEventArgs">
            <summary>
            Drag event arguments data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragHandlers">
            <summary>
            Handles a list of <see cref="T:FlaxEditor.GUI.Drag.DragHelper`2"/>s
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.OnDragEnter(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag enter.
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.OnDragLeave">
            <summary>
            Called when drag leaves.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.OnDragDrop(FlaxEditor.GUI.Drag.DragEventArgs)">
            <summary>
            Called when drag drops.
            </summary>
            <param name="dragEventArgs">The <see cref="T:FlaxEditor.GUI.Drag.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.HasValidDrag">
            <summary>
            Determines whether has valid drag handler to handle the drag request.
            </summary>
            <returns>True if has valid drag handler to handle the drag request, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHandlers.WithValidDrag">
            <summary>
            Gets the first valid drag helper.
            </summary>
            <returns>The drag helper.</returns>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHandlers.Effect">
            <summary>
            Gets the valid drag effect to use.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScriptItems">
            <summary>
            Script items drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems.#ctor(System.Func{FlaxEditor.Content.ScriptItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragScriptItems"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScriptItems`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Content.ScriptItem"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ScriptItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragScriptItems`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.#ctor(System.Func{FlaxEditor.Content.ScriptItem,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.ToDragData(FlaxEditor.Content.ScriptItem)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ScriptItem})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.GetDragData(FlaxEditor.Content.ScriptItem)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ScriptItem})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScriptItems`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            Gathered objects or empty IEnumerable if cannot get any valid.
            </returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScripts">
            <summary>
            Scripts references drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts.#ctor(System.Func{FlaxEngine.Script,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragScripts"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragScripts`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEngine.Script"/> instance drag and drop.
            </summary>
            <seealso cref="T:FlaxEngine.Script" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragScripts`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.#ctor(System.Func{FlaxEngine.Script,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.ToDragData(FlaxEngine.Script)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEngine.Script})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.GetDragData(FlaxEngine.Script)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The script.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEngine.Script})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            Gathered objects or empty IEnumerable if cannot get any valid.
            </returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragScripts`1.IsValidData(FlaxEngine.GUI.DragDataText)">
            <summary>
            Tries to parse the drag data to validate if it has valid scripts darg.
            </summary>
            <param name="data">The data.</param>
            <returns>True if drag data has valid scripts, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragSurfaceParameters">
            <summary>
            Visject Surface parameter collection drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragSurfaceParameters"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragSurfaceParameters`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Surface.SurfaceParameter"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Surface.SurfaceParameter"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.ToDragData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.ToDragData(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.GetDragData(System.String)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.GetDragData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="parameterNames">The parameter names.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragSurfaceParameters`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data to extract parameters collection.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty array if cannot get any valid.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragAssets">
            <summary>
            Assets collection drag handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets.#ctor(System.Func{FlaxEditor.Content.AssetItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragAssets"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragAssets`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Content.AssetItem"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.AssetItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragAssets`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.#ctor(System.Func{FlaxEditor.Content.AssetItem,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.ToDragData(FlaxEngine.Asset)">
            <summary>
            Gets the drag data (finds asset item).
            </summary>
            <param name="asset">The asset.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.ToDragData(FlaxEditor.Content.AssetItem)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.AssetItem})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.GetDragData(FlaxEngine.Asset)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="asset">The asset.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.GetDragData(FlaxEditor.Content.AssetItem)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.AssetItem})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragAssets`1.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data to extract <see cref="T:FlaxEditor.Content.AssetItem"/> collection.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty array if cannot get any valid.</returns>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragHelper">
            <summary>
            The drag events helper object.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper.HasValidDrag">
            <summary>
            Gets a value indicating whether this instance has valid drag.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper.Effect">
            <summary>
            Gets the drag effect.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragEnter(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag enters.
            </summary>
            <param name="data">The data.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragLeave">
            <summary>
            Called when drag leaves.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragDrop">
            <summary>
            Called when drag drops.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper.OnDragDrop(FlaxEditor.GUI.Drag.DragEventArgs)">
            <summary>
            Called when drag drops.
            </summary>
            <param name="dragEventArgs">The <see cref="T:FlaxEditor.GUI.Drag.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragHelper`2">
            <summary>
            Base class for drag and drop operation helpers.
            </summary>
            <typeparam name="T">Type of the objects to collect from drag data.</typeparam>
            <typeparam name="U">Type of the drag-drop event.</typeparam>
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragHelper`2.Objects">
            <summary>
            The objects gathered.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper`2.HasValidDrag">
            <summary>
            Gets a value indicating whether this instance has valid drag data.
            </summary>
            <value>
              <c>true</c> if this instance has valid drag data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper`2.Effect">
            <summary>
            Gets the current drag effect.
            </summary>
            <value>
            The effect.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.Drag.DragHelper`2.ValidateFunction">
            <summary>
            The validation function
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.ToDragData(`0)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">An item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.ToDragData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.FromDragData(FlaxEngine.GUI.DragData)">
            <summary>
            Tries to parse the drag data.
            </summary>
            <param name="data">The data.</param>
            <returns>Gathered objects or empty IEnumerable if cannot get any valid.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.DragDrop(`1,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Handler drag drop event.
            </summary>
            <param name="dragEventArgs">The drag event arguments.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.InvalidDrag">
            <summary>
            Invalids the drag data.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragEnter(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag enters.
            </summary>
            <param name="data">The data.</param>
            <returns>True if drag event is valid and can be performed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragLeave">
            <summary>
            Called when drag leaves.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragDrop">
            <summary>
            Called when drag drops.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragHelper`2.OnDragDrop(FlaxEditor.GUI.Drag.DragEventArgs)">
            <summary>
            Called when drag drops.
            </summary>
            <param name="dragEventArgs">Arguments</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragItems">
            <summary>
            Drag content items handler.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems.#ctor(System.Func{FlaxEditor.Content.ContentItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Drag.DragItems"/> class.
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="T:FlaxEditor.GUI.Drag.DragItems`1">
            <summary>
            Helper class for handling <see cref="T:FlaxEditor.Content.ContentItem"/> drag and drop.
            </summary>
            <seealso cref="T:FlaxEditor.Content.ContentItem" />
        </member>
        <member name="F:FlaxEditor.GUI.Drag.DragItems`1.DragPrefix">
            <summary>
            The default prefix for drag data used for <see cref="T:FlaxEditor.Content.ContentItem"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.#ctor(System.Func{FlaxEditor.Content.ContentItem,System.Boolean})">
            <summary>
            Creates a new DragHelper
            </summary>
            <param name="validateFunction">The validation function</param>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.ToDragData(System.String)">
            <summary>
            Gets the drag data for the given file.
            </summary>
            <param name="path">The path.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.ToDragData(FlaxEditor.Content.ContentItem)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.ToDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ContentItem})">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.GetDragData(System.String)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="path">The path.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.GetDragData(FlaxEditor.Content.ContentItem)">
            <summary>
            Gets the drag data.
            </summary>
            <param name="item">The item.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.GetDragData(System.Collections.Generic.IEnumerable{FlaxEditor.Content.ContentItem})">
            <summary>
            Gets the drag data.
            </summary>
            <param name="items">The items.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Drag.DragItems`1.FromDragData(FlaxEngine.GUI.DragData)">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEditor.GUI.PlatformSelector">
            <summary>
            Editor control that allows user to select a platform icon.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.PlatformSelector.Selected">
            <summary>
            Gets or sets the selected platform.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.PlatformSelector.SelectedChanged">
            <summary>
            Occurs when selected platform gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.PlatformSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.PlatformSelector"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.PrefabDiffContextMenu">
            <summary>
            The custom context menu that shows a tree of prefab diff items.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuBase" />
        </member>
        <member name="F:FlaxEditor.GUI.PrefabDiffContextMenu.Tree">
            <summary>
            The tree control where you should add your nodes.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.PrefabDiffContextMenu.RevertAll">
            <summary>
            The event called to revert all the changes applied.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.PrefabDiffContextMenu.ApplyAll">
            <summary>
            The event called to apply all the changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.PrefabDiffContextMenu"/> class.
            </summary>
            <param name="width">The control width.</param>
            <param name="height">The control height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.PrefabDiffContextMenu.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.RenamePopup">
            <summary>
            Popup menu useful for renaming objects via UI. Displays text box for renaming.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuBase" />
        </member>
        <member name="E:FlaxEditor.GUI.RenamePopup.Renamed">
            <summary>
            Occurs when renaming is done.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.RenamePopup.Closed">
            <summary>
            Occurs when popup is closing (after renaming done or not).
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.RenamePopup.InitialValue">
            <summary>
            Gets or sets the initial value.
            </summary>
            <value>
            The initial value.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.RenamePopup.Text">
            <summary>
            Gets or sets the input field text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.#ctor(System.String,FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.RenamePopup"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="size">The size.</param>
            <param name="isMultiline">Enable/disable multiline text input support</param>
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.Show(FlaxEngine.GUI.Control,FlaxEngine.Rectangle,System.String,System.Boolean)">
            <summary>
            Shows the rename popup.
            </summary>
            <param name="control">The target control.</param>
            <param name="area">The target control area to cover.</param>
            <param name="value">The initial value.</param>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <returns>Created popup.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.OnHide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.RenamePopup.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.IColorPickerDialog">
            <summary>
            The base interface for the color picker dialogs.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.IColorPickerDialog.ClosePicker">
            <summary>
            Closes the picker (similar to value editing cancel).
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.ColorPickerDialog">
            <summary>
            Color picking dialog.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="P:FlaxEditor.GUI.Dialogs.ColorPickerDialog.SelectedColor">
            <summary>
            Gets the selected color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.#ctor(FlaxEngine.Color,FlaxEngine.GUI.ColorValueBox.ColorPickerEvent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorPickerDialog"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="colorChanged">The color changed event.</param>
            <param name="useDynamicEditing">True if allow dynamic value editing (slider-like usage), otherwise will fire color change event only on editing end.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorPickerDialog.ClosePicker">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.ColorSelector">
            <summary>
            Color selecting control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.ColorSelector._color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.ColorSelector._wheelRect">
            <summary>
            The wheel rectangle.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Dialogs.ColorSelector.ColorChanged">
            <summary>
            Occurs when selected color gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Dialogs.ColorSelector.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorSelector"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorSelector"/> class.
            </summary>
            <param name="wheelSize">Size of the wheel.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.UpdateMouse(FlaxEngine.Vector2@)">
            <summary>
            Updates the color selected by the mouse.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelector.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders">
            <summary>
            Color selecting control with additional sliders.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.ColorSelector" />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders"/> class.
            </summary>
            <param name="wheelSize">Size of the wheel.</param>
            <param name="slidersThickness">The sliders thickness.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.UpdateMouse(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.ColorSelectorWithSliders.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Dialogs.Dialog">
            <summary>
            Helper class for showing user dialogs.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._isWaitingForDialog">
            <summary>
            Flag used to block the calling thread if it used ShowDialog option.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._window">
            <summary>
            The parent window.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Dialogs.Dialog._result">
            <summary>
            The dialog result.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Dialogs.Dialog.Result">
            <summary>
            Gets the dialog result.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Dialogs.Dialog"/> class.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog(FlaxEngine.GUI.WindowRootControl)">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog(FlaxEngine.GUI.Control)">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <param name="control">The control calling.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.ShowDialog(FlaxEngine.Window)">
            <summary>
            Shows the dialog and waits for the result.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show">
            <summary>
            Shows the dialog.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show(FlaxEngine.GUI.WindowRootControl)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="parentWindow">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show(FlaxEngine.GUI.Control)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="control">The control calling.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Show(FlaxEngine.Window)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="parentWindow">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Close">
            <summary>
            Closes this dialog.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.Close(FlaxEngine.DialogResult)">
            <summary>
            Closes dialog with the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <summary>
            Setups the window settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.OnShow">
            <summary>
            Called when dialogs popups.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Dialogs.Dialog.CanCloseWindow(FlaxEngine.ClosingReason)">
            <summary>
            Determines whether this dialog can be closed.
            </summary>
            <param name="reason">The reason.</param>
            <returns>
              <c>true</c> if this dialog can be closed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEditor.GUI.MainMenu">
            <summary>
            Menu strip with child buttons.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.MainMenu"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.AddButton(System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The button text.</param>
            <returns>Created button control.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.GetButton(System.String)">
            <summary>
            Gets the button.
            </summary>
            <param name="text">The button text.</param>
            <returns>The button or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.Select(FlaxEditor.GUI.MainMenuButton)">
            <summary>
            Selects the specified button. Used by <see cref="T:FlaxEditor.GUI.MainMenuButton"/>.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenu.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.MainMenuButton">
            <summary>
            Main menu button control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.MainMenuButton.Text">
            <summary>
            The button text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.MainMenuButton.ContextMenu">
            <summary>
            The context menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.MainMenuButton"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.MainMenuButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Row">
            <summary>
            Single row control for <see cref="P:FlaxEditor.GUI.Row.Table"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.GUI.Row.Table">
            <summary>
            Gets the parent table that owns this row.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Row.Values">
            <summary>
            Gets or sets the cell values.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Row.Depth">
            <summary>
            Gets or sets the row depth level.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Row.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Row"/> class.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Row.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Row.OnParentChangedInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Row.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Row.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ItemsListContextMenu">
            <summary>
            The custom context menu that shows a list of items and supports searching by name and query results highlighting.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuBase" />
        </member>
        <member name="T:FlaxEditor.GUI.ItemsListContextMenu.Item">
            <summary>
            The single list item control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.ItemsListContextMenu.Item._isMouseDown">
            <summary>
            The is mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ItemsListContextMenu.Item._highlights">
            <summary>
            The search query highlights.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ItemsListContextMenu.Item.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.ItemsListContextMenu.Item.Clicked">
            <summary>
            Occurs when items gets clicked by the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ItemsListContextMenu.Item"/> class.
            </summary>
            <param name="name">The item name.</param>
            <param name="tag">The item tag object.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.UpdateFilter(System.String)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.GetTextRect(FlaxEngine.Rectangle@)">
            <summary>
            Gets the text rectangle.
            </summary>
            <param name="rect">The output rectangle.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Item.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="E:FlaxEditor.GUI.ItemsListContextMenu.ItemClicked">
            <summary>
            Event fired when any item in this popup menu gets clicked.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ItemsListContextMenu.ItemsPanel">
            <summary>
            The panel control where you should add your items.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ItemsListContextMenu"/> class.
            </summary>
            <param name="width">The control width.</param>
            <param name="height">The control height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.AddItem(FlaxEditor.GUI.ItemsListContextMenu.Item)">
            <summary>
            Adds the item to the view and registers for the click event.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.OnClickItem(FlaxEditor.GUI.ItemsListContextMenu.Item)">
            <summary>
            Called when user clicks on an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ItemsListContextMenu.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.StatusBar">
            <summary>
            Status strip GUI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.StatusBar.DefaultHeight">
            <summary>
            The default height.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.StatusBar.StatusColor">
            <summary>
            Gets or sets the color of the status strip.
            </summary>
            <value>
            The color of the status strip.
            </value>
        </member>
        <member name="P:FlaxEditor.GUI.StatusBar.Text">
            <summary>
            Gets or sets the status text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:FlaxEditor.GUI.StatusBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.StatusBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.StatusBar.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Table">
            <summary>
            Table control with columns and rows.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.GUI.Table.HeaderHeight">
            <summary>
            Gets or sets the height of the table column headers.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Table.Columns">
            <summary>
            Gets or sets the columns description.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Table.Splits">
            <summary>
            The column split values. Specified per column as normalized value to range [0;1]. Actual column width is calculated by multiplication of split value and table width.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Table.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Table"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Table.GetColumnWidth(System.Int32)">
            <summary>
            Gets the actual column width (in pixels).
            </summary>
            <param name="columnIndex">Zero-based index of the column.</param>
            <returns>The column width in pixels.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Table.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.DrawColumn(FlaxEngine.Rectangle@,System.Int32)">
            <summary>
            Draws the column.
            </summary>
            <param name="rect">The the header area rectangle.</param>
            <param name="columnIndex">The zero-based index of the column.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Table.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tab">
            <summary>
            Single tab control used by <see cref="T:FlaxEditor.GUI.Tabs"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Tab.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tab.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Tab.Selected">
            <summary>
            Occurs when tab gets selected.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tab.#ctor(FlaxEngine.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tab"/> class.
            </summary>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tab.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tab"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tab.#ctor(System.String,FlaxEngine.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tab"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tab.OnSelected">
            <summary>
            Called when tab gets selected.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Tabs">
            <summary>
            Represents control which contains collection of <see cref="T:FlaxEditor.GUI.Tab"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.GUI.Tabs.TabHeader">
            <summary>
            Tab header control. Draw the tab title and handles selecting it.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.TabHeader.Tabs">
            <summary>
            The tabs control.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.TabHeader.Index">
            <summary>
            The index of the tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.TabHeader.Tab">
            <summary>
            The tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.TabHeader.#ctor(FlaxEditor.GUI.Tabs,System.Int32,FlaxEditor.GUI.Tab)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.TabHeader"/> class.
            </summary>
            <param name="tabs">The tabs.</param>
            <param name="index">The tab index.</param>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.TabHeader.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.TabHeader.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tabs.TabsHeader">
            <summary>
            The tabs headers container control. Arranges the tabs headers and support scrolling them.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.TabsHeader.Tabs">
            <summary>
            The tabs control.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.TabsHeader.#ctor(FlaxEditor.GUI.Tabs)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs.TabsHeader"/> class.
            </summary>
            <param name="tabs">The tabs.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.TabsHeader.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.GUI.Tabs._selectedIndex">
            <summary>
            The selected tab index.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs._tabsSize">
            <summary>
            The tabs size.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs._orientation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.TabsSize">
            <summary>
            Gets the size of the tabs.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.TabStripColor">
            <summary>
            Gets or sets the color of the tab strip background.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Tabs.SelectedTabChanged">
            <summary>
            Occurs when selected tab gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tabs.TabsPanel">
            <summary>
            The tabs panel control.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.SelectedTab">
            <summary>
            Gets or sets the selected tab.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.SelectedTabIndex">
            <summary>
            Gets or sets the selected tab index.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tabs.UseScroll">
            <summary>
            Gets or sets a value indicating whether use scroll bars for the tabs.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tabs"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.AddTab``1(``0)">
            <summary>
            Adds the tab.
            </summary>
            <typeparam name="T">Tab control type.</typeparam>
            <param name="tab">The tab.</param>
            <returns>The tab.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.OnSelectedTabChanged">
            <summary>
            Called when selected tab gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tabs.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ToolStrip">
            <summary>
            Tool strip with child items.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.DefaultMarginV">
            <summary>
            The default margin vertically.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.DefaultMarginH">
            <summary>
            The default margin horizontally.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.DefaultHeight">
            <summary>
            The default height.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStrip.ButtonClicked">
            <summary>
            Event fired when button gets clicked.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStrip.LastButton">
            <summary>
            Tries to get the last button.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStrip.ButtonsCount">
            <summary>
            Gets amount of buttons that has been added
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStrip.ItemsHeight">
            <summary>
            Gets the height for the items.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ToolStrip"/> class.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddButton(FlaxEngine.Sprite,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="sprite">The icon sprite.</param>
            <param name="onClick">The custom action to call on button clicked.</param>
            <returns>The button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddButton(FlaxEngine.Sprite,System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="sprite">The icon sprite.</param>
            <param name="text">The text.</param>
            <param name="onClick">The custom action to call on button clicked.</param>
            <returns>The button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddButton(System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="onClick">The custom action to call on button clicked.</param>
            <returns>The button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.AddSeparator">
            <summary>
            Adds the separator.
            </summary>
            <returns>The separator.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStrip.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ToolStripButton">
            <summary>
            Tool strip button control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.DefaultMargin">
            <summary>
            The default margin for button parts (icon, text, etc.).
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.Clicked">
            <summary>
            Event fired when user clicks the button.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.ToolStripButton.AutoCheck">
            <summary>
            The automatic check mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStripButton.Text">
            <summary>
            Gets or sets the button text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.ToolStripButton.Icon">
            <summary>
            The icon.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.#ctor(System.Single,FlaxEngine.Sprite@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ToolStripButton"/> class.
            </summary>
            <param name="height">The height.</param>
            <param name="icon">The icon.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.SetAutoCheck(System.Boolean)">
            <summary>
            Sets the automatic check mode.
            </summary>
            <param name="value">True if use auto check, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.SetChecked(System.Boolean)">
            <summary>
            Sets the checked state.
            </summary>
            <param name="value">True if check it, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripButton.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.ToolStripSeparator">
            <summary>
            Toolstrip separator control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripSeparator.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.ToolStripSeparator"/> class.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.GUI.ToolStripSeparator.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.Tree">
            <summary>
            Tree control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.Tree.KeyUpdateTimeout">
            <summary>
            The key updates timeout in seconds.
            </summary>
        </member>
        <member name="T:FlaxEditor.GUI.Tree.SelectionChangedDelegate">
            <summary>
            Delegate for selected tree nodes collection change.
            </summary>
            <param name="before">The before state.</param>
            <param name="after">The after state.</param>
        </member>
        <member name="T:FlaxEditor.GUI.Tree.NodeClickDelegate">
            <summary>
            Delegate for node click events.
            </summary>
            <param name="node">The node.</param>
            <param name="location">The location.</param>
        </member>
        <member name="E:FlaxEditor.GUI.Tree.SelectedChanged">
            <summary>
            Action fired when tree nodes selection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.GUI.Tree.RightClick">
            <summary>
            Action fired when mouse goes right click up on node.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.Tree.Selection">
            <summary>
            List with all selected nodes
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.SelectedNode">
            <summary>
            Gets the first selected node or null.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.Margin">
            <summary>
            Gets or sets the margin for the child tree nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.Tree.AutoSize">
            <summary>
            Gets or sets the value indicating whenever the tree will auto-size to the tree nodes dimensions.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.Tree"/> class.
            </summary>
            <param name="supportMultiSelect">True if support multi selection for tree nodes, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Select(FlaxEditor.GUI.TreeNode)">
            <summary>
            Selects single tree node.
            </summary>
            <param name="node">Node to select.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Select(System.Collections.Generic.List{FlaxEditor.GUI.TreeNode})">
            <summary>
            Selects tree nodes.
            </summary>
            <param name="nodes">Nodes to select.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Deselect">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.AddOrRemoveSelection(FlaxEditor.GUI.TreeNode)">
            <summary>
            Adds or removes node to/from the selection
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.SelectRange(FlaxEditor.GUI.TreeNode)">
            <summary>
            Selects tree nodes range (used to select part of the tree using Shift+Mouse).
            </summary>
            <param name="endNode">End range node</param>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.SelectAllExpanded">
            <summary>
            Select all expanded nodes
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.UpdateSize">
            <summary>
            Updates the tree size.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.Tree.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.OnParentResized(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.Tree.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.GUI.TreeNode">
            <summary>
            Tree node control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.GUI.TreeNode.DefaultDragInsertPositionMargin">
            <summary>
            The default drag insert position margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.GUI.TreeNode.DefaultNodeOffsetY">
            <summary>
            The default node offset on Y axis.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this node is expanded.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this node is collapsed.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.TextMargin">
            <summary>
            Gets or sets the text margin.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.TextFont">
            <summary>
            Gets or sets the font used to render text.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.BackgroundColorSelected">
            <summary>
            Gets or sets the color of the background when tree node is selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.BackgroundColorHighlighted">
            <summary>
            Gets or sets the color of the background when tree node is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.BackgroundColorSelectedUnfocused">
            <summary>
            Gets or sets the color of the background when tree node is selected but not focused.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.ParentTree">
            <summary>
            Gets the parent tree control.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.IsRoot">
            <summary>
            Gets a value indicating whether this node is root.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.MinimumWidth">
            <summary>
            Gets the minimum width of the node sub-tree.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.ChildrenIndent">
            <summary>
            The indent applied to the child nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.HeaderHeight">
            <summary>
            The height of the tree node header area.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.ArrowRect">
            <summary>
            Gets the arrow rectangle.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.HeaderRect">
            <summary>
            Gets the header rectangle.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.TextRect">
            <summary>
            Gets the header text rectangle.
            </summary>
        </member>
        <member name="P:FlaxEditor.GUI.TreeNode.DragOverMode">
            <summary>
            Gets the drag over action type.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.TreeNode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.TreeNode"/> class.
            </summary>
            <param name="canChangeOrder">Enable/disable changing node order in parent tree node.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.#ctor(System.Boolean,FlaxEngine.Sprite,FlaxEngine.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.GUI.TreeNode"/> class.
            </summary>
            <param name="canChangeOrder">Enable/disable changing node order in parent tree node.</param>
            <param name="iconCollapsed">The icon for node collapsed.</param>
            <param name="iconOpened">The icon for node opened.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.Expand(System.Boolean)">
            <summary>
            Expand node.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.Collapse(System.Boolean)">
            <summary>
            Collapse node.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.ExpandAll(System.Boolean)">
            <summary>
            Expand node and all the children.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.CollapseAll(System.Boolean)">
            <summary>
            Collapse node and all the children.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.ExpandAllParents(System.Boolean)">
            <summary>
            Ensure that all node parents are expanded.
            </summary>
            <param name="noAnimation">True if skip node expanding animation.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.EndAnimation">
            <summary>
            Ends open/close animation by force.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.Select">
            <summary>
            Select node in the tree.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop enters the node header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop moves over the node header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <summary>
            Called when drag and drop performs over the node header area.
            </summary>
            <param name="data">The data.</param>
            <returns>Drag action response.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragLeaveHeader">
            <summary>
            Called when drag and drop leaves the node header area.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.DoDragDrop">
            <summary>
            Begins the drag drop operation.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnMouseDoubleClickHeader(FlaxEngine.Vector2@,FlaxEngine.MouseButton)">
            <summary>
            Called when mouse double clicks header.
            </summary>
            <param name="location">The mouse location.</param>
            <param name="button">The button.</param>
            <returns>True if event has been handled.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnLongPress">
            <summary>
            Called when mouse is pressing node header for a long time.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnExpandedChanged">
            <summary>
            Called when expanded/collapsed state changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.TestHeaderHit(FlaxEngine.Vector2@)">
            <summary>
            Tests the header hit.
            </summary>
            <param name="location">The location.</param>
            <returns>True if hits it.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.UpdateDrawPositioning(FlaxEngine.Vector2@)">
            <summary>
            Updates the drag over mode based on the given mouse location.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.CacheTextColor">
            <summary>
            Caches the color of the text for this node. Called during update before children nodes but after parent node so it can reuse parent tree node data.
            </summary>
            <returns>Text color.</returns>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.UpdateTextWidth">
            <summary>
            Updates the cached width of the text.
            </summary>
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnParentResized(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnParentChangedInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.GUI.TreeNode.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.CustomEditorWindow">
            <summary>
            Base class for custom editor window that can create custom GUI layout and expose various functionalities to the user.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Win.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Win.OnClose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.CustomEditorWindow.Window">
            <summary>
            Gets the editor window.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.CustomEditorWindow"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:FlaxEditor.CustomEditorWindow"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.CustomEditorWindow.Show(FlaxEditor.GUI.Docking.DockState)">
            <summary>
            Shows the window.
            </summary>
            <param name="state">Initial window state.</param>
        </member>
        <member name="T:FlaxEditor.EditorAssets">
            <summary>
            Helper collection of Flax Editor in-build asset names.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.IconsAtlas">
            <summary>
            The icons atlas.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.PrimaryFont">
            <summary>
            The primary font.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.DefaultFontMaterial">
            <summary>
            The default font material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.HighlightMaterial">
            <summary>
            The highlight material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.HighlightTerrainMaterial">
            <summary>
            The highlight terrain material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.TerrainCircleBrushMaterial">
            <summary>
            The terrain circle brush material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.WiresDebugMaterial">
            <summary>
            The debug material (wireframe).
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.DefaultSkyCubeTexture">
            <summary>
            The default sky cube texture.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.IesProfilePreviewMaterial">
            <summary>
            The IES Profile assets preview material.
            </summary>
        </member>
        <member name="F:FlaxEditor.EditorAssets.FoliageBrushMaterial">
            <summary>
            The foliage painting brush material.
            </summary>
        </member>
        <member name="T:FlaxEditor.EditorIcons">
            <summary>
            The editor icons atlas. Cached internally to improve performance.
            </summary>
            <remarks>
            Postfix number informs about the sprite resolution (in pixels).
            </remarks>
        </member>
        <member name="T:FlaxEditor.History.HistoryStack">
            <summary>
            Controller for handling stack manipulations in history and reverse buffers.
            </summary>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.History.HistoryStack"/> class.
            </summary>
            <param name="historyActionsLimit">The history actions limit.</param>
        </member>
        <member name="P:FlaxEditor.History.HistoryStack.HistoryActionsLimit">
            <summary>
            Gets the history actions limit.
            </summary>
            <value>
            The history actions limit.
            </value>
        </member>
        <member name="P:FlaxEditor.History.HistoryStack.HistoryCount">
            <summary>
            Gets the history count.
            </summary>
            <value>
            The history count.
            </value>
        </member>
        <member name="P:FlaxEditor.History.HistoryStack.ReverseCount">
            <summary>
            Gets the reverse count.
            </summary>
            <value>
            The reverse count.
            </value>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.Push(FlaxEditor.History.IHistoryAction)">
            <summary>
            Adds new history element at top of history stack, and drops reverse stack
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PeekHistory">
            <summary>
            Gets top-most item in history stack
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PeekReverse">
            <summary>
            Gets top-most item in reverse stack
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PopHistory">
            <summary>
            Gets top-most item in history stack, and removes it from history stack. Adds forgot element in reverse stack.
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.PopReverse">
            <summary>
            Gets top-most item in reverse stack, and removes it from reverse stack. Adds forgot element in history stack.
            </summary>
            <returns>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.TravelBack(System.Int32)">
            <summary>
            Gets element at given index from top of history stack, and adds all skipped elements to reverse stack
            </summary>
            <remarks>If skipElements is bigger, then amount of elements in history, returns null, clears history and pushes all to reverse stack</remarks>
            <param name="skipElements">Amount of elements to skip from history stack</param>
            <returns>>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.TravelReverse(System.Int32)">
            <summary>
            Gets element at given index from top of reverse stack, and adds all skipped elements to history stack
            </summary>
            <remarks>If skipElements is bigger, then amount of elements in reverse, returns null, clears reverse and pushes all to history stack</remarks>
            <param name="skipElements">Amount of elements to skip from reverse stack</param>
            <returns>>Found element or null</returns>
        </member>
        <member name="M:FlaxEditor.History.HistoryStack.Clear">
            <summary>
            Clears whole history (back and front).
            </summary>
        </member>
        <member name="T:FlaxEditor.History.IHistoryAction">
            <summary>
            Interface for <see cref="T:FlaxEditor.History.HistoryStack"/> actions.
            </summary>
        </member>
        <member name="P:FlaxEditor.History.IHistoryAction.ActionString">
            <summary>
            Name or key of performed action
            </summary>
        </member>
        <member name="M:FlaxEditor.History.IHistoryAction.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject">
            <summary>
            Undo action object.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject.DataValue">
            <summary>
            The data value storage to solve issue for flax objects and editor scene tree nodes which are serialized by ref id.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.Generic">
            <summary>
            The generic value (anything).
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.FlaxObject">
            <summary>
            The flax object.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataValue.EditorNode">
            <summary>
            The editor node object.
            </summary>
        </member>
        <member name="P:FlaxEditor.History.UndoActionObject.DataValue.Value">
            <summary>
            Gets the proper value.
            </summary>
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.DataValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.History.UndoActionObject.DataValue"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject.DataStorage">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataStorage.Values1">
            <summary>
            The values 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataStorage.Values2">
            <summary>
            The values 2.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataStorage.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="T:FlaxEditor.History.UndoActionObject.DataPrepared">
            <summary>
            Prepared undo data container object.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataPrepared.Diff">
            <summary>
            The difference data.
            </summary>
        </member>
        <member name="F:FlaxEditor.History.UndoActionObject.DataPrepared.TargetInstance">
            <summary>
            The target object instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.#ctor(System.Collections.Generic.List{FlaxEditor.Utilities.MemberComparison},System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.History.UndoActionObject"/> class.
            </summary>
            <param name="diff">The difference.</param>
            <param name="actionString">The action string.</param>
            <param name="targetInstance">The target instance.</param>
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.PrepareData">
            <summary>
            Prepares the data for the undo.
            </summary>
            <returns>The prepared undo action data.</returns>
        </member>
        <member name="P:FlaxEditor.History.UndoActionObject.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.History.UndoActionObject.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.IEditable">
            <summary>
            Interface for all objects that can be modified (dirty state) and expose some functionalities and events.
            </summary>
        </member>
        <member name="E:FlaxEditor.IEditable.OnEdited">
            <summary>
            Occurs when object gets edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.IEditable.IsEdited">
            <summary>
            Gets a value indicating whether this object is edited (dirty state).
            </summary>
            <value>
              <c>true</c> if this object instance is edited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FlaxEditor.IEditable.MarkAsEdited">
            <summary>
            Marks object as edited (sets dirty flag).
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.ContentDatabaseModule">
            <summary>
            Manages assets database and searches for workspace directory changes.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.ProjectContent">
            <summary>
            The project content directory.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.ProjectSource">
            <summary>
            The project source code directory.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.EnginePrivate">
            <summary>
            The engine private content directory.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.EditorPrivate">
            <summary>
            The editor private content directory.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ContentDatabaseModule.Proxy">
            <summary>
            The list with all content items proxy objects.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentDatabaseModule.ItemAdded">
            <summary>
            Occurs when new items is added to the workspace content database.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentDatabaseModule.ItemRemoved">
            <summary>
            Occurs when new items is removed from the workspace content database.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentDatabaseModule.OnWorkspaceModified">
            <summary>
            Occurs when workspace has been modified.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.ItemsCreated">
            <summary>
            Gets the amount of created items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentDatabaseModule.ItemsDeleted">
            <summary>
            Gets the amount of deleted items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProxy(FlaxEditor.Content.ContentItem)">
            <summary>
            Gets the proxy object for the given content item.
            </summary>
            <param name="item">The item.</param>
            <returns>Content proxy for that item or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProxy``1">
            <summary>
            Gets the proxy object for the given asset type.
            </summary>
            <returns>Content proxy for that asset type or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetProxy(System.String)">
            <summary>
            Gets the proxy object for the given file extension. Warning! Different asset types may share the same file extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>Content proxy for that item or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.GetAssetProxy(System.String,System.String)">
            <summary>
            Gets the proxy object for the given asset type id.
            </summary>
            <param name="typeName">The asset type name.</param>
            <param name="path">The asset path.</param>
            <returns>Asset proxy or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.RefreshFolder(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Refreshes the given item folder. Tries to find new content items and remove not existing ones.
            </summary>
            <param name="item">Folder to refresh</param>
            <param name="checkSubDirs">True if search for changes inside a subdirectories, otherwise only top-most folder will be updated</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Find(System.String)">
            <summary>
            Tries to find item at the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Found item or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Find(System.Guid)">
            <summary>
            Tries to find item with the specified ID.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Found item or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindAsset(System.Guid)">
            <summary>
            Tries to find asset with the specified ID.
            </summary>
            <param name="id">The asset ID.</param>
            <returns>Found asset item or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScript(System.String)">
            <summary>
            Tries to find script item at the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScript(System.Guid)">
            <summary>
            Tries to find script item with the specified ID.
            </summary>
            <param name="id">The item ID.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScriptWitScriptName(System.String)">
            <summary>
            Tries to find script item with the specified name.
            </summary>
            <param name="scriptName">The name of the script.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.FindScriptWitScriptName(FlaxEngine.Script)">
            <summary>
            Tries to find script item that is used by the specified script object.
            </summary>
            <param name="script">The instance of the script.</param>
            <returns>Found script or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Move(System.Collections.Generic.List{FlaxEditor.Content.ContentItem},FlaxEditor.Content.ContentFolder)">
            <summary>
            Moves the specified items to the different location. Handles moving whole directories and single assets.
            </summary>
            <param name="items">The items.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Move(FlaxEditor.Content.ContentItem,FlaxEditor.Content.ContentFolder)">
            <summary>
            Moves the specified item to the different location. Handles moving whole directories and single assets.
            </summary>
            <param name="item">The item.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Move(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Moves the specified item to the different location. Handles moving whole directories and single assets.
            </summary>
            <param name="item">The item.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Copy(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Copies the specified item to the target location. Handles copying whole directories and single assets.
            </summary>
            <param name="item">The item.</param>
            <param name="targetPath">The target item path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.Delete(FlaxEditor.Content.ContentItem)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentDatabaseModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.ContentEditingModule">
            <summary>
            Opening/editing asset windows module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.Open(FlaxEditor.Content.ContentItem,System.Boolean)">
            <summary>
            Opens the specified item in dedicated editor window.
            </summary>
            <param name="item">The content item.</param>
            <param name="disableAutoShow">True if disable automatic window showing. Used during workspace layout loading to deserialize it faster.</param>
            <returns>Opened window or null if cannot open item.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.IsValidAssetName(FlaxEditor.Content.ContentItem,System.String,System.String@)">
            <summary>
            Determines whether specified new short name is valid name for the given content item.
            </summary>
            <param name="item">The item.</param>
            <param name="shortName">The new short name.</param>
            <param name="hint">The hint text if name is invalid.</param>
            <returns>
              <c>true</c> if name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.FastTempAssetClone(FlaxEditor.Content.AssetItem,System.String@)">
            <summary>
            Clones the asset to the temporary folder.
            </summary>
            <param name="item">The item to clone.</param>
            <param name="resultPath">The result path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ContentEditingModule.CloneAssetFile(System.String,System.String,System.Guid)">
            <summary>
            Duplicates the asset file and changes it's ID.
            </summary>
            <param name="dstPath">The destination file path.</param>
            <param name="srcPath">The source file path.</param>
            <param name="dstId">The destination asset identifier.</param>
            <returns>True if cannot perform that operation, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Modules.ContentImportingModule">
            <summary>
            Imports assets and other resources to the project. Provides per asset import settings editing.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.IsImporting">
            <summary>
            Gets a value indicating whether this instance is importing assets.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.ImportingProgress">
            <summary>
            Gets the importing assets progress.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.ImportBatchDone">
            <summary>
            Gets the amount of files done in the current import batch.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ContentImportingModule.ImportBatchSize">
            <summary>
            Gets the size of the current import batch (imported files + files to import left).
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportingQueueBegin">
            <summary>
            Occurs when assets importing starts.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportFileBegin">
            <summary>
            Occurs when file is being imported.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.ContentImportingModule.ImportFileEndDelegate">
            <summary>
            Import file end delegate.
            </summary>
            <param name="entry">The imported file entry.</param>
            <param name="failed">if set to <c>true</c> if importing failed, otherwise false.</param>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportFileEnd">
            <summary>
            Occurs when file importing end.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.ContentImportingModule.ImportingQueueEnd">
            <summary>
            Occurs when assets importing ends.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.#ctor(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Create(FlaxEditor.Content.Create.CreateFileEntry)">
            <summary>
            Creates the specified file entry (can show create settings dialog if needed).
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.ShowImportFileDialog(FlaxEditor.Content.ContentFolder)">
            <summary>
            Shows the dialog for selecting files to import.
            </summary>
            <param name="targetLocation">The target location.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Reimport(FlaxEditor.Content.BinaryAssetItem,System.Object,System.Boolean)">
            <summary>
            Reimports the specified <see cref="T:FlaxEditor.Content.BinaryAssetItem"/> item.
            </summary>
            <param name="item">The item.</param>
            <param name="settings">The import settings to override.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be sued when importing files from code.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Import(System.Collections.Generic.IEnumerable{System.String},FlaxEditor.Content.ContentFolder,System.Boolean)">
            <summary>
            Imports the specified files.
            </summary>
            <param name="files">The files.</param>
            <param name="targetLocation">The target location.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be sued when importing files from code.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Import(System.String,FlaxEditor.Content.ContentFolder,System.Boolean,System.Object)">
            <summary>
            Imports the specified file.
            </summary>
            <param name="file">The file.</param>
            <param name="targetLocation">The target location.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be sued when importing files from code.</param>
            <param name="settings">Import settings to override. Use null to skip this value.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.Import(System.String,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Imports the specified file to the target destination.
            Actual importing is done later after gathering settings from the user via <see cref="T:FlaxEditor.Content.Import.ImportFilesDialog"/>.
            </summary>
            <param name="inputPath">The input path.</param>
            <param name="outputPath">The output path.</param>
            <param name="isBinaryAsset">True if output file is a binary asset.</param>
            <param name="skipSettingsDialog">True if skip any popup dialogs showing for import options adjusting. Can be sued when importing files from code.</param>
            <param name="settings">Import settings to override. Use null to skip this value.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ContentImportingModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.EditorModule">
            <summary>
            Base class for all Editor modules.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.EditorModule.InitOrder">
            <summary>
            Gets the initialization order. Lower first ordering.
            </summary>
            <value>
            The initialization order.
            </value>
        </member>
        <member name="F:FlaxEditor.Modules.EditorModule.Editor">
            <summary>
            Gets the editor object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.EditorModule.Undo">
            <summary>
            Gets the editor undo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.EditorModule"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnInit">
            <summary>
            Called when Editor is startup up. Performs module initialization.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnEndInit">
            <summary>
            Called when Editor is ready and will start work.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnUpdate">
            <summary>
            Called when every Editor update tick.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnExit">
            <summary>
            Called when Editor is closing. Performs module cleanup.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnPlayBegin">
            <summary>
            Called when Editor is entering play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.EditorModule.OnPlayEnd">
            <summary>
            Called when Editor leaves the play mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.PrefabsModule">
            <summary>
            Prefabs management module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabCreating">
            <summary>
            Occurs before prefab asset creating. Argument is a target actor.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabCreated">
            <summary>
            Occurs after prefab asset creating. Arguments is created prefab asset item.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabApplying">
            <summary>
            Occurs before applying changes to the prefab. Arguments are prefab and the target instance.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.PrefabsModule.PrefabApplied">
            <summary>
            Occurs after applying changes to the prefab. Arguments are prefab and the target instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.CreatePrefab">
            <summary>
            Starts the creating prefab for the selected actor by showing the new item creation dialog in <see cref="T:FlaxEditor.Windows.ContentWindow"/>.
            </summary>
            <remarks>
            To create prefab manually use <see cref="M:FlaxEditor.Editor.CreatePrefab(System.String,FlaxEngine.Actor,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.CreatePrefab(FlaxEngine.Actor)">
            <summary>
            Starts the creating prefab for the given actor by showing the new item creation dialog in <see cref="T:FlaxEditor.Windows.ContentWindow"/>. User can specify the new asset name.
            </summary>
            <remarks>
            To create prefab manually use <see cref="M:FlaxEditor.Editor.CreatePrefab(System.String,FlaxEngine.Actor,System.Boolean)"/> method.
            </remarks>
            <param name="actor">The root prefab actor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.BreakLinks">
            <summary>
            Breaks any prefab links for the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.SelectPrefab">
            <summary>
            Selects in Content Window the prefab asset used by the selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.PrefabsModule.ApplyAll(FlaxEngine.Actor)">
            <summary>
            Applies the difference from the prefab object instance, saves the changes and synchronizes them with the active instances of the prefab asset.
            </summary>
            <remarks>
            Applies all the changes from not only the given actor instance but all actors created within that prefab instance.
            </remarks>
            <param name="instance">The modified instance.</param>
        </member>
        <member name="T:FlaxEditor.Modules.ProgressReportingModule">
            <summary>
            Helper module for engine long-operations progress reporting in the editor (eg. files importing, static light baking, etc.).
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.BuildingGame">
            <summary>
            The game building progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.ImportAssets">
            <summary>
            The assets importing progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.CompileScripts">
            <summary>
            The scripts compilation progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.BakeLightmaps">
            <summary>
            The lightmaps baking progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.BakeEnvProbes">
            <summary>
            The environment probes baking progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.CodeEditorOpen">
            <summary>
            The code editor async open progress handler.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.ProgressReportingModule.NavMeshBuilding">
            <summary>
            The navigation mesh building progress handler.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ProgressReportingModule.FirstActiveHandler">
            <summary>
            Gets the first active handler.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.ProgressReportingModule.IsAnyActive">
            <summary>
            Gets a value indicating whether any progress handler is active.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ProgressReportingModule.RegisterHandler(FlaxEditor.Progress.ProgressHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ProgressReportingModule.UnregisterHandler(FlaxEditor.Progress.ProgressHandler)">
            <summary>
            Unregisters the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:FlaxEditor.Modules.ProjectCacheModule">
            <summary>
            Caching local project data manager. Used to store and manage the information about expanded actor nodes in the scene tree and other local user data used by the editor. Stores data in the project cache directory.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.ProjectCacheModule.AutoSaveInterval">
            <summary>
            Gets or sets the automatic data save interval.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.#ctor(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.IsExpandedActor(System.Guid@)">
            <summary>
            Determines whether actor identified by the given ID is expanded in the scene tree UI.
            </summary>
            <param name="id">The actor identifier.</param>
            <returns><c>true</c> if actor is expanded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.SetExpandedActor(System.Guid@,System.Boolean)">
            <summary>
            Sets the actor expanded cached value.
            </summary>
            <param name="id">The identifier.</param>
            <param name="isExpanded">if set to <c>true</c> actor will be cached as an expanded, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.HasCustomData(System.String)">
            <summary>
            Determines whether project cache contains custom data of the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if has custom data of the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.GetCustomData(System.String)">
            <summary>
            Gets the custom data by the key.
            </summary>
            <remarks>
            Use <see cref="M:FlaxEditor.Modules.ProjectCacheModule.HasCustomData(System.String)"/> to check if a key is valid.
            </remarks>
            <param name="key">The key.</param>
            <returns>The custom data.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.SetCustomData(System.String,System.String)">
            <summary>
            Sets the custom data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.ProjectCacheModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SceneEditingModule">
            <summary>
            Editing scenes module. Manages scene objects selection and editing modes.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Modules.SceneEditingModule.Selection">
            <summary>
            The selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SceneEditingModule.SelectionCount">
            <summary>
            Gets the amount of the selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SceneEditingModule.HasSthSelected">
            <summary>
            Gets a value indicating whether any object is selected.
            </summary>
            <value>
              <c>true</c> if any object is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SelectionChanged">
            <summary>
            Occurs when selected objects collection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SpawnBegin">
            <summary>
            Occurs before spawning actor to game action.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SpawnEnd">
            <summary>
            Occurs after spawning actor to game action.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SelectionDeleteBegin">
            <summary>
            Occurs before selection delete action.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneEditingModule.SelectionDeleteEnd">
            <summary>
            Occurs after selection delete action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.SelectAllScenes">
            <summary>
            Selects all scenes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(FlaxEngine.Actor)">
            <summary>
            Selects the specified actor (finds it's scene graph node).
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},System.Boolean)">
            <summary>
            Selects the specified collection of objects.
            </summary>
            <param name="selection">The selection.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(FlaxEditor.SceneGraph.SceneGraphNode[],System.Boolean)">
            <summary>
            Selects the specified collection of objects.
            </summary>
            <param name="selection">The selection.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Select(FlaxEditor.SceneGraph.SceneGraphNode,System.Boolean)">
            <summary>
            Selects the specified object.
            </summary>
            <param name="selection">The selection.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Deselect(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Deselects given object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Deselect">
            <summary>
            Clears selected objects collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor to the game (with undo).
            </summary>
            <param name="actor">The actor.</param>
            <param name="parent">The parent actor. Set null as default.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Delete">
            <summary>
            Deletes the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Copy">
            <summary>
            Copies the selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Paste">
            <summary>
            Pastes the copied objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Paste(FlaxEngine.Actor)">
            <summary>
            Pastes the copied objects. Supports undo/redo.
            </summary>
            <param name="pasteTargetActor">The target actor to paste copied data.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Cut">
            <summary>
            Cuts the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.Duplicate">
            <summary>
            Duplicates the selected objects. Supports undo/redo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.OnSelectionChanged">
            <summary>
            Called when selection gets changed. Invokes the other events and updates editor. Call it when you manually modify selected objects collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneEditingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SceneModule">
            <summary>
            Scenes and actors management module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="T:FlaxEditor.Modules.SceneModule.ScenesRootNode">
            <summary>
            The root node for the scene graph created for the loaded scenes and actors hierarchy.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.RootNode" />
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.ScenesRootNode.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Modules.SceneModule.ScenesRootNode.Undo">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Modules.SceneModule.Root">
            <summary>
            The root tree node for the whole scene graph.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SceneModule.ActorRemoved">
            <summary>
            Occurs when actor gets removed. Editor and all submodules should remove references to that actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkSceneEdited(FlaxEngine.Scene)">
            <summary>
            Marks the scene as modified.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkSceneEdited(FlaxEditor.SceneGraph.Actors.SceneNode)">
            <summary>
            Marks the scene as modified.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkSceneEdited(System.Collections.Generic.IEnumerable{FlaxEngine.Scene})">
            <summary>
            Marks the scenes as modified.
            </summary>
            <param name="scenes">The scenes.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.MarkAllScenesEdited">
            <summary>
            Marks all the scenes as modified.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.IsEdited(FlaxEngine.Scene)">
            <summary>
            Determines whether the specified scene is edited.
            </summary>
            <param name="scene">The scene.</param>
            <returns>
              <c>true</c> if the specified scene is edited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.IsEdited">
            <summary>
            Determines whether any scene is edited.
            </summary>
            <returns>
              <c>true</c> if any scene is edited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.IsEverySceneEdited">
            <summary>
            Determines whether every scene is edited.
            </summary>
            <returns>
              <c>true</c> if every scene is edited; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CreateSceneFile(System.String)">
            <summary>
            Creates the new scene file. The default scene contains set of simple actors.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SaveScene(FlaxEngine.Scene)">
            <summary>
            Saves scene (async).
            </summary>
            <param name="scene">Scene to save.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SaveScene(FlaxEditor.SceneGraph.Actors.SceneNode)">
            <summary>
            Saves scene (async).
            </summary>
            <param name="scene">Scene to save.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SaveScenes">
            <summary>
            Saves all open scenes (async).
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OpenScene(System.Guid,System.Boolean)">
            <summary>
            Opens scene (async).
            </summary>
            <param name="sceneId">Scene ID</param>
            <param name="additive">True if don't close opened scenes and just add new scene to them, otherwise will release current scenes and load single one.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CloseScene(FlaxEngine.Scene)">
            <summary>
            Closes scene (async).
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CloseAllScenes">
            <summary>
            Closes all opened scene (async).
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CheckSaveBeforeClose(FlaxEditor.SceneGraph.Actors.SceneNode)">
            <summary>
            Show save before scene load/unload action.
            </summary>
            <param name="scene">The scene that will be closed.</param>
            <returns>True if action has been canceled, otherwise false</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.CheckSaveBeforeClose">
            <summary>
            Show save before scene load/unload action.
            </summary>
            <returns>True if action has been canceled, otherwise false</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.SuspendAutoSave">
            <summary>
            Suspends auto saving for a while.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.ClearRefsToSceneObjects(System.Boolean)">
            <summary>
            Clears references to the scene objects by the editor. Deselects objects.
            </summary>
            <param name="fullCleanup">True if cleanup all data (including serialized and cached data). Otherwise will just clear living references to the scene objects.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.saveOpeneScenes">
            <summary>
            Saves the opened scenes collection to editor cache.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.GetActorNode(FlaxEngine.Actor)">
            <summary>
            Gets the actor node.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Found actor node or null if missing. Actor may not be linked to the scene tree so node won't be found in that case.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.GetActorNode(System.Guid)">
            <summary>
            Gets the actor node.
            </summary>
            <param name="actorId">The actor id.</param>
            <returns>Found actor node or null if missing. Actor may not be linked to the scene tree so node won't be found in that case.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.ExecuteOnGraph(FlaxEditor.SceneGraph.SceneGraphTools.GraphExecuteCallbackDelegate)">
            <summary>
            Executes the custom action on the graph nodes.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SceneModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SimulationModule">
            <summary>
            Manages play in-editor feature (game simulation).
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.SimulationModule.ShouldPlayModeStartWithStep">
            <summary>
            Checks if play mode should start only with single frame update and then enter step mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SimulationModule.IsPlayModeRequested">
            <summary>
            Returns true if play mode has been requested.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestStartPlay">
            <summary>
            Requests start playing in editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestStopPlay">
            <summary>
            Requests stop playing in editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestPlayOrStopPlay">
            <summary>
            Requests the playing start or stop in editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestResumeOrPause">
            <summary>
            Requests the playing mode resume or pause if already running.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestPausePlay">
            <summary>
            Requests pause in playing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestResumePlay">
            <summary>
            Request resume in playing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.RequestPlayOneFrame">
            <summary>
            Requests playing single frame in advance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.OnPlayEnd">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SimulationModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection">
            <summary>
            Cached collection of custom nodes types including cached node archetypes for each one of them.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection" />
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.HasTypeFromGameScripts">
            <summary>
            Gets a value indicating whether this instance has any type from game scripts (or editor scripts) - those can be reloaded at runtime so prevent crashes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.#ctor(System.Int32,System.Type,System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.GetArchetypes">
            <summary>
            Gets the cached archetypes.
            </summary>
            <returns>The archetypes collection.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.Search">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedCustomAnimGraphNodesCollection.ClearTypes">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection">
            <summary>
            Cached types collection container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection._type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection._list">
            <summary>
            The list.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.#ctor(System.Int32,System.Type,System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection"/> class.
            </summary>
            <param name="capacity">The initial collection capacity.</param>
            <param name="type">The type of things to find. It can be attribute to find all classes with the given attribute defined.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
            <param name="checkAssembly">Additional callback used to check if the given assembly is valid. Returns true if search for types in the given assembly, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.Get">
            <summary>
            Gets all the types from the all loaded assemblies (including project scripts and scripts from the plugins).
            </summary>
            <returns>The types collection (readonly).</returns>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.Search">
            <summary>
            Searches for the types and fills with data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CachedTypesCollection.ClearTypes">
            <summary>
            Clears the types.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor">
            <summary>
            Default source code editor. Picks the best available editor on the current the platform.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor" />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor"/> class.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OpenSolution">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OpenFile(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnSelected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnDeselected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnAdded(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.DefaultSourceCodeEditor.OnRemoved(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor">
            <summary>
            In-build source code editor.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor" />
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.Type">
            <summary>
            The type of the editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.#ctor(FlaxEditor.Scripting.ScriptsBuilder.InBuildEditorTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.Name">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OpenSolution">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OpenFile(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnSelected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnDeselected(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnAdded(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.InBuildSourceCodeEditor.OnRemoved(FlaxEditor.Editor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule">
            <summary>
            Source code editing module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Editors">
            <summary>
            Gets the source code editors registered for usage in editor.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.EditorAdded">
            <summary>
            Occurs when source code editor gets added.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.EditorRemoved">
            <summary>
            Occurs when source code editor gets removed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.SelectedEditorChanged">
            <summary>
            Occurs when selected source code editor gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.SelectedEditor">
            <summary>
            Gets or sets the selected editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Scripts">
            <summary>
            The scripts collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.Controls">
            <summary>
            The control types collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.AnimGraphNodes">
            <summary>
            The Animation Graph custom nodes collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.AddEditor(FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor)">
            <summary>
            Adds the editor to the collection.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.RemoveEditor(FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor)">
            <summary>
            Removes the editor from the collection.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OpenSolution">
            <summary>
            Opens the solution file using the selected selected code editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OpenFile(System.String,System.Int32)">
            <summary>
            Opens the file using the selected code editor.
            </summary>
            <param name="path">The file path to open.</param>
            <param name="line">The line number to navigate to. Use 0 to not use it.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.CodeEditingModule.ClearTypes">
            <summary>
            Clears all the cached types.
            </summary>
        </member>
        <member name="T:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor">
            <summary>
            Interface for source code editing plugins.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.Name">
            <summary>
            Gets the editor name. Used to show in the UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OpenSolution">
            <summary>
            Opens the solution file (source code project file).
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OpenFile(System.String,System.Int32)">
            <summary>
            Opens the source file.
            </summary>
            <param name="path">The file path to open.</param>
            <param name="line">The line number to navigate to. Use 0 to not use it.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnSelected(FlaxEditor.Editor)">
            <summary>
            Called when editor gets selected.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnDeselected(FlaxEditor.Editor)">
            <summary>
            Called when editor gets deselected.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnAdded(FlaxEditor.Editor)">
            <summary>
            Called when editor gets added.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Modules.SourceCodeEditing.ISourceCodeEditor.OnRemoved(FlaxEditor.Editor)">
            <summary>
            Called when editor gets removed.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="T:FlaxEditor.Modules.UIModule">
            <summary>
            Manages Editor UI. Especially main window UI.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.MainMenu">
            <summary>
            The main menu control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.ToolStrip">
            <summary>
            The tool strip control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.MasterPanel">
            <summary>
            The master dock panel for all Editor windows.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.StatusBar">
            <summary>
            The status strip control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.UIModule.VisjectSurfaceBackground">
            <summary>
            The visject surface background texture. Cached to be used globally.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuFile">
            <summary>
            Gets the File menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuEdit">
            <summary>
            Gets the Edit menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuScene">
            <summary>
            Gets the Scene menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuGame">
            <summary>
            Gets the Game menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuTools">
            <summary>
            Gets the Tools menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuWindow">
            <summary>
            Gets the Window menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.MenuHelp">
            <summary>
            Gets the Help menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.UncheckPauseButton">
            <summary>
            Unchecks toolstrip pause button.
            </summary>
        </member>
        <member name="P:FlaxEditor.Modules.UIModule.IsPauseButtonChecked">
            <summary>
            Checks if toolstrip pause button is being checked.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.UpdateToolstrip">
            <summary>
            Updates the toolstrip.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.AddMenuButton(System.String,System.String,System.Action)">
            <summary>
            Adds the menu button.
            </summary>
            <param name="group">The group.</param>
            <param name="text">The text.</param>
            <param name="clicked">The button clicked event.</param>
            <returns>The created menu item.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.UpdateStatusBar">
            <summary>
            Updates the status bar.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.UIModule.OnExit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Modules.WindowsModule">
            <summary>
            Manages Editor windows and popups.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="P:FlaxEditor.Modules.WindowsModule.MainWindow">
            <summary>
            The main editor window.
            </summary>
        </member>
        <member name="E:FlaxEditor.Modules.WindowsModule.MainWindowClosing">
            <summary>
            Occurs when main editor window is being closed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.ContentWin">
            <summary>
            The content window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.EditWin">
            <summary>
            The edit game window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.GameWin">
            <summary>
            The game window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.PropertiesWin">
            <summary>
            The properties window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.SceneWin">
            <summary>
            The scene tree window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.DebugWin">
            <summary>
            The debug log window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.ToolboxWin">
            <summary>
            The toolbox window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.GraphicsQualityWin">
            <summary>
            The graphics quality window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.GameCookerWin">
            <summary>
            The game cooker window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.ProfilerWin">
            <summary>
            The profiler window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.EditorOptionsWin">
            <summary>
            The editor options window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.PluginsWin">
            <summary>
            The plugins manager window.
            </summary>
        </member>
        <member name="F:FlaxEditor.Modules.WindowsModule.Windows">
            <summary>
            List with all created editor windows.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.TakeScreenshot">
            <summary>
            Takes the screenshot of the current viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.UpdateWindowTitle">
            <summary>
            Updates the main window title.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.FlashMainWindow">
            <summary>
            Flash main editor window to catch user attention
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.FindEditor(FlaxEditor.Content.ContentItem)">
            <summary>
            Finds the first window that is using given element to view/edit it.
            </summary>
            <param name="item">The item.</param>
            <returns>Editor window or null if cannot find any window.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.CloseAllEditors(FlaxEditor.Content.ContentItem)">
            <summary>
            Closes all windows that are using given element to view/edit it.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.SaveCurrentLayout">
            <summary>
            Saves the current workspace layout.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.LoadDefaultLayout">
            <summary>
            Loads the default workspace layout for the current editor version.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.LoadLayout(System.String)">
            <summary>
            Loads the layout from the file.
            </summary>
            <param name="path">The layout file path.</param>
            <returns>True if layout has been loaded otherwise if failed (e.g. missing file).</returns>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.LayoutNameDialog.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.SaveLayout">
            <summary>
            Asks user for the layout name and saves the current windows layout in the current project cache folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.SaveLayout(System.String)">
            <summary>
            Saves the layout to the file.
            </summary>
            <param name="path">The layout file path.</param>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.GetWindow(System.String)">
            <summary>
            Gets <see cref="T:FlaxEditor.Windows.EditorWindow"/> that is represented by the given serialized typename. Used to restore workspace layout.
            </summary>
            <param name="typename">The typename.</param>
            <returns>The window or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnEndInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Modules.WindowsModule.OnPlayEnd">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.Editor`1">
            <summary>
            Editor options editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.Editor`1.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.EditorOptions">
            <summary>
            Editor options data container object.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.General">
            <summary>
            The general options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Interface">
            <summary>
            The interface options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.Visual">
            <summary>
            The visual options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Options.EditorOptions.SourceCode">
            <summary>
            The source code options.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.GeneralOptions">
            <summary>
            General editor options data container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.UndoActionsCapacity">
            <summary>
            Gets or sets a limit for the editor undo actions. Higher values may increase memory usage but also improve changes rollback history length.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoReloadScriptsOnMainWindowFocus">
            <summary>
            Gets or sets a value indicating whether perform automatic scripts reload on main window focus.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildCSG">
            <summary>
            Gets or sets a value indicating whether perform automatic CSG rebuild on brush change.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildCSGTimeoutMs">
            <summary>
            Gets or sets the auto CSG rebuilding timeout (in milliseconds). Use lower value for more frequent and responsive updates but higher complexity.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildNavMesh">
            <summary>
            Gets or sets a value indicating whether perform automatic NavMesh rebuild on scene change.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.AutoRebuildNavMeshTimeoutMs">
            <summary>
            Gets or sets the auto CSG rebuilding timeout (in milliseconds). Use lower value for more frequent and responsive updates but higher complexity.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.GeneralOptions.EnableEditorAnalytics">
            <summary>
            Gets or sets a value indicating whether enable editor analytics service.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.InterfaceOptions">
            <summary>
            Editor interface options data container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.ShowSelectedCameraPreview">
            <summary>
            Gets or sets a value indicating whether show selected camera preview in the editor window.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.CenterMouseOnGameWinFocus">
            <summary>
            Gets or sets a value indicating whether center mouse position on window focus in play mode. Helps when working with games that lock mouse cursor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.InterfaceOptions.FocusGameWinOnPlay">
            <summary>
            Gets or sets a value indicating whether auto-focus game window on play mode start.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.OptionsModule">
            <summary>
            Editor options management module.
            </summary>
            <seealso cref="T:FlaxEditor.Modules.EditorModule" />
        </member>
        <member name="F:FlaxEditor.Options.OptionsModule.Options">
            <summary>
            The current editor options. Don't modify the values directly (local session state lifetime), use <see cref="M:FlaxEditor.Options.OptionsModule.Apply(FlaxEditor.Options.EditorOptions)"/>.
            </summary>
        </member>
        <member name="E:FlaxEditor.Options.OptionsModule.OptionsChanged">
            <summary>
            Occurs when editor options get changed (reloaded or applied).
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.Load">
            <summary>
            Loads the settings from the file.
            </summary>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.Apply(FlaxEditor.Options.EditorOptions)">
            <summary>
            Applies the specified options and updates the dependant services.
            </summary>
            <param name="options">The new options.</param>
        </member>
        <member name="M:FlaxEditor.Options.OptionsModule.OnInit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Options.SourceCodeOptions">
            <summary>
            Source code options data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor">
            <summary>
            Editor for the editing of the editable SourceCodeEditor property.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditorEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Options.SourceCodeOptions.SourceCodeEditor">
            <summary>
            Gets or sets the source code editing IDE to use for project and source files accessing.
            </summary>
        </member>
        <member name="T:FlaxEditor.Options.VisualOptions">
            <summary>
            Visual editor options data container.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.ShowSelectionOutline">
            <summary>
            Gets or sets the selection outline enable flag.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.SelectionOutlineColor0">
            <summary>
            Gets or sets the first outline color.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.SelectionOutlineColor1">
            <summary>
            Gets or sets the second outline color.
            </summary>
        </member>
        <member name="P:FlaxEditor.Options.VisualOptions.EnableMSAAForDebugDraw">
            <summary>
            Gets or sets a value indicating whether enable MSAA for DebugDraw primitives rendering. Helps with pixel aliasing but reduces performance.
            </summary>
        </member>
        <member name="T:FlaxEditor.EditorPlugin">
            <summary>
            Base class for all plugins used in Editor.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
            <seealso cref="T:FlaxEngine.Plugin" />
        </member>
        <member name="P:FlaxEditor.EditorPlugin.GamePluginType">
            <summary>
            Gets the type of the <see cref="T:FlaxEngine.GamePlugin"/> that is related to this plugin. Some plugins may be used only in editor while others want to gave a runtime representation. Use this property to link the related game plugin.
            </summary>
        </member>
        <member name="P:FlaxEditor.EditorPlugin.Editor">
            <summary>
            Gets the editor instance. Use it to extend the editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.EditorPlugin.Initialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorPlugin.InitializeEditor">
            <summary>
            Initialization method called when this plugin is loaded and the Editor is after initialization. Use this method to add custom editor functionalities or override the existing ones.
            </summary>
        </member>
        <member name="T:FlaxEditor.PluginUtils">
            <summary>
            Helper utilities for the plugins management in Editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.PluginUtils.TryGetPluginIcon(FlaxEngine.Plugin)">
            <summary>
            Tries the get plugin icon (plugin may not have it).
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>The found texture asset to be used as a icon, or null if missing or invalid.</returns>
        </member>
        <member name="M:FlaxEditor.PluginUtils.GetPluginToExport(FlaxEngine.GamePlugin@,FlaxEditor.EditorPlugin@,System.String@)">
            <summary>
            Gets the plugin to export (editor or game or both). Searches the game scripts assemblies only. Performs validation.
            </summary>
            <param name="gamePlugin">The game plugin.</param>
            <param name="editorPlugin">The editor plugin.</param>
            <param name="errorMsg">If searching fails, then it contains a result message with error information. Can be used to inform user about the actual problem.</param>
            <returns>True if found plugin is valid, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.BakeEnvProbesProgress">
            <summary>
            Environment probes baking progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.BakeEnvProbesProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.BakeEnvProbesProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.BakeLightmapsProgress">
            <summary>
            Static lightmaps baking progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.BakeLightmapsProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.BakeLightmapsProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.BuildingGameProgress">
            <summary>
            Game building progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.BuildingGameProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.BuildingGameProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress">
            <summary>
            Async code editor opening progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CodeEditorOpenProgress.OnStart">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.CompileScriptsProgress">
            <summary>
            Scripts compilation progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CompileScriptsProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.CompileScriptsProgress"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.CompileScriptsProgress.OnStart">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.ImportAssetsProgress">
            <summary>
            Importing assets progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.ImportAssetsProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.ImportAssetsProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.Handlers.NavMeshBuildingProgress">
            <summary>
            Navigation mesh building progress reporting handler.
            </summary>
            <seealso cref="T:FlaxEditor.Progress.ProgressHandler" />
        </member>
        <member name="M:FlaxEditor.Progress.Handlers.NavMeshBuildingProgress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Progress.Handlers.NavMeshBuildingProgress"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.ProgressHandler">
            <summary>
            Base class for all editor handlers used to report actions progress to the user.
            </summary>
        </member>
        <member name="T:FlaxEditor.Progress.ProgressHandler.ProgressDelegate">
            <summary>
            Progress handler events delegate.
            </summary>
            <param name="handler">The calling handler.</param>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.IsActive">
            <summary>
            Gets a value indicating whether this handler is active.
            </summary>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.Progress">
            <summary>
            Gets the current progress (normalized to range [0;1]).
            </summary>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.InfoText">
            <summary>
            Gets the information text.
            </summary>
        </member>
        <member name="E:FlaxEditor.Progress.ProgressHandler.ProgressStart">
            <summary>
            Occurs when progress starts (becomes active).
            </summary>
        </member>
        <member name="E:FlaxEditor.Progress.ProgressHandler.ProgressChanged">
            <summary>
            Occurs when progress gets changed (or info text changes).
            </summary>
        </member>
        <member name="E:FlaxEditor.Progress.ProgressHandler.ProgressEnd">
            <summary>
            Occurs when progress end (becomes inactive).
            </summary>
        </member>
        <member name="P:FlaxEditor.Progress.ProgressHandler.CanBeCanceled">
            <summary>
            Gets a value indicating whether this handler action can be cancelled.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.Cancel">
            <summary>
            Cancels this progress action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.OnStart">
            <summary>
            Called when progress action starts.
            </summary>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.OnUpdate(System.Single,System.String)">
            <summary>
            Called when progress action gets updated (changed nfo text or progress value).
            </summary>
            <param name="progress">The progress (normalized to range [0;1]).</param>
            <param name="infoText">The information text.</param>
        </member>
        <member name="M:FlaxEditor.Progress.ProgressHandler.OnEnd">
            <summary>
            Called when progress action ends.
            </summary>
        </member>
        <member name="T:FlaxEditor.ProjectInfo">
            <summary>
            Project metadata loaded from the project root file.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.Name">
            <summary>
            The project name (used by the launcher).
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.DefaultSceneId">
            <summary>
            The default scene asset identifier to open on project startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.DefaultSceneSpawn">
            <summary>
            The default scene spawn point (position and view direction).
            </summary>
        </member>
        <member name="F:FlaxEditor.ProjectInfo.MinVersionSupported">
            <summary>
            The minimum version (engine build number) supported by this project. See <see cref="P:FlaxEngine.Globals.BuildNumber"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.ProjectInfo.Save">
            <summary>
            Saves the project info to the file.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorChildNode">
            <summary>
            Helper base class for actor sub nodes (eg. link points, child parts).
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.SceneGraphNode" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorChildNode.Index">
            <summary>
            The node index.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorChildNode.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorChildNode"/> class.
            </summary>
            <param name="id">The child id.</param>
            <param name="index">The child index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanTransform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.IsActive">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.IsActiveInHierarchy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.OrderInParent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanDelete">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorChildNode.UndoRecordObject">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorChildNode`1">
            <summary>
            Helper base class for actor sub nodes (eg. link points, child parts).
            </summary>
            <typeparam name="T">The parent actor type.</typeparam>
            <seealso cref="T:FlaxEditor.SceneGraph.SceneGraphNode" />
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorChildNode`1._actor">
            <summary>
            The actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorChildNode`1.#ctor(`0,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorChildNode`1"/> class.
            </summary>
            <param name="actor">The parent actor.</param>
            <param name="id">The child id.</param>
            <param name="index">The child index.</param>
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorNode">
            <summary>
            A tree node used to visualize scene actors structure in <see cref="T:FlaxEditor.Windows.SceneTreeWindow"/>. It's a ViewModel object for <see cref="P:FlaxEditor.SceneGraph.ActorNode.Actor"/>.
            It's part of the Scene Graph.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.SceneGraphNode" />
            <seealso cref="P:FlaxEditor.SceneGraph.ActorNode.Actor" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorNode._actor">
            <summary>
            The linked actor object.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorNode._treeNode">
            <summary>
            The tree node used to present hierarchy structure in GUI.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.Actor">
            <summary>
            Gets the actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.TreeNode">
            <summary>
            Gets the tree node (part of the GUI).
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.ActorNode.ActorChildNodes">
            <summary>
            The actor child nodes used to represent special parts of the actor (meshes, links, surfaces).
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.#ctor(FlaxEngine.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorNode"/> class.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.#ctor(FlaxEngine.Actor,FlaxEditor.SceneGraph.GUI.ActorTreeNode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.ActorNode"/> class.
            </summary>
            <param name="actor">The actor.</param>
            <param name="treeNode">The custom tree node.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.Find(FlaxEngine.Actor)">
            <summary>
            Tries to find the tree node for the specified actor.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Tree node or null if cannot find it.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.AddChildNode(FlaxEditor.SceneGraph.ActorChildNode)">
            <summary>
            Adds the child node.
            </summary>
            <param name="node">The node.</param>
            <returns>The node</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.DisposeChildNodes">
            <summary>
            Disposes the child nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.FindChildActor(FlaxEngine.Actor)">
            <summary>
            Tries to find the tree node for the specified actor in child nodes collection.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Tree node or null if cannot find it.</returns>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.CanCreatePrefab">
            <summary>
            Gets a value indicating whether this actor can be used to create prefab from it (as a root).
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.HasPrefabLink">
            <summary>
            Gets a value indicating whether this actor has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.CanTransform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.IsActive">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.IsActiveInHierarchy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.OrderInParent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.ActorNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.RayCast(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.Delete">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.PostSpawn">
            <summary>
            Action called after spawning actor in editor (via drag to viewport, with toolbox, etc.).
            Can be used to tweak default values of the actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.OnParentChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNode.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ActorNodeWithIcon">
            <summary>
            Helper class for actors with icon drawn in editor (eg. lights, probes, etc.).
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNodeWithIcon.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ActorNodeWithIcon.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AnimatedModelNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.AnimatedModel"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode">
            <summary>
            Single model material slot entry node.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode.Model">
            <summary>
            Gets the animated model actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode.#ctor(FlaxEditor.SceneGraph.Actors.AnimatedModelNode,System.Guid,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.EntryNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AnimatedModelNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AudioListenerNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.AudioListener"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AudioListenerNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.AudioSourceNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.AudioSource"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.AudioSourceNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoneSocketNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.BoneSocket"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoneSocketNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxBrushNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.BoxBrush"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode">
            <summary>
            Sub actor node used to edit volume.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.Brush">
            <summary>
            Gets the brush actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.Surface">
            <summary>
            Gets the brush surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.#ctor(FlaxEditor.SceneGraph.Actors.BoxBrushNode,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.SideLinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.BoxBrushNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.CameraNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Camera"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.CameraNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.CameraNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.DecalNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Decal"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.DecalNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.DirectionalLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.DirectionalLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.DirectionalLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.DirectionalLightNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.EnvironmentProbeNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.EnvironmentProbe"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.EnvironmentProbeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.ExponentialHeightFogNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.ExponentialHeightFog"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.ExponentialHeightFogNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.FoliageNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Foliage"/> actor type.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.FoliageNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavLinkNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.NavLink"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode">
            <summary>
            Sub actor node used to edit link start and end points.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.#ctor(FlaxEditor.SceneGraph.Actors.NavLinkNode,System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="isStart">The start node or end node.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.LinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.NavMeshBoundsVolume"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.SideLinkNode">
            <summary>
            Sub actor node used to edit volume.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.SideLinkNode.#ctor(FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.SideLinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.SideLinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.SideLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.SideLinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.NavMeshBoundsVolumeNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.StaticModelNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.StaticModel"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode">
            <summary>
            Single model material slot entry node.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.Model">
            <summary>
            Gets the model actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.#ctor(FlaxEditor.SceneGraph.Actors.StaticModelNode,System.Guid,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.EditableObject">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.StaticModelNode.EntryNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.StaticModelNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.StaticModelNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.PointLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.PointLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PointLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode">
            <summary>
            Actor node for <see cref="T:FlaxEngine.PostFxVolume"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.SideLinkNode">
            <summary>
            Sub actor node used to edit volume.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorChildNode`1" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.SideLinkNode.#ctor(FlaxEditor.SceneGraph.Actors.PostFxVolumeNode,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.SideLinkNode"/> class.
            </summary>
            <param name="actor">The parent node.</param>
            <param name="id">The identifier.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.SideLinkNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.SideLinkNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.SideLinkNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.PostFxVolumeNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SkyboxNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Skybox"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SkyboxNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SkyLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.SkyLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SkyLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SkyNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Sky"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SkyNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SpotLightNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.SpotLight"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNodeWithIcon" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SpotLightNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SpotLightNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.TerrainNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.Terrain"/> actor type.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.TerrainNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.TextRenderNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.TextRender"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.TextRenderNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.TextRenderNode.PostSpawn">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.UICanvasNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.UICanvas"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.PostSpawn">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UICanvasNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.UIControlNode">
            <summary>
            Scene tree node for <see cref="T:FlaxEngine.UIControl"/> actor type.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UIControlNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.UIControlNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.Actors.SceneNode">
            <summary>
            Actor tree node for <see cref="T:FlaxEngine.Scene"/> objects.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.IsEdited">
            <summary>
            Gets or sets a value indicating whether this scene is edited.
            </summary>
            <value>
              <c>true</c> if this scene is edited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.Scene">
            <summary>
            Gets the scene.
            </summary>
            <value>
            The scene.
            </value>
        </member>
        <member name="M:FlaxEditor.SceneGraph.Actors.SceneNode.#ctor(FlaxEngine.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.Actors.SceneNode"/> class.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanCreatePrefab">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanDelete">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.Actors.SceneNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.ColliderNode">
            <summary>
            Scene Graph node type used for the collider shapes.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ColliderNode.#ctor(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.ColliderNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode">
            <summary>
            Tree node GUI control used as a proxy object for actors hierarchy.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.TreeNode" />
        </member>
        <member name="F:FlaxEditor.SceneGraph.GUI.ActorTreeNode._actorNode">
            <summary>
            The actor node that owns this node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Actor">
            <summary>
            Gets the actor.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ActorNode">
            <summary>
            Gets the actor node.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.UpdateText">
            <summary>
            Updates the tree node text.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.UpdateFilter(System.String)">
            <summary>
            Updates the query search filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.CacheTextColor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.StartRenaming">
            <summary>
            Starts the actor renaming action.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnExpandedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragEnterHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragMoveHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragLeaveHeader">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ReparentAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.OnDragDropHeader(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ValidateDragAsset(FlaxEditor.Content.AssetItem)">
            <summary>
            Validates the asset for drag and drop into one of the scene tree nodes.
            </summary>
            <param name="item">The item.</param>
            <returns>True if can drag and drop it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.ValidateDragActorType(System.Type)">
            <summary>
            Validates the type of the actor for drag and drop into one of the scene tree nodes.
            </summary>
            <param name="actorType">Type of the actor.</param>
            <returns>True if can drag and drop it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.ActorTreeNode.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.GUI.SceneTreeNode">
            <summary>
            A <see cref="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode"/> custom implementation for <see cref="T:FlaxEditor.SceneGraph.Actors.SceneNode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.GUI.ActorTreeNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.SceneTreeNode.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.GUI.SceneTreeNode.CacheTextColor">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SceneGraph.LocalSceneGraph">
            <summary>
            Manages the manual local scene graph made of actors not added to gameplay but used in editor. Handles creating, updating and removing scene graph nodes for the given root actor that holds the hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.LocalSceneGraph.Root">
            <summary>
            The root node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.LocalSceneGraph.MainActor">
            <summary>
            Gets or sets the main actor used to track the hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.LocalSceneGraph.Main">
            <summary>
            Gets the main scene graph node (owns <see cref="P:FlaxEditor.SceneGraph.LocalSceneGraph.MainActor"/>).
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.LocalSceneGraph.#ctor(FlaxEditor.SceneGraph.RootNode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.LocalSceneGraph"/> class.
            </summary>
            <param name="root">The root node of the graph. Allows to override some logic for the scene graph section.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.LocalSceneGraph.Dispose">
            <summary>
            Releases all created scene graph nodes and unlinks the <see cref="P:FlaxEditor.SceneGraph.LocalSceneGraph.MainActor"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.RootNode">
            <summary>
            Represents root node of the whole scene graph.
            </summary>
            <seealso cref="T:FlaxEditor.SceneGraph.ActorNode" />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.RootNode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.RootNode"/> class.
            </summary>
            <param name="id">The node id.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Name">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.ParentScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Root">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.CanCopyPaste">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.CanDelete">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.CanDrag">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.IsActive">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.IsActiveInHierarchy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Transform">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.RayCast(FlaxEngine.Ray@,System.Single@,FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes)">
            <summary>
            Performs raycasting over nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="distance">The result distance.</param>
            <param name="flags">The raycasting flags.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.RayCast(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@,FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes)">
            <summary>
            Performs raycasting over nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="distance">The result distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <param name="flags">The raycasting flags.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.Delete">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneGraph.RootNode.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.RootNode.Undo">
            <summary>
            Gets the undo.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphFactory">
            <summary>
            Factory service for Scene Graph nodes creating.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphFactory.CustomNodesTypes">
            <summary>
            The custom nodes types. Key = object type, Value = custom graph node type
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphFactory.Nodes">
            <summary>
            The nodes collection where key is ID.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.FindNode(System.Guid)">
            <summary>
            Tries to find the node by the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.SceneGraphFactory"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.BuildSceneTree(FlaxEngine.Scene)">
            <summary>
            Builds the scene tree.
            </summary>
            <param name="scene">The scene.</param>
            <returns>The root scene node.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphFactory.BuildActorNode(FlaxEngine.Actor)">
            <summary>
            Builds the actor node. Warning! Don't create duplicated nodes.
            </summary>
            <param name="actor">The actor.</param>
            <returns>Created node or null if failed.</returns>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphNode">
            <summary>
            Base class for all leaf node objects which belong to scene graph used by the Editor.
            Scene Graph is directional graph without cyclic references. It's a tree.
            A <see cref="T:FlaxEditor.Modules.SceneModule"/> class is responsible for Scene Graph management.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.parentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ChildNodes">
            <summary>
            Gets the children list.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> class.
            </summary>
            <param name="id">The unique node identifier. Cannot be changed at runtime.</param>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ID">
            <summary>
            Gets the identifier. Must be unique and immutable.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ParentScene">
            <summary>
            Gets the parent scene.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.Root">
            <summary>
            Gets the root node of the scene graph (if has).
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.Transform">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanCopyPaste">
            <summary>
            Gets a value indicating whether this instance can be copied or/and pasted.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanDelete">
            <summary>
            Gets a value indicating whether this node can be deleted by the user.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanDrag">
            <summary>
            Gets a value indicating whether this node can be dragged by the user.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.CanTransform">
            <summary>
            Gets a value indicating whether this node can be transformed by the user.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.IsActive">
            <summary>
            Gets a value indicating whether this <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> is active.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.IsActiveInHierarchy">
            <summary>
            Gets a value indicating whether this <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> is active and all parent nodes are also active.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.OrderInParent">
            <summary>
            Gets or sets order of the node in the parent container.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.ParentNode">
            <summary>
            Gets or sets the parent node.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.EditableObject">
            <summary>
            Gets the object to edit via properties editor when this node is being selected.
            </summary>
        </member>
        <member name="P:FlaxEditor.SceneGraph.SceneGraphNode.UndoRecordObject">
            <summary>
            Gets the object used to record undo changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.ContainsInHierarchy(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Determines whether the specified object is in a hierarchy (one of the children or lower).
            </summary>
            <param name="node">The node to check,</param>
            <returns>True if given actor is part of the hierarchy, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.ContainsChild(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Determines whether the specified object is one of the children.
            </summary>
            <param name="node">The node to check,</param>
            <returns>True if given object is a child, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.AddChild(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Adds the child node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData">
            <summary>
            The scene graph raycasting data container.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes">
            <summary>
            The raycasting optional flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes.SkipColliders">
            <summary>
            The skip colliders flag. Use it to ignore physics colliders intersections detection.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.FlagTypes.SkipEditorPrimitives">
            <summary>
            The skip editor primitives. Use it to ignore editor icons and primitives intersections detection.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.Ray">
            <summary>
            The ray.
            </summary>
        </member>
        <member name="F:FlaxEditor.SceneGraph.SceneGraphNode.RayCastData.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.RayCastChildren(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Performs raycasting over child nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray casting data.</param>
            <param name="distance">The result distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.RayCast(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Performs raycasting over nodes hierarchy trying to get the closest object hit by the given ray.
            </summary>
            <param name="ray">The ray casting data.</param>
            <param name="distance">The result distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <returns>Hit object or null if there is no intersection at all.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.RayCastSelf(FlaxEditor.SceneGraph.SceneGraphNode.RayCastData@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Checks if given ray intersects with the node.
            </summary>
            <param name="ray">The ray casting data.</param>
            <param name="distance">The distance.</param>
            <param name="normal">The result intersection surface normal vector.</param>
            <returns>True ray hits this node, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.OnDebugDraw(FlaxEditor.ViewportDebugDrawData)">
            <summary>
            Called when selected nodes should draw debug shapes using <see cref="T:FlaxEngine.DebugDraw"/> interface.
            </summary>
            <param name="data">The debug draw data.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.Delete">
            <summary>
            Deletes object represented by this node eg. actor.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.Dispose">
            <summary>
            Releases the node and the child tree. Disposed all GUI parts and used resources.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.OnDispose">
            <summary>
            Called when node or parent node is disposing.
            </summary>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphNode.OnParentChanged">
            <summary>
            Called when parent node gets changed.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphTools">
            <summary>
            Set of tools for <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/> processing.
            </summary>
        </member>
        <member name="T:FlaxEditor.SceneGraph.SceneGraphTools.GraphExecuteCallbackDelegate">
            <summary>
            Delegate for scene graph action execution callback.
            </summary>
            <param name="node">The node.</param>
            <returns>True if call deeper, otherwise skip calling node children.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.ExecuteOnGraph(FlaxEditor.SceneGraph.SceneGraphNode,FlaxEditor.SceneGraph.SceneGraphTools.GraphExecuteCallbackDelegate)">
            <summary>
            Executes the custom action on the graph nodes.
            </summary>
            <param name="node">The node</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildNodesParents``1(System.Collections.Generic.List{``0})">
            <summary>
            Builds the array made of input nodes that are at the top level. The result collection contains only nodes that don't have parent nodes in the given collection.
            </summary>
            <typeparam name="T">The scene graph node type.</typeparam>
            <param name="nodes">The nodes.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildNodesParents``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Builds the list made of input nodes that are at the top level. The result collection contains only nodes that don't have parent nodes in the given collection.
            </summary>
            <typeparam name="T">The scene graph node type.</typeparam>
            <param name="nodes">The nodes.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildAllNodes``1(System.Collections.Generic.List{``0})">
            <summary>
            Builds the array made of all nodes in the input list and child tree. The result collection contains all nodes in the tree.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEditor.SceneGraph.SceneGraphTools.BuildAllNodes``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Builds the list made of all nodes in the input list and child tree. The result collection contains all nodes in the tree.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:FlaxEditor.States.BuildingLightingState">
            <summary>
            In this state engine is building static lighting for the scene. Editing scene and content is blocked.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.BuildingLightingState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.BuildingLightingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.CanEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.BuildingLightingState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.ChangingScenesState">
            <summary>
            In this state editor is changing loaded scenes collection.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.ChangingScenesState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.LoadScene(System.Guid,System.Boolean)">
            <summary>
            Loads the scene.
            </summary>
            <param name="sceneId">The scene asset ID.</param>
            <param name="additive">True if don't close opened scenes and just add new scene to the collection, otherwise will release current scenes and load single one.</param>
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.UnloadScene(FlaxEngine.Scene)">
            <summary>
            Unloads the scene.
            </summary>
            <param name="scene">The scene to unload.</param>
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.UnloadScene(System.Collections.Generic.IEnumerable{FlaxEngine.Scene})">
            <summary>
            Unloads the scenes collection.
            </summary>
            <param name="scenes">The scenes to unload.</param>
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.ChangeScenes(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{FlaxEngine.Scene})">
            <summary>
            Changes the scenes.
            </summary>
            <param name="toLoad">Scenes to load.</param>
            <param name="toUnload">Scenes to unload.</param>
        </member>
        <member name="P:FlaxEditor.States.ChangingScenesState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ChangingScenesState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.ClosingState">
            <summary>
            In this state editor is performing closing actions and will shutdown. This is last state and cannot leave it.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.ClosingState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.ClosingState.IsEditorReady">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.ClosingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ClosingState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.ClosingState.OnEnter">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.EditingSceneState">
            <summary>
            In this state user may edit scene and use editor normally.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanUseToolbox">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanUseUndoRedo">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanChangeScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanEditScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanEnterPlayMode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.EditingSceneState.CanReloadScripts">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.EditorState">
            <summary>
            Base class for all Editor states.
            </summary>
            <seealso cref="T:FlaxEngine.Utilities.State" />
        </member>
        <member name="P:FlaxEditor.States.EditorState.StateMachine">
            <summary>
            Gets the editor state machine.
            </summary>
            <value>
            The editor state machine.
            </value>
        </member>
        <member name="F:FlaxEditor.States.EditorState.Editor">
            <summary>
            Gets the editor object.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanEditContent">
            <summary>
            Check if can edit assets in this state
            </summary>
            <returns>True if can edit content, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanEditScene">
            <summary>
            Check if can edit scene in this state
            </summary>
            <returns>True if can edit scene, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanUseToolbox">
            <summary>
            Check if can use toolbox in this state
            </summary>
            <returns>True if can use toolbox, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanUseUndoRedo">
            <summary>
            Check if can use undo/redo in this state
            </summary>
            <returns>True if can use undo/redo, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanChangeScene">
            <summary>
            Check if can change scene in this state
            </summary>
            <returns>True if can change scene, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanEnterPlayMode">
            <summary>
            Check if can enter play mode in this state
            </summary>
            <returns>True if can enter play mode, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.CanReloadScripts">
            <summary>
            Check if can enter recompile scripts in this state
            </summary>
            <returns>True if can recompile scripts, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.IsEditorReady">
            <summary>
            Check if static is valid for Editor UI calls and other stuff
            </summary>
            <returns>True if state is valid for Editor UI calls and other stuff, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorState.Status">
            <summary>
            Gets the state status message for the UI. Returns null if use the default value.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.EditorState.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.States.EditorState"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.States.EditorState.Update">
            <summary>
            Update state. Called every Engine tick.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.EditorState.CanExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.EditorStateMachine">
            <summary>
            Flax Editor states machine.
            </summary>
            <seealso cref="T:FlaxEngine.Utilities.StateMachine" />
        </member>
        <member name="P:FlaxEditor.States.EditorStateMachine.CurrentState">
            <summary>
            Gets the current state.
            </summary>
            <value>
            The current state.
            </value>
        </member>
        <member name="P:FlaxEditor.States.EditorStateMachine.IsPlayMode">
            <summary>
            Checks if editor is in playing mode
            </summary>
            <returns>True if editor is in play mode, otherwise false</returns>
        </member>
        <member name="P:FlaxEditor.States.EditorStateMachine.IsEditMode">
            <summary>
            Checks if editor is in editing mode
            </summary>
            <returns>True if editor is in edit mode, otherwise false</returns>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.LoadingState">
            <summary>
            Editor loading state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.ClosingState">
            <summary>
            Editor closing state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.EditingSceneState">
            <summary>
            Editor editing scene state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.ChangingScenesState">
            <summary>
            Editor changing scenes state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.PlayingState">
            <summary>
            Editor playing state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.ReloadingScriptsState">
            <summary>
            Editor reloading scripts state.
            </summary>
        </member>
        <member name="F:FlaxEditor.States.EditorStateMachine.BuildingLightingState">
            <summary>
            Editor building lighting state.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.EditorStateMachine.GoToState(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.EditorStateMachine.SwitchState(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.InvalidStateException">
            <summary>
            Operation cannot be performed in the current editor state.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:FlaxEditor.States.InvalidStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.States.InvalidStateException"/> class.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="T:FlaxEditor.States.LoadingState">
            <summary>
            Editor loading initial state
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.CanEditContent">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.IsEditorReady">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.CanReloadScripts">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.LoadingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.LoadingState.StartInitEnding">
            <summary>
            Starts the Editor initialization process ending.
            </summary>
        </member>
        <member name="M:FlaxEditor.States.LoadingState.Update">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.LoadingState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.PlayingState">
            <summary>
            In this state editor is simulating game.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.PlayingState.WasDirty">
            <summary>
            Gets a value indicating whether any scene was dirty before entering the play mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.PlayingState.CanEditScene">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.States.PlayingState.CanEnterPlayMode">
            <inheritdoc />
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneDuplicating">
            <summary>
            Occurs when play mode is starting (before scene duplicating).
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneDuplicated">
            <summary>
            Occurs when play mode is starting (after scene duplicating).
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneRestoring">
            <summary>
            Occurs when play mode is ending (before scene restoring).
            </summary>
        </member>
        <member name="E:FlaxEditor.States.PlayingState.SceneRestored">
            <summary>
            Occurs when play mode is ending (after scene restoring).
            </summary>
        </member>
        <member name="P:FlaxEditor.States.PlayingState.IsPaused">
            <summary>
            Gets or sets a value indicating whether game logic is paused.
            </summary>
        </member>
        <member name="P:FlaxEditor.States.PlayingState.Status">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.PlayingState.OnEnter">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.States.PlayingState.OnExit(FlaxEngine.Utilities.State)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.States.ReloadingScriptsState">
            <summary>
            In this state editor is reloading user scripts.
            </summary>
            <seealso cref="T:FlaxEditor.States.EditorState" />
        </member>
        <member name="P:FlaxEditor.States.ReloadingScriptsState.Status">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.AnimGraphSurface">
            <summary>
            The Visject Surface implementation for the animation graph editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.VisjectSurface" />
        </member>
        <member name="F:FlaxEditor.Surface.AnimGraphSurface._cmStateMachineMenu">
            <summary>
            The state machine editing context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.AnimGraphSurface._cmStateMachineTransitionMenu">
            <summary>
            The state machine transition editing context menu.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.OnContextChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.CanSpawnNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.AnimGraphSurface.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation">
            <summary>
            Contains archetypes for nodes from the Animation group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.Output">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for the main animation graph node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Output.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.Sample">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for the animation sampling nodes
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Sample.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Sample.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.Sample.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.BlendPose">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for the animation poses blending.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BlendPose.MaxBlendPoses">
            <summary>
            The maximum amount of the blend poses to support.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BlendPose.FirstBlendPoseBoxIndex">
            <summary>
            The index of the first input blend pose box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.BlendPose.BlendPosesCount">
            <summary>
            Gets or sets used blend poses count (visible to the user).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.BlendPose.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.BlendPose.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.BlendPose.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode">
            <summary>
            The bone transformation modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode.None">
            <summary>
            No transformation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode.Add">
            <summary>
            Applies the transformation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.BoneTransformMode.Replace">
            <summary>
            Replaces the transformation.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode">
            <summary>
            The animated model root motion mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode.NoExtraction">
            <summary>
            Don't extract nor apply the root motion.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode.Ignore">
            <summary>
            Ignore root motion (remove from root node transform).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.RootMotionMode.Enable">
            <summary>
            Enable root motion (remove from root node transform and apply to the target).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the blending multiple animations.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._selectedAnimationLabel">
            <summary>
            The selected animation label.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._selectedAnimation">
            <summary>
            The selected animation combobox;
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._animationPicker">
            <summary>
            The animation picker.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._animationSpeedLabel">
            <summary>
            The animation speed label.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._animationSpeed">
            <summary>
            The animation speed editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend._isUpdatingUI">
            <summary>
            Flag for editor UI updating. Used to skip value change events to prevent looping data flow.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.MaxAnimationsCount">
            <summary>
            The maximum animations amount to blend per node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.SelectedAnimationIndex">
            <summary>
            Gets or sets the index of the selected animation.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.UpdateUI(System.Int32,System.Boolean,FlaxEngine.Vector4@,System.Guid@)">
            <summary>
            Updates the editor UI.
            </summary>
            <param name="selectedIndex">Index of the selected blend point.</param>
            <param name="isValid">if set to <c>true</c> is selection valid.</param>
            <param name="data0">The packed data 0.</param>
            <param name="data1">The packed data 1.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.UpdateUI">
            <summary>
            Updates the editor UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the blending multiple animations in 1D.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor">
            <summary>
            The Multi Blend 1D blend space editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.#ctor(FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor"/> class.
            </summary>
            <param name="node">The parent Visject Node node.</param>
            <param name="x">The X location.</param>
            <param name="y">The Y location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.GetData(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Guid[],FlaxEngine.Vector2[])">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.SelectedIndex">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.Editor.SetLocation(System.Int32,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend1D.UpdateUI(System.Int32,System.Boolean,FlaxEngine.Vector4@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the blending multiple animations in 2D.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor">
            <summary>
            The Multi Blend 2D blend space editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.#ctor(FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor"/> class.
            </summary>
            <param name="node">The parent Visject Node node.</param>
            <param name="x">The X location.</param>
            <param name="y">The Y location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.GetData(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Guid[],FlaxEngine.Vector2[])">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.SelectedIndex">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.Editor.SetLocation(System.Int32,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.MultiBlend2D.UpdateUI(System.Int32,System.Boolean,FlaxEngine.Vector4@,System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachine">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the state machine output node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceContext" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachine._isUpdatingUI">
            <summary>
            Flag for editor UI updating. Used to skip value change events to prevent looping data flow.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.StateMachineTitle">
            <summary>
            Gets or sets the node title text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.MaxTransitionsPerUpdate">
            <summary>
            Gets or sets the maximum amount of active transitions per update.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.ReinitializeOnBecomingRelevant">
            <summary>
            Gets or sets a value indicating whether reinitialize state machine on becoming relevant (used for blending, etc.).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SkipFirstUpdateTransition">
            <summary>
            Gets or sets a value indicating whether skip any triggered transitions durig first animation state machine update.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.Edit">
            <summary>
            Opens the state machine editing UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.StartRenaming">
            <summary>
            Starts the state machine renaming by showing a rename popup to the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.UpdateUI">
            <summary>
            Updates the editor UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnSpawned">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.Dispose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachine.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachine.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the state machine entry node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
            <seealso cref="T:FlaxEditor.Surface.IConnectionInstigator" />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.FirstStateId">
            <summary>
            Gets or sets the first state node identifier for the state machine pointed by the entry node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.FirstState">
            <summary>
            Gets or sets the first state for the state machine pointed by the entry node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.DrawConnections(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.RemoveConnections">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.ConnectionOrigin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineEntry.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineState">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode" /> for the state machine state node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
            <seealso cref="T:FlaxEditor.Surface.IConnectionInstigator" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceContext" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Transitions">
            <summary>
            The transitions list from this state to the others.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.StateTitle">
            <summary>
            Gets or sets the node title text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.StateData">
            <summary>
            Gets or sets the state data (transitions list with rules graph and other options).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.TransitionsRectangle">
            <summary>
            The transitions rectangle (in surface-space).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.DrawConnection(FlaxEditor.Surface.VisjectSurface,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <summary>
            Draws the connection between two state machine nodes.
            </summary>
            <param name="surface">The surface.</param>
            <param name="startPos">The start position.</param>
            <param name="endPos">The end position.</param>
            <param name="color">The line color.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.GetConnectionEndPoint(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Gets the connection end point for the given input position. Puts the end point near the edge of the node bounds.
            </summary>
            <param name="startPos">The start position (in surface space).</param>
            <param name="endPos">The end position (in surface space).</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnSpawned">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.LoadData">
            <summary>
            Loads the state data from the node value (reads transitions and related information).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SaveData">
            <summary>
            Saves the state data to the node value (writes transitions and related information).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.ClearData">
            <summary>
            Clears the state data (removes transitions and related information).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Edit">
            <summary>
            Opens the state editing UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateTransitionsOrder">
            <summary>
            Updates the transitions order in the list vy using the <see cref="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Order"/> property.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateTransitionsColors">
            <summary>
            Updates the transitions colors (for disabled/enabled/solo transitions matching).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.UpdateTransitions">
            <summary>
            Updates the transitions rectangles.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.StartRenaming">
            <summary>
            Starts the state renaming by showing a rename popup to the user.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.RemoveConnections">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Dispose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.DrawConnections(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.ConnectionOrigin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineState.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition">
            <summary>
            State machine transition data container object.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineState"/>
            <seealso cref="T:FlaxEditor.Surface.ISurfaceContext"/>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data">
            <summary>
            The packed data container for the transition data storage. Helps with serialization and versioning the data.
            </summary>
            <remarks>
            It does not store GC objects references to make it more lightweight. Transition rule bytes data is stores in a separate way.
            </remarks>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes">
            <summary>
            The transition flag types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.Enabled">
            <summary>
            The enabled flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.Solo">
            <summary>
            The solo flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes.UseDefaultRule">
            <summary>
            The use default rule flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Destination">
            <summary>
            The destination state node ID.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Order">
            <summary>
            The order.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.BlendDuration">
            <summary>
            The blend duration (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.BlendMode">
            <summary>
            The blend mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Unused0">
            <summary>
            The unused data 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Unused1">
            <summary>
            The unused data 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.Unused2">
            <summary>
            The unused data 2.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.HasFlag(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes)">
            <summary>
            Determines whether the data has a given flag set.
            </summary>
            <param name="flag">The flag.</param>
            <returns><c>true</c> if the specified flag is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.SetFlag(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data.FlagTypes,System.Boolean)">
            <summary>
            Sets the flag to the given value.
            </summary>
            <param name="flag">The flag.</param>
            <param name="value">If set to <c>true</c> the flag will be set, otherwise it will be cleared.</param>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SourceState">
            <summary>
            The transition start state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.DestinationState">
            <summary>
            The transition end state.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Enabled">
            <summary>
            If checked, the transition can be triggered, otherwise it will be ignored.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Solo">
            <summary>
            If checked, animation graph will ignore other transitions from the source state and use only this transition.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.UseDefaultRule">
            <summary>
            If checked, animation graph will perform automatic transition based on the state animation pose (single shot animation play).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Order">
            <summary>
            The transition order (higher first).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.BlendDuration">
            <summary>
            The blend duration (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.BlendMode">
            <summary>
            The blend mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.RuleGraph">
            <summary>
            The rule graph data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.StartPos">
            <summary>
            The start position (cached).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.EndPos">
            <summary>
            The end position (cached).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Bounds">
            <summary>
            The bounds of the transition connection line (cached).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.LineColor">
            <summary>
            The color of the transition connection line (cached).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.#ctor(FlaxEditor.Surface.Archetypes.Animation.StateMachineState,FlaxEditor.Surface.Archetypes.Animation.StateMachineState,FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data@,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="data">The transition data container.</param>
            <param name="ruleGraph">The transition rule graph. Can be null.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.GetData(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Data@)">
            <summary>
            Gets the transition data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Delete">
            <summary>
            Removes the transition.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SelectSourceState">
            <summary>
            Selects the source state node of the transition
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.SelectDestinationState">
            <summary>
            Selects the destination state node of the transition
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.Edit">
            <summary>
            Opens the transition editor popup.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition.EditRule">
            <summary>
            Opens the transition rule editing UI.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor">
            <summary>
            TheAnim Graph state machine transition editor (as contextual popup).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuBase" />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.Transition">
            <summary>
            Gets the transition being modified.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.#ctor(FlaxEditor.Surface.Archetypes.Animation.StateMachineTransition)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor"/> class.
            </summary>
            <param name="transition">The transition.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Animation.TransitionEditor.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor">
            <summary>
            The blend space editor used by the animation multi blend nodes.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint">
            <summary>
            Represents single blend point.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.DefaultSize">
            <summary>
            The default size for the blend points.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.#ctor(FlaxEditor.Surface.Archetypes.BlendPointsEditor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="index">The blend point index.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPoint.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.BlendPointsEditor.Is2D">
            <summary>
            Gets a value indicating whether blend space is 2D, otherwise it is 1D.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.#ctor(System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Archetypes.BlendPointsEditor"/> class.
            </summary>
            <param name="is2D">The value indicating whether blend space is 2D, otherwise it is 1D.</param>
            <param name="x">The X location.</param>
            <param name="y">The Y location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.GetData(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Guid[],FlaxEngine.Vector2[])">
            <summary>
            Gets the blend space data.
            </summary>
            <param name="rangeX">The space range for X axis (X-width, Y-height).</param>
            <param name="rangeY">The space range for Y axis (X-width, Y-height).</param>
            <param name="pointsAnims">The points anims (input array to fill of size equal 14).</param>
            <param name="pointsLocations">The points locations (input array to fill of size equal 14).</param>
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.BlendPointsEditor.SelectedIndex">
            <summary>
            Gets or sets the index of the selected blend point.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.SetLocation(System.Int32,FlaxEngine.Vector2)">
            <summary>
            Sets the blend point location.
            </summary>
            <param name="index">The index.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.GetPointsArea(FlaxEngine.Rectangle@)">
            <summary>
            Gets the blend points area.
            </summary>
            <param name="pointsArea">The control-space area.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendPointPosToBlendSpacePos(FlaxEngine.Vector2)">
            <summary>
            Converts the blend point position into the blend space position (defined by min/max per axis).
            </summary>
            <param name="pos">The blend point control position.</param>
            <returns>The blend space position.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendSpacePosToBlendPointPos(FlaxEngine.Vector2)">
            <summary>
            Converts the blend space position into the blend point position.
            </summary>
            <param name="pos">The blend space position.</param>
            <returns>The blend point control position.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Archetypes.BlendPointsEditor.BlendAreaRect">
            <summary>
            Gets the blend area rect (in local control space for the range min-max).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.BlendPointsEditor.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Bitwise">
            <summary>
            Contains archetypes for nodes from the Bitwise group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Bitwise.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Boolean">
            <summary>
            Contains archetypes for nodes from the Boolean group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Boolean.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Comparisons">
            <summary>
            Contains archetypes for nodes from the Comparisons group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Comparisons.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Constants">
            <summary>
            Contains archetypes for nodes from the Constants group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Constants.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Constants.TryParseValues(System.String,System.Single[]@)">
            <summary>
            Tries to parse a list of numbers separated by commas
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Custom">
            <summary>
            Contains helper utilities for custom graph nodes management.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Custom.DummyCustomNode">
            <summary>
            The dummy custom node used to help custom surface nodes management (loading and layout preserving on missing type).
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Custom.DummyCustomNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Custom.GroupID">
            <summary>
            The custom nodes group identifier. Reserved for nodes that are provided by external source eg: game scripts or editor plugin. Handling of those nodes is surface-type dependant.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Custom.GetNodeTypeName(FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Gets the name of the node type (C# typename).
            </summary>
            <param name="arch">The node archetype.</param>
            <returns>The node typename.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Custom.GetNodeGroup(FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Gets the node group name.
            </summary>
            <remarks>Every custom node can specify the group that it belongs to.</remarks>
            <param name="arch">The node archetype.</param>
            <returns>The node group name.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Layers">
            <summary>
            Contains archetypes for nodes from the Layers group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Layers.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Material">
            <summary>
            Contains archetypes for nodes from the Material group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial">
            <summary>
            Customized <see cref="T:FlaxEditor.Surface.SurfaceNode"/> for main material node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes">
            <summary>
            Material node input boxes (each enum item value maps to box ID).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Layer">
            <summary>
            The layer input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Color">
            <summary>
            The color input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Mask">
            <summary>
            The mask input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Emissive">
            <summary>
            The emissive input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Metalness">
            <summary>
            The metalness input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Specular">
            <summary>
            The specular input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Roughness">
            <summary>
            The roughness input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.AmbientOcclusion">
            <summary>
            The ambient occlusion input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Normal">
            <summary>
            The normal input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Opacity">
            <summary>
            The opacity input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.Refraction">
            <summary>
            The refraction input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.PositionOffset">
            <summary>
            The position offset input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.TessellationMultiplier">
            <summary>
            The tessellation multiplier input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.WorldDisplacement">
            <summary>
            The world displacement input.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes.SubsurfaceColor">
            <summary>
            The subsurface color input.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.GetBox(FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.MaterialNodeBoxes)">
            <summary>
            Gets the material box.
            </summary>
            <param name="box">The input type.</param>
            <returns>The box</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.UpdateBoxes">
            <summary>
            Update material node boxes
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Material.SurfaceNodeMaterial.ConnectionTick(FlaxEditor.Surface.Elements.Box)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Material.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Math">
            <summary>
            Contains archetypes for nodes from the Math group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Math.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Packing">
            <summary>
            Contains archetypes for nodes from the Packing group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Packing.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Parameters">
            <summary>
            Contains archetypes for nodes from the Parameters group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet">
            <summary>
            Surface node type for parameters group Get node.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNode" />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnParamCreated(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnParamRenamed(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnParamDeleted(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.SurfaceNodeParamsGet.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Archetypes.Parameters.CreateGetNode(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Creates the get node.
            </summary>
            <param name="id">The identifier.</param>
            <param name="context">The surface.</param>
            <param name="arch">The node archetype.</param>
            <param name="groupArch">The group archetype.</param>
            <returns>The created node.</returns>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Parameters.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Textures">
            <summary>
            Contains archetypes for nodes from the Textures group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType">
            <summary>
            Common samplers types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.LinearClamp">
            <summary>
            The linear clamp
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.PointClamp">
            <summary>
            The point clamp
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.LinearWrap">
            <summary>
            The linear wrap
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.CommonSamplerType.PointWrap">
            <summary>
            The point wrap
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Textures.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Archetypes.Tools">
            <summary>
            Contains archetypes for nodes from the Tools group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Archetypes.Tools.Nodes">
            <summary>
            The nodes for that group.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Constants">
            <summary>
            Set of static properties for the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeCloseButtonSize">
            <summary>
            The node close button size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeCloseButtonMargin">
            <summary>
            The node close button margin from the edges.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeHeaderSize">
            <summary>
            The node header height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeFooterSize">
            <summary>
            The node footer height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeMarginX">
            <summary>
            The node left margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.NodeMarginY">
            <summary>
            The node right margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.BoxOffsetX">
            <summary>
            The box position offset on the x axis.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.BoxSize">
            <summary>
            The box size (with and height).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Constants.LayoutOffsetY">
            <summary>
            The node layout offset on the y axis (height of the boxes rows, etc.). It's used to make the design more consistent.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM">
            <summary>
            The Visject Surface dedicated context menu for nodes spawning.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuBase" />
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.ItemClickedDelegate">
            <summary>
            Visject context menu item clicked delegate.
            </summary>
            <param name="clickedItem">The item that was clicked</param>
            <param name="selectedBox">The currently user-selected box. Can be null.</param>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.NodeSpawnCheckDelegate">
            <summary>
            Visject Surface node archetype spawn ability checking delegate.
            </summary>
            <param name="arch">The node archetype to check.</param>
            <returns>True if can use this node to spawn it on a surface, otherwise false..</returns>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCM.ParameterGetterDelegate">
            <summary>
            Visject Surface parameters getter delegate.
            </summary>
            <returns>The list of surface parameters or null if failed.</returns>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCM.SelectedItem">
            <summary>
            The selected item
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.ContextMenu.VisjectCM.OnItemClicked">
            <summary>
            Event fired when any item in this popup menu gets clicked.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCM.ShowExpanded">
            <summary>
            Gets or sets a value indicating whether show groups expanded or collapsed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.#ctor(System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype},FlaxEditor.Surface.ContextMenu.VisjectCM.NodeSpawnCheckDelegate,FlaxEditor.Surface.ContextMenu.VisjectCM.ParameterGetterDelegate,FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCM"/> class.
            </summary>
            <param name="groups">The group archetypes. Cannot be null.</param>
            <param name="canSpawnNodeType">The surface node type validation helper. Cannot be null.</param>
            <param name="parametersGetter">The surface parameters getter callback. Can be null.</param>
            <param name="customNodesGroup">The group with custom nodes.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.AddGroup(FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Adds the group archetype to add to the menu.
            </summary>
            <param name="groupArchetype">The group.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.SortGroups">
            <summary>
            Sort the groups and keeps <see cref="F:FlaxEditor.Surface.ContextMenu.VisjectCM._groups"/> in sync
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.OnClickItem(FlaxEditor.Surface.ContextMenu.VisjectCMItem)">
            <summary>
            Called when user clicks on an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.ExpandAll(System.Boolean)">
            <summary>
            Expands all the groups.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.UpdateSurfaceParametersGroup">
            <summary>
            Updates the surface parameters group.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEditor.Surface.Elements.Box)">
            <summary>
            Show context menu over given control.
            </summary>
            <param name="parent">Parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
            <param name="startBox">The currently selected box that the new node will get connected to. Can be null</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.Hide">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetNextSiblings(FlaxEngine.GUI.Control)">
            <summary>
            Gets the next siblings of a control.
            </summary>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come after the current one.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetNextSiblings``1(FlaxEngine.GUI.Control)">
            <summary>
            Gets the next siblings of a control that have a specific type.
            </summary>
            <typeparam name="T">The type that the controls should have.</typeparam>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come after the current one.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetPreviousSiblings(FlaxEngine.GUI.Control)">
            <summary>
            Gets the previous siblings of a control.
            </summary>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come before the current one.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCM.GetPreviousSiblings``1(FlaxEngine.GUI.Control)">
            <summary>
            Gets the previous sibling of a control that have a specific type.
            </summary>
            <typeparam name="T">The type that the controls should have.</typeparam>
            <param name="item">A control that is attached to a parent</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the siblings that come before the current one.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCMGroup">
            <summary>
            Drop panel for group of <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem"/>. It represents <see cref="T:FlaxEditor.Surface.GroupArchetype"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DropPanel" />
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.ContextMenu">
            <summary>
            The context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.Archetype">
            <summary>
            The archetype.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.SortScore">
            <summary>
            A computed score for the context menu order
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.#ctor(FlaxEditor.Surface.ContextMenu.VisjectCM,FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMGroup"/> class.
            </summary>
            <param name="cm">The context menu.</param>
            <param name="archetype">The group archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.ResetView">
            <summary>
            Resets the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.UpdateFilter(System.String)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.UpdateItemSort(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Updates the sorting of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem"/>s of this <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMGroup"/>
            Also updates the <see cref="P:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.SortScore"/>
            </summary>
            <param name="selectedBox">The currently user-selected box</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMGroup.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem">
            <summary>
            Single item used for <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCM"/>. Represents type of the <see cref="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.NodeArchetype"/> that can be spawned.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Group">
            <summary>
            Gets the item's group
            </summary>
            <value>
            The group of the item
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.GroupArchetype">
            <summary>
            Gets the group archetype.
            </summary>
            <value>
            The group archetype.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.NodeArchetype">
            <summary>
            Gets the node archetype.
            </summary>
            <value>
            The node archetype.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Data">
            <summary>
            Gets and sets the data of the node.
            </summary>
            <value>
            The data of the node.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.SortScore">
            <summary>
            A computed score for the context menu order
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.#ctor(FlaxEditor.Surface.ContextMenu.VisjectCMGroup,FlaxEditor.Surface.GroupArchetype,FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.ContextMenu.VisjectCMItem"/> class.
            </summary>
            <param name="group">The group.</param>
            <param name="groupArchetype">The group archetype.</param>
            <param name="archetype">The archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.UpdateScore(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Updates the <see cref="P:FlaxEditor.Surface.ContextMenu.VisjectCMItem.SortScore"/>
            </summary>
            <param name="selectedBox">The currently user-selected box</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.UpdateFilter(System.String)">
            <summary>
            Updates the filter.
            </summary>
            <param name="filterText">The filter text.</param>
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.ContextMenu.VisjectCMItem.Compare(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.AssetSelect">
            <summary>
            Assets picking control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.AssetPicker" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.AssetSelect.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.AssetSelect.Archetype">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.AssetSelect.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.Elements.AssetSelect"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="archetype">The archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.AssetSelect.OnSelectedItemChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.BoolValue">
            <summary>
            Bool value element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNodeElementControl" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.BoolValue.Value">
            <summary>
            Gets or sets a value.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Toggle">
            <summary>
            Toggle sate
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the boolean value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.BoolValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Boolean)">
            <summary>
            Sets the boolean value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.Box">
            <summary>
            Surface boxes base class (for input and output boxes). Boxes can be connected.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNodeElementControl" />
            <seealso cref="T:FlaxEditor.Surface.IConnectionInstigator" />
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box._currentType">
            <summary>
            The current connection type. It's subset or equal to <see cref="P:FlaxEditor.Surface.Elements.Box.DefaultType"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box._currentTypeColor">
            <summary>
            The cached color for the current box type.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.ID">
            <summary>
            Unique box ID within single node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.DefaultType">
            <summary>
            Allowed connections type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.Elements.Box.Connections">
            <summary>
            List with all connections to other boxes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.HasAnyConnection">
            <summary>
            Gets a value indicating whether this box has any connection.
            </summary>
            <value>
              <c>true</c> if this box has any connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.HasSingleConnection">
            <summary>
            Gets a value indicating whether this box has single connection.
            </summary>
            <value>
              <c>true</c> if this box has single connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsOutput">
            <summary>
            Gets a value indicating whether this instance is output box.
            </summary>
            <value>
              <c>true</c> if this instance is output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.CurrentType">
            <summary>
            Gets or sets the current type of the box connections.
            </summary>
            <value>
            The current type.
            </value>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.CanUseType(FlaxEditor.Surface.ConnectionType)">
            <summary>
            Determines whether this box can use the specified type as a connection.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this box can use the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.RemoveConnections">
            <summary>
            Removes all existing connections of that box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.ConnectionTick">
            <summary>
            Updates state on connection data changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.AreConnected(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Checks if box is connected with the other one.
            </summary>
            <param name="box">The other box.</param>
            <returns>True if both boxes are connected, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.BreakConnection(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Break connection to the other box (works in a both ways).
            </summary>
            <param name="box">The other box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.CreateConnection(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Create connection to the other box (works in a both ways).
            </summary>
            <param name="box">The other box.</param>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsSingle">
            <summary>
            True if box can use only single connection.
            </summary>
            <returns>True if only single connection.</returns>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsDependentBox">
            <summary>
            True if box type depends on other boxes types of the node.
            </summary>
            <returns>True if is dependant, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.IsIndependentBox">
            <summary>
            True if box type doesn't depend on other boxes types of the node.
            </summary>
            <returns>True if is independent, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnCurrentTypeChanged">
            <summary>
            Called when current box type changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnConnectionsChanged">
            <summary>
            Called when connections array gets changed (also called after surface deserialization)
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.DrawBox">
            <summary>
            Draws the box GUI using <see cref="T:FlaxEngine.Render2D"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.Box.ConnectionOrigin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.Box.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.ColorValue">
            <summary>
            Color value picking element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ColorValueBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ColorValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ColorValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ColorValue.Surface">
            <summary>
            Gets the surface.
            </summary>
            <value>
            The surface.
            </value>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ColorValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ColorValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.ComboBoxElement">
            <summary>
            Combo box element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ComboBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="F:FlaxEditor.Surface.Elements.ComboBoxElement._isAutoSelect">
            <summary>
            True if automatic value selecting is active.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ComboBoxElement.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ComboBoxElement.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.ComboBoxElement.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ComboBoxElement.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.ComboBoxElement.OnSelectedIndexChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.FloatValue">
            <summary>
            Floating point value editing element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.FloatValueBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.FloatValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.FloatValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.FloatValue.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the floating point value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Single)">
            <summary>
            Sets the floating point value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.FloatValue.SetAllValues(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Single)">
            <summary>
            Sets all the values to the given value (eg. all components of the vector).
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to assign.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.InputBox">
            <summary>
            Visject Surface input box element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Elements.Box" />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.InputBox.IsOutput">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.OnCurrentTypeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.OnConnectionsChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.InputBox.CreateDefaultEditor">
            <summary>
            Creates the default value editor control.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.IntegerValue">
            <summary>
            Integer value editing element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IntValueBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.IntegerValue.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.IntegerValue.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.IntegerValue.Surface">
            <summary>
            Gets the surface.
            </summary>
            <value>
            The surface.
            </value>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.OnValueChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.Get(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <summary>
            Gets the integer value from the specified parent node. Handles type casting and components gather.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.IntegerValue.Set(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Int32)">
            <summary>
            Sets the integer value of the specified parent node. Handles type casting and components assignment.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="arch">The node element archetype.</param>
            <param name="toSet">The value to set.</param>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.OutputBox">
            <summary>
            Visject Surface output box element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.Elements.Box" />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.DrawConnection(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <summary>
            Draws the connection between two boxes.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.DrawConnections">
            <summary>
            Draw all connections coming from this box.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.Elements.OutputBox.IsOutput">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.OutputBox.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.SkeletonNodeSelectElement">
            <summary>
            The Visject surface node element used to pick a skeleton node with a combo box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonNodeSelectElement.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.SkeletonNodeSelectElement.UpdateComboBox">
            <summary>
            Updates the Combo Box items list from the current skeleton nodes hierarchy.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.Elements.TextBoxView">
            <summary>
            Text box input element.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.TextBox" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.TextBoxView.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.TextBoxView.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.Elements.TextBoxView.Surface">
            <summary>
            Gets the surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextBoxView.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextBoxView.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.Elements.TextView">
            <summary>
            Text drawing element.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceNodeElementControl" />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextView.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.Elements.TextView.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.ConnectionType">
            <summary>
            Graph boxes connection type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Impulse">
            <summary>
            Digital signal
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Bool">
            <summary>
            Boolean value, true or false
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Integer">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Float">
            <summary>
            Floating point value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector2">
            <summary>
            Vector2 - 2 floating point values
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector3">
            <summary>
            Vector3 - 3 floating point values
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector4">
            <summary>
            Vector4 - 4 floating point values
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Object">
            <summary>
            Any type of object like: actor, actor element etc.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Rotation">
            <summary>
            3D rotation transform based on 4 component quaternion
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Transform">
            <summary>
            Full 3D transform: position, rotation and scale
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Box">
            <summary>
            Axis aligned bounding box(two Vector3s)
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.ImpulseSecondary">
            <summary>
            Digital signal (secondary)
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Scalar">
            <summary>
            Bool, Int, Float
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Vector">
            <summary>
            Vector2, Vector3, Vector4
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.Variable">
            <summary>
            All variables
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ConnectionType.All">
            <summary>
            All possible connections types
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.GroupArchetype">
            <summary>
            Surface nodes group archetype description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.GroupID">
            <summary>
            Unique group ID.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Name">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Color">
            <summary>
            Primary color for the group nodes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Tag">
            <summary>
            The custom tag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.GroupArchetype.Archetypes">
            <summary>
            All nodes descriptions.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.GUI.VisjectContextNavigationButton">
            <summary>
            A <see cref="T:FlaxEditor.Surface.VisjectSurface"/> context navigation bar button. Allows to change the current context and view the context path.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Button" />
        </member>
        <member name="P:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.Surface">
            <summary>
            Gets the parent surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.Context">
            <summary>
            Gets the target context.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEditor.Surface.ISurfaceContext,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.GUI.VisjectContextNavigationButton"/> class.
            </summary>
            <param name="surface">The parent surface.</param>
            <param name="context">The target context.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.GUI.VisjectContextNavigationButton.OnClick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.IParametersDependantNode">
            <summary>
            Interface for surface nodes that depend on surface parameters collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IParametersDependantNode.OnParamCreated(FlaxEditor.Surface.SurfaceParameter)">
            <summary>
            On new parameter created
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:FlaxEditor.Surface.IParametersDependantNode.OnParamRenamed(FlaxEditor.Surface.SurfaceParameter)">
            <summary>
            On new parameter renamed
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:FlaxEditor.Surface.IParametersDependantNode.OnParamDeleted(FlaxEditor.Surface.SurfaceParameter)">
            <summary>
            On new parameter deleted
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="T:FlaxEditor.Surface.IVisjectSurfaceOwner">
            <summary>
            Interface for Visject Surface parent objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IVisjectSurfaceOwner.OnSurfaceEditedChanged">
            <summary>
            On surface edited state gets changed
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IVisjectSurfaceOwner.OnSurfaceGraphEdited">
            <summary>
            On surface graph edited
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IVisjectSurfaceOwner.OnSurfaceClose">
            <summary>
            Called when surface wants to close the tool window (due to user interaction or sth else).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.MaterialSurface">
            <summary>
            The Visject Surface implementation for the materials editor.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.VisjectSurface" />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.CanSpawnNodeType(FlaxEditor.Surface.NodeArchetype)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.MaterialSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.NodeArchetypeTryParseHandler">
            <summary>
            Delegate for node data parsing.
            </summary>
            <param name="filterText">The filter text.</param>
            <param name="data">The node data.</param>
            <returns>True if requests has been parsed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.NodeArchetype">
            <summary>
            Surface node archetype description.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeArchetype.CreateCustomNodeFunc">
            <summary>
            Create custom node callback.
            </summary>
            <param name="id">The node identifier.</param>
            <param name="context">The context.</param>
            <param name="nodeArch">The node archetype.</param>
            <param name="groupArch">The node parent group archetype.</param>
            <returns>The created node object.</returns>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.TypeID">
            <summary>
            Unique node type ID within a single group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Create">
            <summary>
            Custom create function (may be null).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Size">
            <summary>
            Default initial size of the node.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Flags">
            <summary>
            Custom set of flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Title">
            <summary>
            Title text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Description">
            <summary>
            Short node description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.AlternativeTitles">
            <summary>
            Alternative node titles.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Tag">
            <summary>
            The custom tag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.DefaultValues">
            <summary>
            Default node values. This array supports types: bool, int, float, Vector2, Vector3, Vector4, Color, Rectangle, Guid, string, Matrix and byte[].
            </summary>
            <remarks>
            The limit for the node values array is 32 (must match GRAPH_NODE_MAX_VALUES in C++ engine core).
            </remarks>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.DefaultType">
            <summary>
            Default connections type for dependant boxes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.IndependentBoxes">
            <summary>
            Array with independent boxes IDs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.DependentBoxes">
            <summary>
            Array with dependent boxes IDs.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.Elements">
            <summary>
            Array with default elements descriptions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeArchetype.TryParseText">
            <summary>
            Tries to parse some text and extract the data from it.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeElementArchetype">
            <summary>
            Surface node element archetype description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Type">
            <summary>
            The element type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Position">
            <summary>
            Default element position in node that has default size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Size">
            <summary>
            The element size for some types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Text">
            <summary>
            Custom text value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.Single">
            <summary>
            True if use single connections (for Input element).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.ValueIndex">
            <summary>
            Index of the node value that is connected with that element.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.BoxID">
            <summary>
            Unique ID of the box in the graph data to link it to this element (Output/Input elements).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementArchetype.ConnectionsType">
            <summary>
            Default connections type for that element (can be set of types).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.NodeElementArchetype.ActualPositionX">
            <summary>
            Gets the actual element position on the x axis.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.NodeElementArchetype.ActualPositionY">
            <summary>
            Gets the actual element position on the y axis.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.NodeElementArchetype.ActualPosition">
            <summary>
            Gets the actual element position.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeElementArchetype.Factory">
            <summary>
            Node element archetypes factory object. Helps to build surface nodes archetypes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Input(System.Int32,System.String,System.Boolean,FlaxEditor.Surface.ConnectionType,System.Int32,System.Int32)">
            <summary>
            Creates new Input box element description.
            </summary>
            <param name="ylevel">The y level.</param>
            <param name="text">The text.</param>
            <param name="single">If true then box can have only one connection, otherwise multiple connections are allowed.</param>
            <param name="type">The type.</param>
            <param name="id">The unique box identifier.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Output(System.Int32,System.String,FlaxEditor.Surface.ConnectionType,System.Int32)">
            <summary>
            Creates new Output box element description.
            </summary>
            <param name="ylevel">The y level.</param>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
            <param name="id">The unique box identifier.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Bool(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Bool value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Integer(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates new Integer value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="component">The index of the component to edit. For vectors this can be set to modify only single component of it. Eg. for vec2 value component set to 1 will edit only Y component. Default value -1 will be used to edit whole value.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Float(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates new Float value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="component">The index of the component to edit. For vectors this can be set to modify only single component of it. Eg. for vec2 value component set to 1 will edit only Y component. Default value -1 will be used to edit whole value.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_X(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Vector2 value element description to edit X component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_Y(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Vector value element description to edit Y component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space). The actual position is offset by 1 times <see cref="F:FlaxEditor.Surface.Constants.LayoutOffsetY"/> to make it easier to arrange.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_Z(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Vector value element description to edit Z component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space). The actual position is offset by 2 times <see cref="F:FlaxEditor.Surface.Constants.LayoutOffsetY"/> to make it easier to arrange.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Vector_W(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Vector value element description to edit W component.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space). The actual position is offset by 3 times <see cref="F:FlaxEditor.Surface.Constants.LayoutOffsetY"/> to make it easier to arrange.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Color(System.Single,System.Single,System.Int32)">
            <summary>
            Creates new Color value element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Asset(System.Single,System.Single,System.Int32,FlaxEngine.ContentDomain)">
            <summary>
            Creates new Asset picker element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="domain">The allowed assets domain to use.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.ComboBox(System.Single,System.Single,System.Single,System.Int32,System.String[])">
            <summary>
            Creates new Combo Box element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="values">The set of combo box items to present. May be nul if provided at runtime.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.ComboBox(System.Single,System.Single,System.Int32,System.Int32,System.Type)">
            <summary>
            Creates new Combo Box element description for enum editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="enumType">The enum type to present all it's values. Important: first value should be 0 and so on.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.Text(System.Single,System.Single,System.String)">
            <summary>
            Creates new Text element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="text">The text to show.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.TextBox(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates new TextBox element description.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <returns>The archetype.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeElementArchetype.Factory.SkeletonNodeSelect(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates new Skeleton Node Select element description for enum editing.
            </summary>
            <param name="x">The x location (in node area space).</param>
            <param name="y">The y location (in node area space).</param>
            <param name="width">The width of the element.</param>
            <param name="valueIndex">The index of the node variable linked as the input. Useful to make a physical connection between input box and default value for it.</param>
            <returns>The archetype.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.NodeElementType">
            <summary>
            Surface node element types
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Invalid">
            <summary>
            The invalid element.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Input">
            <summary>
            The input box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Output">
            <summary>
            The output box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.BoolValue">
            <summary>
            The bool value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.IntegerValue">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.FloatValue">
            <summary>
            The float value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.RotationValue">
            <summary>
            The rotation value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.ColorValue">
            <summary>
            The color picker.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.ComboBox">
            <summary>
            The combo box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.Asset">
            <summary>
            The asset picker.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.TextBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeElementType.SkeletonNodeSelect">
            <summary>
            The skeleton node selection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.NodeFactory">
            <summary>
            It's responsible for creating new <see cref="T:FlaxEditor.Surface.SurfaceNode"/> objects.
            It contains collection of <see cref="T:FlaxEditor.Surface.GroupArchetype"/> and allows to plug custom node types as well.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFactory.DefaultGroups">
            <summary>
            The default Visject Node archetype groups collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.NodeFactory.GetArchetype(System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype},System.UInt16,System.UInt16,FlaxEditor.Surface.GroupArchetype@,FlaxEditor.Surface.NodeArchetype@)">
            <summary>
            Gets the archetypes for the node.
            </summary>
            <param name="groups">The group archetypes.</param>
            <param name="groupID">The group identifier.</param>
            <param name="typeID">The type identifier.</param>
            <param name="gArch">The output group archetype.</param>
            <param name="arch">The output node archetype.</param>
            <returns>True if found it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeFactory.CreateNode(System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype},System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,System.UInt16,System.UInt16)">
            <summary>
            Creates the node.
            </summary>
            <param name="groups">The group archetypes.</param>
            <param name="id">The node id.</param>
            <param name="context">The context.</param>
            <param name="groupID">The group identifier.</param>
            <param name="typeID">The type identifier.</param>
            <returns>Created node or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.NodeFactory.CreateNode(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.GroupArchetype,FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Creates the node.
            </summary>
            <param name="id">The node id.</param>
            <param name="context">The context.</param>
            <param name="groupArchetype">The group archetype.</param>
            <param name="nodeArchetype">The node archetype.</param>
            <returns>Created node or null if failed.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.NodeFlags">
            <summary>
            Custom node archetype flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.None">
            <summary>
            Nothing at all. Nothing but thieves.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoCloseButton">
            <summary>
            Don't adds a close button.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.UseDependantBoxes">
            <summary>
            Node should use dependant and independent boxes types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoSpawnViaGUI">
            <summary>
            Node cannot be spawned via GUI interface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.MaterialOnly">
            <summary>
            Node only for the materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.VisjectOnly">
            <summary>
            Node only for the scripts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.NoRemove">
            <summary>
            Disable removing that node from the graph.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.NodeFlags.AnimGraphOnly">
            <summary>
            Node only for the animation graphs.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ParameterType">
            <summary>
            Surface parameters types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Bool">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Integer">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Float">
            <summary>
            The floating point value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Vector2">
            <summary>
            The Vector2 value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Vector3">
            <summary>
            The Vector2 value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Vector4">
            <summary>
            The Vector2 value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Color">
            <summary>
            The Vector2 value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Texture">
            <summary>
            The texture id.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.NormalMap">
            <summary>
            The normal map texture id.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.String">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Box">
            <summary>
            The BoundingBox value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Rotation">
            <summary>
            The Quaternion value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Transform">
            <summary>
            The Transform value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Asset">
            <summary>
            The asset id.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Actor">
            <summary>
            The actor id.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Rectangle">
            <summary>
            The Rectangle value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.CubeTexture">
            <summary>
            The cube texture id.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.SceneTexture">
            <summary>
            The scene texture type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.RenderTarget">
            <summary>
            The render target (created from code).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.Matrix">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.RenderTargetArray">
            <summary>
            The render target array (created from code).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.RenderTargetVolume">
            <summary>
            The volume render target (created from code).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.ParameterType.RenderTargetCube">
            <summary>
            The cube render target (created from code).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceComment">
            <summary>
            Visject Surface comment control.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceControl" />
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceComment._isResizing">
            <summary>
            True if sizing tool is in use.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceComment.Title">
            <summary>
            Gets or sets the comment title text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceComment.Color">
            <summary>
            Gets or sets the color of the comment.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEngine.Rectangle@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceComment"/> class.
            </summary>
            <param name="surface">The surface.</param>
            <param name="surfaceArea">The comment bounds.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.IsSelectionIntersecting(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceComment.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceControl">
            <summary>
            Base class for Visject Surface components like nodes or comments. Used to unify various logic parts across different surface elements.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl._mousePosition">
            <summary>
            The mouse position in local control space. Updates by auto.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl._isSelected">
            <summary>
            The is selected flag for element.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceControl.Surface">
            <summary>
            The surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceControl.IsSelected">
            <summary>
            Gets a value indicating whether this control is selected.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.#ctor(FlaxEditor.Surface.VisjectSurfaceContext,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceControl"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="width">The initial width.</param>
            <param name="height">The initial height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEngine.Rectangle@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceControl"/> class.
            </summary>
            <param name="surface">The surface.</param>
            <param name="bounds">The initial bounds.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.CanSelect(FlaxEngine.Vector2@)">
            <summary>
            Determines whether this element can be selected by the mouse at the specified location.
            </summary>
            <param name="location">The mouse location (in surface space).</param>
            <returns><c>true</c> if this instance can be selected by mouse at the specified location; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.IsSelectionIntersecting(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether selection rectangle is intersecting with the surface control area that can be selected.
            </summary>
            <param name="selectionRect">The selection rectangle (in surface space, not the control space).</param>
            <returns><c>true</c> if the selection rectangle is intersecting with the selectable parts of the control ; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnLoaded">
            <summary>
            Called when control gets loaded and added to surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnSurfaceLoaded">
            <summary>
            Called when surface gets loaded and nodes boxes are connected.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnSpawned">
            <summary>
            Called when after adding the control to the surface after user spawn (eg. add comment, add new node, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.UpdateRectangles">
            <summary>
            Updates the cached rectangles on control size change.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.SetScaleInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceControl.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceMeta">
            <summary>
            Metadata container.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceMeta.Entry">
            <summary>
            Metadata entry
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceMeta.Entry.TypeID">
            <summary>
            The type identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceMeta.Entry.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceMeta.Entries">
            <summary>
            All meta entries
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.Load(System.UInt32,System.IO.BinaryReader)">
            <summary>
            Load from the stream
            </summary>
            <param name="engineBuild">Saved Visject Surface engine build number code</param>
            <param name="stream">Stream</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.Save(System.IO.BinaryWriter)">
            <summary>
            Save to the stream
            </summary>
            <param name="stream">Stream</param>
            <returns>True if cannot save data</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.Release">
            <summary>
            Releases meta data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.GetEntry(System.Int32)">
            <summary>
            Gets the entry.
            </summary>
            <param name="typeID">Entry type ID</param>
            <returns>Entry</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceMeta.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Adds new entry.
            </summary>
            <param name="typeID">Type ID</param>
            <param name="data">Bytes to set</param>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceNode">
            <summary>
            Visject Surface node control.
            </summary>
            <seealso cref="T:FlaxEditor.Surface.SurfaceControl" />
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._headerRect">
            <summary>
            The header rectangle (local space).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._closeButtonRect">
            <summary>
            The close button rectangle (local space).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode._footerRect">
            <summary>
            The footer rectangle (local space).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Archetype">
            <summary>
            The node archetype.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.GroupArchetype">
            <summary>
            The group archetype.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Elements">
            <summary>
            The elements collection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Values">
            <summary>
            The values (node parameters in layout based on <see cref="F:FlaxEditor.Surface.NodeArchetype.DefaultValues"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.Title">
            <summary>
            Gets or sets the node title text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.ID">
            <summary>
            The identifier of the node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.Type">
            <summary>
            Gets the type (packed GroupID (higher 16 bits) and TypeID (lower 16 bits)).
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceNode.Meta">
            <summary>
            The metadata.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.#ctor(System.UInt32,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.NodeArchetype,FlaxEditor.Surface.GroupArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceNode"/> class.
            </summary>
            <param name="id">The node id.</param>
            <param name="context">The surface context.</param>
            <param name="nodeArch">The node archetype.</param>
            <param name="groupArch">The group archetype.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.Resize(System.Single,System.Single)">
            <summary>
            Resizes the node area.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.RemoveConnections">
            <summary>
            Removes all connections from and to that node.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasDependentBoxes">
            <summary>
            Gets a value indicating whether this node uses dependent boxes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasIndependentBoxes">
            <summary>
            Gets a value indicating whether this node uses independent boxes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNode.HasDependentBoxesSetup">
            <summary>
            Gets a value indicating whether this node has dependent boxes with assigned valid types. Otherwise any box has no dependent type assigned.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.UpdateBoxesTypes">
            <summary>
            Updates dependant/independent boxes types.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.GetBox(System.Int32)">
            <summary>
            Tries to get box with given ID.
            </summary>
            <param name="id">The box id.</param>
            <returns>Box or null if cannot find.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.TryGetBox(System.Int32,FlaxEditor.Surface.Elements.Box@)">
            <summary>
            Tries to get box with given ID.
            </summary>
            <param name="id">The box id.</param>
            <param name="result">Box or null if cannot find.</param>
            <returns>True fi box has been found, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.DrawConnections(FlaxEngine.Vector2@)">
            <summary>
            Draws all the connections between surface objects related to this node.
            </summary>
            <param name="mousePosition">The current mouse position (in surface-space).</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.CanSelect(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnSurfaceLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of the node parameter.
            </summary>
            <param name="index">The value index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.ConnectionTick(FlaxEditor.Surface.Elements.Box)">
            <summary>
            Updates the given box connection.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.UpdateRectangles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNode.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.ISurfaceNodeElement">
            <summary>
            Base interface for elements that can be added to the <see cref="T:FlaxEditor.Surface.SurfaceNode"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceNodeElement.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
            <value>
            The parent node.
            </value>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceNodeElement.Archetype">
            <summary>
            Gets the element archetype.
            </summary>
            <value>
            The archetype.
            </value>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceNodeElementControl">
            <summary>
            Base class for <see cref="T:FlaxEditor.Surface.SurfaceNode"/> element controls. Implements <see cref="T:FlaxEditor.Surface.ISurfaceNodeElement"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
            <seealso cref="T:FlaxEditor.Surface.ISurfaceNodeElement" />
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNodeElementControl.ParentNode">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNodeElementControl.Archetype">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.SurfaceNodeElementControl.Surface">
            <summary>
            Gets the surface.
            </summary>
            <value>
            The surface.
            </value>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNodeElementControl.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceNodeElementControl"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="archetype">The element archetype.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="canFocus">if set to <c>true</c> can focus this control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceNodeElementControl.#ctor(FlaxEditor.Surface.SurfaceNode,FlaxEditor.Surface.NodeElementArchetype,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.SurfaceNodeElementControl"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="archetype">The element archetype.</param>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
            <param name="canFocus">if set to <c>true</c> can focus this control.</param>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceParameter">
            <summary>
            Represents parameter in the Surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.ID">
            <summary>
            Parameter unique ID
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsPublic">
            <summary>
            True if is exposed outside
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsStatic">
            <summary>
            True if cannot edit value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsUIVisible">
            <summary>
            True if can see via UI
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.IsUIEditable">
            <summary>
            True if can edit via UI
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceParameter.Meta">
            <summary>
            The metadata.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceParameter.Create(FlaxEditor.Surface.ParameterType)">
            <summary>
            Creates the new parameter of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The created parameter.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceRootControl">
            <summary>
            The surface root control used to navigate around the view (scale and move it).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.DrawComments">
            <summary>
            Draws the comments. Render them before other controls to prevent foreground override.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceRootControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceStyle">
            <summary>
            Describes GUI style used by the surface.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceStyle.ColorsData">
            <summary>
            Description with the colors used by the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Connecting">
            <summary>
            The connecting nodes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.ConnectingValid">
            <summary>
            The connecting nodes color (for valid connection).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.ConnectingInvalid">
            <summary>
            The connecting nodes color (for invalid connection).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Impulse">
            <summary>
            The impulse boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Bool">
            <summary>
            The boolean boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Integer">
            <summary>
            The integer boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Float">
            <summary>
            The floating point boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Vector">
            <summary>
            The vector boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.String">
            <summary>
            The string boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Object">
            <summary>
            The object boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Rotation">
            <summary>
            The rotation boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Transform">
            <summary>
            The transform boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Box">
            <summary>
            The box boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.ImpulseSecondary">
            <summary>
            The impulse (secondary) boxes color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.ColorsData.Default">
            <summary>
            The default boxes color.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.SurfaceStyle.IconsData">
            <summary>
            Descriptions for icons used by the surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.BoxOpen">
            <summary>
            Icon for boxes without connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.BoxClose">
            <summary>
            Icon for boxes with connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.ArrowOpen">
            <summary>
            Icon for impulse boxes without connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.IconsData.ArrowClose">
            <summary>
            Icon for impulse boxes with connections.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.Colors">
            <summary>
            The colors.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.Icons">
            <summary>
            The icons.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.Background">
            <summary>
            The background image (tiled).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceStyle.GetConnectionColor(FlaxEditor.Surface.ConnectionType,FlaxEngine.Color@)">
            <summary>
            Gets the color for the connection.
            </summary>
            <param name="type">The connection type.</param>
            <param name="color">The color.</param>
        </member>
        <member name="F:FlaxEditor.Surface.SurfaceStyle.CreateStyleHandler">
            <summary>
             Function used to create style for the given surface type. Can be overriden to provide some customization via user plugin.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.SurfaceStyle.CreateDefault(FlaxEditor.Editor)">
            <summary>
            Creates the default style.
            </summary>
            <param name="editor">The editor.</param>
            <returns>Created style.</returns>
        </member>
        <member name="T:FlaxEditor.Surface.TransformCoordinateSystem">
            <summary>
            Vector transformation coordinate systems.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.World">
            <summary>
            The world space. It's absolute world space coordinate system.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.Tangent">
            <summary>
            The tangent space. It's relative to the surface (tangent frame defined by normal, tangent and bitangent vectors).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.View">
            <summary>
            The view space. It's relative to the current rendered viewport orientation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.TransformCoordinateSystem.Local">
            <summary>
            The local space. It's relative to the rendered object (aka object space).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.IConnectionInstigator">
            <summary>
            The Visject Surface connection creation handler object.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.IConnectionInstigator.ConnectionOrigin">
            <summary>
            Gets the connection origin point (in surface node space).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.AreConnected(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Determines whether this surface object is connected with the specified other object.
            </summary>
            <param name="other">The other object to check.</param>
            <returns><c>true</c> if connection between given two objects exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.CanConnectWith(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Determines whether this surface object can be connected with the specified other object.
            </summary>
            <param name="other">The other object to check.</param>
            <returns><c>true</c> if connection can be created; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.DrawConnectingLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Color@)">
            <summary>
            Draws the connecting line.
            </summary>
            <param name="startPos">The start position.</param>
            <param name="endPos">The end position.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:FlaxEditor.Surface.IConnectionInstigator.Connect(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Created the new connection with the specified other object.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface">
            <summary>
            Visject Surface control for editing Nodes Graph.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
            <seealso cref="T:FlaxEditor.Surface.IParametersDependantNode" />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CanUseDirectCast(FlaxEditor.Surface.ConnectionType,FlaxEditor.Surface.ConnectionType)">
            <summary>
            Checks if can use direct conversion from one type to another.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <returns>True if can use direct conversion, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ConnectingStart(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Begins connecting surface objects action.
            </summary>
            <param name="instigator">The connection instigator (eg. start box).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ConnectingOver(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Callback for surface objects connections instigators to indicate mouse over control event (used to draw preview connections).
            </summary>
            <param name="instigator">The instigator.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ConnectingEnd(FlaxEditor.Surface.IConnectionInstigator)">
            <summary>
            Ends connecting surface objects action.
            </summary>
            <param name="end">The end object (eg. end box).</param>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.ContextStack">
            <summary>
            The surface context stack.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.RootContext">
            <summary>
            Gets the root surface context.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Context">
            <summary>
            Gets the active surface context.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.ContextChanged">
            <summary>
            Occurs when context gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CreateContext(FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Creates the Visject surface context for the given surface data source context.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OpenContext(FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Opens the child context of the current context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CloseContext">
            <summary>
            Closes the last opened context (the current one).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.RemoveContext(FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Removes the context from the surface and any related cached data.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ChangeContext(FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Changes the current opened context to the given one. Used as a navigation method.
            </summary>
            <param name="context">The target context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnContextChanged">
            <summary>
            Called when context gets changed. Updates current context and UI. Updates the current context based on the first element in teh stack.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsPrimaryMenuOpened">
            <summary>
            Gets a value indicating whether the primary surface context menu is being opened (eg. user is adding nodes).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.SetPrimaryMenu(FlaxEditor.Surface.ContextMenu.VisjectCM)">
            <summary>
            Sets the primary menu for the Visject nodes spawning. Can be overriden per surface or surface context. Set to null to restore the default menu.
            </summary>
            <param name="menu">The menu to override with (use null if restore the default value).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CreateDefaultPrimaryMenu">
            <summary>
            Creates the default primary context menu for the surface. Override this to provide the custom implementation.
            </summary>
            <remarks>This method is being called in <see cref="M:FlaxEditor.Surface.VisjectSurface.ShowPrimaryMenu(FlaxEngine.Vector2)"/> on first time when need to show the default menu (no overrides specified for the surface context).</remarks>
            <returns>The created menu.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowPrimaryMenu(FlaxEngine.Vector2)">
            <summary>
            Shows the primary menu.
            </summary>
            <param name="location">The location in the Surface Space.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowSecondaryCM(FlaxEngine.Vector2)">
            <summary>
            Shows the secondary context menu.
            </summary>
            <param name="location">The location in the Surface Space.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnPrimaryMenuButtonClick(FlaxEditor.Surface.ContextMenu.VisjectCMItem,FlaxEditor.Surface.Elements.Box)">
            <summary>
            Handles Visject CM item click event by spawning the selected item.
            </summary>
            <param name="visjectCmItem">The item.</param>
            <param name="selectedBox">The selected box.</param>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._rootControl">
            <summary>
            The surface control.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._leftMouseDown">
            <summary>
            The left mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._rightMouseDown">
            <summary>
            The right mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._isCommentCreateKeyDown">
            <summary>
            The flag for keyboard key down for comment creating.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._leftMouseDownPos">
            <summary>
            The left mouse down position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._rightMouseDownPos">
            <summary>
            The right mouse down position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._mousePos">
            <summary>
            The mouse position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._mouseMoveAmount">
            <summary>
            The mouse movement amount.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._isMovingSelection">
            <summary>
            The is moving selection flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._movingSelectionViewPos">
            <summary>
            The moving selection view position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._connectionInstigator">
            <summary>
            The connection start.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._lastInstigatorUnderMouse">
            <summary>
            The last connection instigator under mouse.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._cmPrimaryMenu">
            <summary>
            The primary context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._cmSecondaryMenu">
            <summary>
            The secondary context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface._cmStartPos">
            <summary>
            The context menu start position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.Owner">
            <summary>
            The surface owner.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.Style">
            <summary>
            The style used by the surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsEdited">
            <summary>
            Gets a value indicating whether surface is edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.SurfaceRoot">
            <summary>
            Gets the current context surface root control (nodes and all other surface elements container).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.ViewPosition">
            <summary>
            Gets or sets the view position (upper left corner of the view) in the surface space.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.ViewCenterPosition">
            <summary>
            Gets or sets the view center position (middle point of the view) in the surface space.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.ViewScale">
            <summary>
            Gets or sets the view scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsSelecting">
            <summary>
            Gets a value indicating whether user is selecting nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsMovingSelection">
            <summary>
            Gets a value indicating whether user is moving selected nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsConnecting">
            <summary>
            Gets a value indicating whether user is connecting nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.IsCreatingComment">
            <summary>
            Gets a value indicating whether user is creating comment.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.HasNodesSelection">
            <summary>
            Returns true if any node is selected by the user (one or more).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.SelectedNodes">
            <summary>
            Gets the list of the selected nodes.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.SelectedControls">
            <summary>
            Gets the list of the selected controls (comments and nodes).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Comments">
            <summary>
            Gets the list of the surface comments.
            </summary>
            <remarks>
            Don't call it too often. It does memory allocation and iterates over the surface controls to find comments in the graph.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Nodes">
            <summary>
            The current surface context nodes collection. Read-only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeArchetypes">
            <summary>
            The surface node descriptors collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.#ctor(FlaxEditor.Surface.IVisjectSurfaceOwner,System.Action,FlaxEditor.Surface.SurfaceStyle,System.Collections.Generic.List{FlaxEditor.Surface.GroupArchetype})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.VisjectSurface"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="onSave">The save action called when user wants to save the surface.</param>
            <param name="style">The custom surface style. Use null to create the default style.</param>
            <param name="groups">The custom surface node types. Pass null to use the default nodes set.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetCustomNodes">
            <summary>
            Gets the custom nodes group archetype with custom nodes archetypes. May be null if no custom nodes in use.
            </summary>
            <returns>The custom nodes or null if no used.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.AddCustomNodes(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.NodeArchetype})">
            <summary>
            Adds the custom nodes archetypes to the surface (user can spawn them and surface can deserialize).
            </summary>
            <remarks>Custom nodes has to have a node logic typename in DefaultValues[0] and group name in DefaultValues[1].</remarks>
            <param name="archetypes">The archetypes.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.UpdateNavigationBar(FlaxEditor.GUI.NavigationBar,FlaxEditor.GUI.ToolStrip,System.Boolean)">
            <summary>
            Updates the navigation bar of the toolstrip from window that uses this surface. Updates the navigation bar panel buttons to match the current view path.
            </summary>
            <param name="navigationBar">The navigation bar to update.</param>
            <param name="toolStrip">The toolstrip to use as layout reference.</param>
            <param name="hideIfRoot">True if skip showing nav button if the current context is the root location (user has no option to change context).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CanSpawnNodeType(FlaxEditor.Surface.NodeArchetype)">
            <summary>
            Determines whether the specified node archetype can be spawned into the surface.
            </summary>
            <param name="nodeArchetype">The node archetype.</param>
            <returns>True if can spawn this node archetype, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowWholeGraph">
            <summary>
            Shows the whole graph by changing the view scale and the position.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ShowArea(FlaxEngine.Rectangle)">
            <summary>
            Shows the given surface area by changing the view scale and the position.
            </summary>
            <param name="areaRect">The area rectangle.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.MarkAsEdited(System.Boolean)">
            <summary>
            Mark surface as edited.
            </summary>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.SelectAll">
            <summary>
            Selects all the nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.AddToSelection(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Adds the specified control to the selection.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Select(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Selects the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Select(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.SurfaceControl})">
            <summary>
            Selects the specified controls collection.
            </summary>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Deselect(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Deselects the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CommentSelection">
            <summary>
            Creates the comment around the selected nodes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Delete(System.Collections.Generic.IEnumerable{FlaxEditor.Surface.SurfaceControl})">
            <summary>
            Deletes the specified collection of the controls.
            </summary>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Delete(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Deletes the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Delete">
            <summary>
            Deletes the selected controls.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.FindNode(System.UInt16,System.UInt16)">
            <summary>
            Finds the node of the given type.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="typeId">The type identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.FindNode(System.Int32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.FindNode(System.UInt32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.DragDropEventArgs">
            <summary>
            The custom drag drop event arguments.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Drag.DragEventArgs" />
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DragDropEventArgs.SurfaceLocation">
            <summary>
            The surface location.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DragHandlers">
            <summary>
            Drag and drop handlers.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ValidateDragItem(FlaxEditor.Content.AssetItem)">
            <summary>
            Validates the asset items drag operation.
            </summary>
            <param name="assetItem">The asset item.</param>
            <returns>True if can drag that item, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.ValidateDragParameter(System.String)">
            <summary>
            Validates the parameter drag operation.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Tre if can drag that parameter, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.HandleDragDropAssets(System.Collections.Generic.List{FlaxEditor.Content.AssetItem},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <summary>
            Handles the drag drop assets action.
            </summary>
            <param name="objects">The objects.</param>
            <param name="args">The drag drop arguments data.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.HandleDragDropParameters(System.Collections.Generic.List{System.String},FlaxEditor.Surface.VisjectSurface.DragDropEventArgs)">
            <summary>
            Handles the drag drop surface parameters action.
            </summary>
            <param name="objects">The objects.</param>
            <param name="args">The drag drop arguments data.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawBackground">
            <summary>
            Draws the surface background.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawSelection">
            <summary>
            Draws the selection background.
            </summary>
            <remarks>Called only when user is selecting nodes using rectangle tool.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawCommenting">
            <summary>
            Draws the comment creating background.
            </summary>
            <remarks>Called only when user is creating comment using rectangle tool.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawConnections(FlaxEngine.Vector2@)">
            <summary>
            Draws all the connections between surface nodes.
            </summary>
            <param name="mousePosition">The current mouse position (in surface-space).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawConnectingLine">
            <summary>
            Draws the connecting line.
            </summary>
            <remarks>Called only when user is connecting nodes.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.DrawContents">
            <summary>
            Draws the contents of the surface (nodes, connections, comments, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Draw">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CreateCommentKey">
            <summary>
            The create comment key shortcut.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseDown">
            <summary>
            Occurs when handling custom mouse button down event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseUp">
            <summary>
            Occurs when handling custom mouse button up event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseDoubleClick">
            <summary>
            Occurs when handling custom mouse double click event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseMove">
            <summary>
            Occurs when handling custom mouse move event.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurface.CustomMouseWheel">
            <summary>
            Occurs when handling custom mouse wheel event.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetNodeUnderMouse">
            <summary>
            Gets the node under the mouse location.
            </summary>
            <returns>The node or null if no intersection.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetControlUnderMouse">
            <summary>
            Gets the control under the mouse location.
            </summary>
            <returns>The control or null if no intersection.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnKeyUp(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurface.Parameters">
            <summary>
            The collection of the surface parameters.
            </summary>
            <remarks>From the root context only.</remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetParameter(System.Guid)">
            <summary>
            Gets the parameter by the given ID.
            </summary>
            <remarks>From the root context only.</remarks>
            <param name="id">The identifier.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.GetParameter(System.String)">
            <summary>
            Gets the parameter by the given name.
            </summary>
            <remarks>From the root context only.</remarks>
            <param name="name">The name.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnParamCreated(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnParamRenamed(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.OnParamDeleted(FlaxEditor.Surface.SurfaceParameter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Load(System.Byte[])">
            <summary>
            Loads surface from the bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Save">
            <summary>
            Saves the surface graph to bytes.
            </summary>
            <remarks>
            The method calls the <see cref="P:FlaxEditor.Surface.ISurfaceContext.SurfaceData"/> setter to assign the result bytes. Sets null value if failed.
            </remarks>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Copy">
            <summary>
            Copies the selected items.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.BoxDataModel">
            <summary>
            The box data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.BoxDataModel.ID">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.BoxDataModel.NodeIDs">
            <summary>
            The connected nodes ids.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.BoxDataModel.BoxIDs">
            <summary>
            The connected boxes ids.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.NodeDataModel">
            <summary>
            The node data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.GroupID">
            <summary>
            The group identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.TypeID">
            <summary>
            The type identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.ID">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.X">
            <summary>
            The x position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.Y">
            <summary>
            The y position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.Values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.NodeDataModel.Boxes">
            <summary>
            The boxes.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.CommentDataModel">
            <summary>
            Comment data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CommentDataModel.Title">
            <summary>
            The title text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CommentDataModel.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.CommentDataModel.Bounds">
            <summary>
            The bounds of the comment (in surface-space).
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurface.DataModel">
            <summary>
            Copied data model.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DataModel.Nodes">
            <summary>
            The nodes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurface.DataModel.Comments">
            <summary>
            The comments.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.CanPaste">
            <summary>
            Checks if can paste the nodes data from the clipboard.
            </summary>
            <returns>True if can paste data, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Paste">
            <summary>
            Pastes the copied items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Cut">
            <summary>
            Cuts the selected items.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurface.Duplicate">
            <summary>
            Duplicates the selected items.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.ISurfaceContext">
            <summary>
            Defines the context data and logic for the Visject Surface editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceContext.SurfaceName">
            <summary>
            Gets the name of the surface (for UI).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.ISurfaceContext.SurfaceData">
            <summary>
            Gets or sets the surface data. Used to load or save the surface to the data source.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.ISurfaceContext.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <summary>
            Called when Visject Surface context gets created for this surface data source. Can be used to link for some events.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurfaceContext">
            <summary>
            Visject Surface visual representation context. Contains context and deserialized graph data.
            </summary>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurfaceContext.ContextDelegate">
            <summary>
            Visject context delegate type.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:FlaxEditor.Surface.VisjectSurfaceContext.ContextModifiedDelegate">
            <summary>
            Visject context modification delegate type.
            </summary>
            <param name="context">The context.</param>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value). Otherwise just UI elements has been modified (node moved, comment resized).</param>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Parent">
            <summary>
            The parent context. Defines the higher key surface graph context. May be null for the top-level context.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Children">
            <summary>
            The children of this context (loaded and opened in editor only).
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.RootControl">
            <summary>
            The root control for the GUI. Used to navigate around the view (scale and move it). Contains all surface controls including nodes and comments.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Nodes">
            <summary>
            The nodes collection. Read-only.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.Parameters">
            <summary>
            The collection of the surface parameters.
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurfaceContext.Comments">
            <summary>
            Gets the list of the surface comments.
            </summary>
            <remarks>
            Don't call it too often. It does memory allocation and iterates over the surface controls to find comments in the graph.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurfaceContext.IsModified">
            <summary>
            Gets a value indicating whether this context is modified (needs saving and flushing with surface data context source).
            </summary>
        </member>
        <member name="P:FlaxEditor.Surface.VisjectSurfaceContext.Surface">
            <summary>
            Gets the parent Visject surface.
            </summary>
        </member>
        <member name="F:FlaxEditor.Surface.VisjectSurfaceContext.CachedSurfaceMeta">
            <summary>
            The surface meta (cached after opening the context, used to store it back into the data container).
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Saving">
            <summary>
            Occurs when surface starts saving graph to bytes. Can be used to inject or cleanup surface data.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Saved">
            <summary>
            Occurs when surface ends saving graph to bytes. Can be used to inject or cleanup surface data.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Loading">
            <summary>
            Occurs when surface starts loading graph from data.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Loaded">
            <summary>
            Occurs when surface graph gets loaded from data. Can be used to post-process it or perform validation.
            </summary>
        </member>
        <member name="E:FlaxEditor.Surface.VisjectSurfaceContext.Modified">
            <summary>
            Occurs when surface gets modified (graph edited, node moved, comment resized).
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.ISurfaceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.VisjectSurfaceContext"/> class.
            </summary>
            <param name="surface">The Visject surface using this context.</param>
            <param name="parent">The parent context. Defines the higher key surface graph context. May be null for the top-level context.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.#ctor(FlaxEditor.Surface.VisjectSurface,FlaxEditor.Surface.VisjectSurfaceContext,FlaxEditor.Surface.ISurfaceContext,FlaxEditor.Surface.SurfaceRootControl)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Surface.VisjectSurfaceContext"/> class.
            </summary>
            <param name="surface">The Visject surface using this context.</param>
            <param name="parent">The parent context. Defines the higher key surface graph context. May be null for the top-level context.</param>
            <param name="context">The context.</param>
            <param name="rootControl">The surface root control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.FindNode(System.UInt16,System.UInt16)">
            <summary>
            Finds the node of the given type.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="typeId">The type identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.FindNode(System.Int32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.FindNode(System.UInt32)">
            <summary>
            Finds the node with the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found node or null if cannot.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.GetParameter(System.Guid)">
            <summary>
            Gets the parameter by the given ID.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.GetParameter(System.String)">
            <summary>
            Gets the parameter by the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>Found parameter instance or null if missing.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.SpawnComment(FlaxEngine.Rectangle@)">
            <summary>
            Spawns the comment object. Used by the <see cref="M:FlaxEditor.Surface.VisjectSurfaceContext.CreateComment(FlaxEngine.Rectangle@)"/> and loading method. Can be overriden to provide custom comment object implementations.
            </summary>
            <param name="surfaceArea">The surface area.</param>
            <returns>The comment object</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.CreateComment(FlaxEngine.Rectangle@)">
            <summary>
            Creates the comment.
            </summary>
            <param name="surfaceArea">The surface area to create comment.</param>
            <returns>The comment object</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.SpawnNode(System.UInt16,System.UInt16,FlaxEngine.Vector2,System.Object[])">
            <summary>
            Spawns the node.
            </summary>
            <param name="groupID">The group archetype ID.</param>
            <param name="typeID">The node archetype ID.</param>
            <param name="location">The location.</param>
            <param name="customValues">The custom values array. Must match node archetype <see cref="F:FlaxEditor.Surface.NodeArchetype.DefaultValues"/> size. Pass null to use default values.</param>
            <returns>Created node.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.SpawnNode(FlaxEditor.Surface.GroupArchetype,FlaxEditor.Surface.NodeArchetype,FlaxEngine.Vector2,System.Object[])">
            <summary>
            Spawns the node.
            </summary>
            <param name="groupArchetype">The group archetype.</param>
            <param name="nodeArchetype">The node archetype.</param>
            <param name="location">The location.</param>
            <param name="customValues">The custom values array. Must match node archetype <see cref="F:FlaxEditor.Surface.NodeArchetype.DefaultValues"/> size. Pass null to use default values.</param>
            <returns>Created node.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.MarkAsModified(System.Boolean)">
            <summary>
            Marks the context as modified and sends the event to the parent context.
            </summary>
            <param name="graphEdited">True if graph has been edited (nodes structure or parameter value). Otherwise just UI elements has been modified (node moved, comment resized).</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.Clear">
            <summary>
            Clears the surface data. Disposed all surface nodes, comments, parameters and more.
            </summary>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.Load">
            <summary>
            Loads the surface from bytes. Clears the surface before and uses context source data as a surface bytes source.
            </summary>
            <remarks>
            Assume this method does not throw exceptions but uses return value as a error code.
            </remarks>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.Save">
            <summary>
            Saves the surface to bytes. Performs also modified child surfaces saving before.
            </summary>
            <remarks>
            Assume this method does not throw exceptions but uses return value as a error code.
            </remarks>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnControlSpawned(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Called when control gets added to the surface as spawn operation (eg. add new comment or add new node).
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnControlLoaded(FlaxEditor.Surface.SurfaceControl)">
            <summary>
            Called when control gets loaded and should be added to the surface. Handles surface nodes initialization.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:FlaxEditor.Surface.VisjectSurfaceContext.OnNodeLoaded(FlaxEditor.Surface.SurfaceNode)">
            <summary>
            Called when node gets loaded and should be added to the surface. Creates node elements from the archetype.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.Brush">
            <summary>
            Foliage painting brush.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.Brush._material">
            <summary>
            The cached material instance for the brush usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.Brush.Size">
            <summary>
            The brush size (in world units). Within this area, the brush will have effect.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Brush.GetBrushMaterial(FlaxEngine.Vector3@,FlaxEngine.Color@,FlaxEngine.Rendering.RenderTarget)">
            <summary>
            Gets the brush material for the terrain chunk rendering. It must have domain set to Terrain. Setup material parameters within this call.
            </summary>
            <param name="position">The world-space brush position.</param>
            <param name="color">The brush position.</param>
            <param name="sceneDepth">The scene depth buffer (used for manual brush pixels clipping with rendered scene).</param>
            <returns>The ready to render material for terrain chunks overlay on top of the terrain.</returns>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditFoliageGizmo">
            <summary>
            Gizmo for editing foliage instances. Managed by the <see cref="T:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.TransformGizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageGizmo.GizmoMode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Foliage.EditFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.EditFoliageGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageGizmo.SelectionCount">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.GetSelectedObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.GetSelectedObjectsBounds(FlaxEngine.BoundingBox@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnApplyTransformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnEndTransforming">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnDuplicate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmo.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode">
            <summary>
            Foliage instances editing mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.Gizmo">
            <summary>
            The foliage painting gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectionOutline">
            <summary>
            The foliage editing selection outline.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectedFoliage">
            <summary>
            Gets the selected foliage actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectedInstanceIndex">
            <summary>
            The selected foliage instance index.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.SelectedInstanceIndexChanged">
            <summary>
            Occurs when selected instance index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageGizmoMode.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline">
            <summary>
            The custom outline for drawing the selected foliage instances outlines.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.SelectionOutline" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline.GizmoMode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline.CanRender">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditFoliageSelectionOutline.DrawSelectionDepth(FlaxEngine.Rendering.GPUContext,FlaxEngine.Rendering.SceneRenderTask,FlaxEngine.Rendering.RenderTarget)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction">
            <summary>
            The foliage heightmap or visibility map editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.#ctor(FlaxEngine.Foliage)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction"/> class.
            </summary>
            <remarks>Use <see cref="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.RecordEnd"/> to finalize foliage data after editing action.</remarks>
            <param name="foliage">The foliage.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.RecordEnd">
            <summary>
            Called when foliage editing ends. Records the `after` state of the actor. Marks foliage actor parent scene edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.Undo.EditFoliageAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditTab">
            <summary>
            Foliage instances editor tab. Allows to pick and edit a single foliage instance properties.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObject">
            <summary>
            The object for foliage settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.Mode">
            <summary>
            The gizmo mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.Foliage">
            <summary>
            The selected foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.InstanceIndex">
            <summary>
            The selected foliage instance index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.ProxyObject.#ctor(FlaxEditor.Tools.Foliage.EditFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObject"/> class.
            </summary>
            <param name="mode">The foliage editing gizmo mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObjectEditor">
            <summary>
            The custom editor for <see cref="T:FlaxEditor.Tools.Foliage.EditTab.ProxyObject"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.ProxyObjectEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.ProxyObjectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.Tab">
            <summary>
            The parent foliage tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.EditTab.Mode">
            <summary>
            The related gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.EditTab.#ctor(FlaxEditor.Tools.Foliage.FoliageTab,FlaxEditor.Tools.Foliage.EditFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.EditTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="mode">The related gizmo mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTab">
            <summary>
            Foliage editing tab. Supports different modes for foliage editing including: spawning, removing, and managing tools.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.Editor">
            <summary>
            The editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliage">
            <summary>
            The cached selected foliage. It's synchronized with <see cref="F:FlaxEditor.Modules.SceneEditingModule.Selection"/>.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageChanged">
            <summary>
            Occurs when selected foliage gets changed (to a different value).
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypeIndexChangedDelegate">
            <summary>
            Delegate signature for selected foliage index change.
            </summary>
            <param name="previousIndex">The index of the previous foliage type.</param>
            <param name="currentIndex">The index of the current foliage type.</param>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypeIndexChanged">
            <summary>
            Occurs when selected foliage type index gets changed.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypesChanged">
            <summary>
            Occurs when selected foliage actors gets modification for foliage types collection (item added or removed). UI uses it to update the layout without manually tracking the collection.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.FoliageTab.SelectedFoliageTypeIndex">
            <summary>
            Gets or sets the index of the selected foliage type.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.FoliageTypes">
            <summary>
            The foliage types tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.Paint">
            <summary>
            The paint tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.Edit">
            <summary>
            The edit tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTab.FoliageTypeModelIdsToPaint">
            <summary>
            The foliage type model asset IDs checked to paint with them by default.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.#ctor(FlaxEngine.Sprite,FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.FoliageTab"/> class.
            </summary>
            <param name="icon">The icon.</param>
            <param name="editor">The editor instance.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.OnSelected">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.UpdateGizmoMode">
            <summary>
            Updates the active viewport gizmo mode based on the current mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTab.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTypesTab">
            <summary>
            Foliage types editor tab. Allows to add, remove or modify foliage instance types defined for the current foliage object.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject">
            <summary>
            The object for foliage type settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.Tab">
            <summary>
            The tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.Foliage">
            <summary>
            The foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.SelectedFoliageTypeIndex">
            <summary>
            The selected foliage instance type index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject.#ctor(FlaxEditor.Tools.Foliage.FoliageTypesTab)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject"/> class.
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObjectEditor">
            <summary>
            The custom editor for <see cref="T:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObject"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObjectEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.ProxyObjectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.FoliageTypesTab.Tab">
            <summary>
            The parent foliage tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.#ctor(FlaxEditor.Tools.Foliage.FoliageTab)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.FoliageTypesTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.FoliageTypesTab.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmo">
            <summary>
            Gizmo for painting with foliage. Managed by the <see cref="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.IsPainting">
            <summary>
            Gets a value indicating whether gizmo tool is painting the foliage.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintStarted">
            <summary>
            Occurs when foliage paint has been started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintEnded">
            <summary>
            Occurs when foliage paint has been ended.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintStart(FlaxEngine.Foliage)">
            <summary>
            Called to start foliage painting
            </summary>
            <param name="foliage">The foliage.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintUpdate(System.Single)">
            <summary>
            Called to update foliage painting logic.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.PaintEnd">
            <summary>
            Called to end foliage painting.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode">
            <summary>
            Foliage painting tool mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.Gizmo">
            <summary>
            The foliage painting gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CurrentBrush">
            <summary>
            Gets the current brush.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorPosition">
            <summary>
            The last valid cursor position of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorNormal">
            <summary>
            The last valid cursor hit point normal vector of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.HasValidHit">
            <summary>
            Flag used to indicate whenever last cursor position of the brush is valid.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.SelectedFoliage">
            <summary>
            Gets the selected foliage actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorBrushBounds">
            <summary>
            Gets the world bounds of the brush located at the current cursor position (defined by <see cref="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.CursorPosition"/>). Valid only if <see cref="P:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.HasValidHit"/> is set to true.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.ClearCursor">
            <summary>
            Clears the cursor location information cached within the gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode.SetCursor(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Sets the cursor location in the world space. Updates the brush location and cached affected chunks.
            </summary>
            <param name="hitPosition">The cursor hit location on the selected foliage.</param>
            <param name="hitNormal">The cursor hit location normal vector fot he surface.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintTab">
            <summary>
            Foliage painting tab. Allows to add or remove foliage instances defined for the current foliage object.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject">
            <summary>
            The object for foliage painting settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject.Foliage">
            <summary>
            The foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject.SelectedFoliageTypeIndex">
            <summary>
            The selected foliage instance type index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject.#ctor(FlaxEditor.Tools.Foliage.PaintTab,FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject"/> class.
            </summary>
            <param name="tab">The tab.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObjectEditor">
            <summary>
            The custom editor for <see cref="T:FlaxEditor.Tools.Foliage.PaintTab.ProxyObject"/>.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.Editors.GenericEditor" />
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintTab.ProxyObjectEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Tools.Foliage.PaintTab.Tab">
            <summary>
            The parent foliage tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Foliage.PaintTab.#ctor(FlaxEditor.Tools.Foliage.FoliageTab,FlaxEditor.Tools.Foliage.PaintFoliageGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Foliage.PaintTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="mode">The gizmo mode.</param>
        </member>
        <member name="T:FlaxEditor.Tools.PerlinNoise">
            <summary>
            Helper class for Perlin Noise generation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.PerlinNoise.Base">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.PerlinNoise.NoiseScale">
            <summary>
            The noise scale parameter.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.PerlinNoise.NoiseAmount">
            <summary>
            The noise amount parameter.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.PerlinNoise.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.PerlinNoise"/> class.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="scale">The noise scale.</param>
            <param name="amount">The noise amount.</param>
        </member>
        <member name="M:FlaxEditor.Tools.PerlinNoise.Sample(System.Int32,System.Int32)">
            <summary>
            Samples the Perlin Noise at the given location (integer coordinates).
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Brushes.Brush">
            <summary>
            Terrain sculpture or paint brush logic descriptor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.Brush._material">
            <summary>
            The cached material instance for the brush usage.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.Brush.Size">
            <summary>
            The brush size (in world units). Within this area, the brush will have at least some effect.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.Brush.GetBrushMaterial(FlaxEngine.Vector3@,FlaxEngine.Color@)">
            <summary>
            Gets the brush material for the terrain chunk rendering. It must have domain set to Terrain. Setup material parameters within this call.
            </summary>
            <param name="position">The world-space brush position.</param>
            <param name="color">The brush position.</param>
            <returns>The ready to render material for terrain chunks overlay on top of the terrain.</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.Brush.CacheMaterial(System.String)">
            <summary>
            Loads the brush material from the internal location. It's later cached by the object and reused.
            </summary>
            <param name="internalPath">The brush material path (for in-build editor brushes).</param>
            <returns>The brush material instance or null if cannot load or missing.</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.Brush.Sample(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Samples the brush intensity at the specified position.
            </summary>
            <param name="brushPosition">The brush center position (world-space).</param>
            <param name="samplePosition">The sample position (world-space).</param>
            <returns>The sampled value. Normalized to range 0-1 as an intensity to apply.</returns>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Brushes.CircleBrush">
            <summary>
            Terrain brush that has circle shape and uses radial falloff.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Brushes.Brush" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes">
            <summary>
            Circle brush falloff types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Smooth">
            <summary>
            A linear falloff that has been smoothed to round off the sharp edges where the falloff begins and ends.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Linear">
            <summary>
            A sharp linear falloff, without rounded edges.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Spherical">
            <summary>
            A half-ellipsoid-shaped falloff that begins smoothly and ends sharply.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffTypes.Tip">
            <summary>
            A falloff with an abrupt start and a smooth ellipsoidal end. The opposite of the Sphere falloff.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.Falloff">
            <summary>
            The brush falloff that defines the percentage from the brush's extents where the falloff should begin. Essentially, this describes how hard the brush's edges are. A falloff of 0 means the brush will have full effect throughout with hard edges. A falloff of 1 means the brush will only have full effect at its center, and the effect will be reduced throughout its entire area to the edge.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.FalloffType">
            <summary>
            The brush falloff type. Defines circle brush falloff mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.GetBrushMaterial(FlaxEngine.Vector3@,FlaxEngine.Color@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Brushes.CircleBrush.Sample(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.CarveTab">
            <summary>
            Terrain carving tab. Supports different modes for terrain editing including: carving, painting and managing tools.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Editor">
            <summary>
            The editor instance.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.SelectedTerrain">
            <summary>
            The cached selected terrain. It's synchronized with <see cref="F:FlaxEditor.Modules.SceneEditingModule.Selection"/>.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.CarveTab.SelectedTerrainChanged">
            <summary>
            Occurs when selected terrain gets changed (to a different value).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Sculpt">
            <summary>
            The sculpt tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Paint">
            <summary>
            The paint tab;
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.CarveTab.Edit">
            <summary>
            The edit tab;
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CarveTab.#ctor(FlaxEngine.Sprite,FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.CarveTab"/> class.
            </summary>
            <param name="icon">The icon.</param>
            <param name="editor">The editor instance.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CarveTab.OnSelected">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CarveTab.UpdateGizmoMode">
            <summary>
            Updates the active viewport gizmo mode based on the current mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.CreateTerrainDialog">
            <summary>
            Terrain creator dialog. Allows user to specify initial terrain properties perform proper setup.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.CreateTerrainDialog"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.CanCloseWindow(FlaxEngine.ClosingReason)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.CreateTerrainDialog.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTab">
            <summary>
            Carve tab related to terrain editing. Allows to pick a terrain patch and remove it or add new patches. Can be used to modify selected chunk properties.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTab.CarveTab">
            <summary>
            The parent carve tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTab.Gizmo">
            <summary>
            The related edit terrain gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.#ctor(FlaxEditor.Tools.Terrain.CarveTab,FlaxEditor.Tools.Terrain.EditTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.EditTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="gizmo">The related gizmo.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.DeletePatchAction.Dispose">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTab.EditChunkMaterialAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTerrainGizmo">
            <summary>
            Gizmo for picking terrain chunks and patches. Managed by the <see cref="T:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Terrain.EditTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.EditTerrainGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.AddPatchAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode">
            <summary>
            Terrain management and editing tool. 
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes">
            <summary>
            The terrain properties editing modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Edit">
            <summary>
            Terrain chunks editing mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Add">
            <summary>
            Terrain patches adding mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Modes.Remove">
            <summary>
            Terrain patches removing mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Gizmo">
            <summary>
            The terrain editing gizmo.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SelectedPatchCoord">
            <summary>
            The patch coordinates of the last picked patch.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SelectedChunkCoord">
            <summary>
            The chunk coordinates (relative to the patch) of the last picked chunk.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.ModeChanged">
            <summary>
            Occurs when mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.EditMode">
            <summary>
            The active edit mode.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SelectedChunkCoordChanged">
            <summary>
            Occurs when selected patch or/and chunk coord gets changed (after picking by user).
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.EditTerrainGizmoMode.SetSelectedChunk(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Sets the selected chunk coordinates.
            </summary>
            <param name="patchCoord">The patch coord.</param>
            <param name="chunkCoord">The chunk coord.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTab">
            <summary>
            Carve tab related to terrain painting. Allows to modify terrain splatmap using brush.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTab.ProxyObject">
            <summary>
            The object for paint mode settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTab.CarveTab">
            <summary>
            The parent carve tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTab.Gizmo">
            <summary>
            The related sculp terrain gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTab.#ctor(FlaxEditor.Tools.Terrain.CarveTab,FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.PaintTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="gizmo">The related gizmo.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTab.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmo">
            <summary>
            Gizmo for painting terrain. Managed by the <see cref="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.IsPainting">
            <summary>
            Gets a value indicating whether gizmo tool is painting the terrain splatmap.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintStarted">
            <summary>
            Occurs when terrain paint has been started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintEnded">
            <summary>
            Occurs when terrain paint has been ended.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintStart(FlaxEngine.Terrain)">
            <summary>
            Called to start terrain painting
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintUpdate(System.Single)">
            <summary>
            Called to update terrain painting logic.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.PaintEnd">
            <summary>
            Called to end terrain painting.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode">
            <summary>
            Terrain painting tool mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.TerrainLayerNames">
            <summary>
            The terrain layer names.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.Gizmo">
            <summary>
            The terrain painting gizmo.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ModeTypes">
            <summary>
            The tool modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ModeTypes.SingleLayer">
            <summary>
            The single layer mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.BrushTypes">
            <summary>
            The brush types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.BrushTypes.CircleBrush">
            <summary>
            The circle brush.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolModeChanged">
            <summary>
            Occurs when tool mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolModeType">
            <summary>
            Gets the current tool mode (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CurrentMode">
            <summary>
            Gets the current tool mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.SingleLayerMode">
            <summary>
            Gets the single layer mode instance.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolBrushChanged">
            <summary>
            Occurs when tool brush gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ToolBrushType">
            <summary>
            Gets the current tool brush (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CurrentBrush">
            <summary>
            Gets the current brush.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CircleBrush">
            <summary>
            Gets the circle brush instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CursorPosition">
            <summary>
            The last valid cursor position of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.HasValidHit">
            <summary>
            Flag used to indicate whenever last cursor position of the brush is valid.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.PatchLocation">
            <summary>
            Describes the terrain patch link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.PatchLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.PatchesUnderCursor">
            <summary>
            The selected terrain patches collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunkLocation">
            <summary>
            Describes the terrain chunk link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunkLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunkLocation.ChunkCoord">
            <summary>
            The chunk coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ChunksUnderCursor">
            <summary>
            The selected terrain chunk collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.SelectedTerrain">
            <summary>
            Gets the selected terrain actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CursorBrushBounds">
            <summary>
            Gets the world bounds of the brush located at the current cursor position (defined by <see cref="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CursorPosition"/>). Valid only if <see cref="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.HasValidHit"/> is set to true.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.GetSplatmapTempBuffer(System.Int32)">
            <summary>
            Gets the splatmap temporary scratch memory buffer used to modify terrain samples. Allocated memory is unmanaged by GC.
            </summary>
            <param name="size">The minimum buffer size (in bytes).</param>
            <returns>The allocated memory using <see cref="T:System.Runtime.InteropServices.Marshal"/> interface.</returns>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.CurrentEditUndoAction">
            <summary>
            Gets the current edit terrain undo system action. Use it to record the data for the undo restoring after terrain editing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.ClearCursor">
            <summary>
            Clears the cursor location information cached within the gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode.SetCursor(FlaxEngine.Vector3@)">
            <summary>
            Sets the cursor location in the world space. Updates the brush location and cached affected chunks.
            </summary>
            <param name="hitPosition">The cursor hit location on the selected terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.Mode">
            <summary>
            The base class for terran paint tool modes.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.Mode.Options">
            <summary>
            The options container for the terrain editing apply.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Options.Invert">
            <summary>
            If checked, modification apply method should be inverted.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Options.Strength">
            <summary>
            The master strength parameter to apply when editing the terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Options.DeltaTime">
            <summary>
            The delta time (in seconds) for the terrain modification apply. Used to scale the strength. Adjusted to handle low-FPS.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.Strength">
            <summary>
            The tool strength (normalized to range 0-1). Defines the intensity of the paint operation to make it stronger or mre subtle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Paint.Mode.SupportsNegativeApply">
            <summary>
            Gets a value indicating whether this mode supports negative apply for terrain modification.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Paint.Mode.ActiveSplatmapIndex">
            <summary>
            Gets the index of the active splatmap texture to modify by the tool. It must be equal or higher than zero bu less than <see cref="F:FlaxEngine.Terrain.MaxSplatmapsCount"/>.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Paint.Mode.Apply(FlaxEditor.Tools.Terrain.Brushes.Brush,FlaxEditor.Tools.Terrain.Paint.Mode.Options@,FlaxEditor.Tools.Terrain.PaintTerrainGizmoMode,FlaxEngine.Terrain)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="brush">The brush.</param>
            <param name="options">The options.</param>
            <param name="gizmo">The gizmo.</param>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams">
            <summary>
            The mode apply parameters.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Brush">
            <summary>
            The brush.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Gizmo">
            <summary>
            The gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Terrain">
            <summary>
            The terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.ModifiedOffset">
            <summary>
            The modified offset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.ModifiedSize">
            <summary>
            The modified size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.Strength">
            <summary>
            The final calculated strength of the effect to apply (can be negative for inverted terrain modification if <see cref="P:FlaxEditor.Tools.Terrain.Paint.Mode.SupportsNegativeApply"/> is set).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.SplatmapIndex">
            <summary>
            The splatmap texture index.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.TempBuffer">
            <summary>
            The temporary data buffer (for modified data).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.SourceData">
            <summary>
            The source data buffer.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.HeightmapSize">
            <summary>
            The heightmap size (edge).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.PatchPositionLocal">
            <summary>
            The patch position in terrain local-space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams.TerrainWorld">
            <summary>
            The terrain local-to-world matrix.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Paint.Mode.Apply(FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams@)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="p">The parameters to use.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode">
            <summary>
            Paint tool mode. Edits terrain splatmap by painting with the single layer on top of the others.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Paint.Mode" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers">
            <summary>
            The paint layers.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer0">
            <summary>
            The layer 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer1">
            <summary>
            The layer 0.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer2">
            <summary>
            The layer 2.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer3">
            <summary>
            The layer 3.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer4">
            <summary>
            The layer 4.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer5">
            <summary>
            The layer 5.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer6">
            <summary>
            The layer 6.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layers.Layer7">
            <summary>
            The layer 7.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Layer">
            <summary>
            The layer to paint with it.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.ActiveSplatmapIndex">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Paint.SingleLayerMode.Apply(FlaxEditor.Tools.Terrain.Paint.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTab">
            <summary>
            Carve tab related to terrain carving. Allows to modify terrain height and visibility using brush.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTab.ProxyObject">
            <summary>
            The object for sculp mode settings adjusting via Custom Editor.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTab.CarveTab">
            <summary>
            The parent carve tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTab.Gizmo">
            <summary>
            The related sculp terrain gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTab.#ctor(FlaxEditor.Tools.Terrain.CarveTab,FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.SculptTab"/> class.
            </summary>
            <param name="tab">The parent tab.</param>
            <param name="gizmo">The related gizmo.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTab.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmo">
            <summary>
            Gizmo for carving terrain. Managed by the <see cref="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Gizmo.GizmoBase" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Mode">
            <summary>
            The parent mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.IsPainting">
            <summary>
            Gets a value indicating whether gizmo tool is painting the terrain heightmap.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintStarted">
            <summary>
            Occurs when terrain paint has been started.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintEnded">
            <summary>
            Occurs when terrain paint has been ended.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.#ctor(FlaxEditor.Gizmo.IGizmoOwner,FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmo"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Draw(FlaxEngine.Rendering.DrawCallsCollector)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintStart(FlaxEngine.Terrain)">
            <summary>
            Called to start terrain painting
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintUpdate(System.Single)">
            <summary>
            Called to update terrain painting logic.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.PaintEnd">
            <summary>
            Called to end terrain painting.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmo.Pick">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode">
            <summary>
            Terrain carving tool mode.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.Gizmo">
            <summary>
            The terrain carving gizmo.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes">
            <summary>
            The tool modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Sculpt">
            <summary>
            The sculpt mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Smooth">
            <summary>
            The smooth mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Flatten">
            <summary>
            The flatten mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Noise">
            <summary>
            The noise mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ModeTypes.Holes">
            <summary>
            The holes mode.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.BrushTypes">
            <summary>
            The brush types.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.BrushTypes.CircleBrush">
            <summary>
            The circle brush.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolModeChanged">
            <summary>
            Occurs when tool mode gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolModeType">
            <summary>
            Gets the current tool mode (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CurrentMode">
            <summary>
            Gets the current tool mode.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SculptMode">
            <summary>
            Gets the sculpt mode instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SmoothMode">
            <summary>
            Gets the smooth mode instance.
            </summary>
        </member>
        <member name="E:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolBrushChanged">
            <summary>
            Occurs when tool brush gets changed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ToolBrushType">
            <summary>
            Gets the current tool brush (enum).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CurrentBrush">
            <summary>
            Gets the current brush.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CircleBrush">
            <summary>
            Gets the circle brush instance.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CursorPosition">
            <summary>
            The last valid cursor position of the brush (in world space).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.HasValidHit">
            <summary>
            Flag used to indicate whenever last cursor position of the brush is valid.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.PatchLocation">
            <summary>
            Describes the terrain patch link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.PatchLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.PatchesUnderCursor">
            <summary>
            The selected terrain patches collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunkLocation">
            <summary>
            Describes the terrain chunk link.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunkLocation.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunkLocation.ChunkCoord">
            <summary>
            The chunk coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ChunksUnderCursor">
            <summary>
            The selected terrain chunk collection that are under cursor (affected by the brush).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SelectedTerrain">
            <summary>
            Gets the selected terrain actor (see <see cref="T:FlaxEditor.Modules.SceneEditingModule"/>).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CursorBrushBounds">
            <summary>
            Gets the world bounds of the brush located at the current cursor position (defined by <see cref="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CursorPosition"/>). Valid only if <see cref="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.HasValidHit"/> is set to true.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.GetHeightmapTempBuffer(System.Int32)">
            <summary>
            Gets the heightmap temporary scratch memory buffer used to modify terrain samples. Allocated memory is unmanaged by GC.
            </summary>
            <param name="size">The minimum buffer size (in bytes).</param>
            <returns>The allocated memory using <see cref="T:System.Runtime.InteropServices.Marshal"/> interface.</returns>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.CurrentEditUndoAction">
            <summary>
            Gets the current edit terrain undo system action. Use it to record the data for the undo restoring after terrain editing.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.OnDeactivated">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.ClearCursor">
            <summary>
            Clears the cursor location information cached within the gizmo mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode.SetCursor(FlaxEngine.Vector3@)">
            <summary>
            Sets the cursor location in the world space. Updates the brush location and cached affected chunks.
            </summary>
            <param name="hitPosition">The cursor hit location on the selected terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.FlattenMode">
            <summary>
            Sculpt tool mode that flattens the terrain heightmap area affected by brush to the target value.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.FlattenMode.TargetHeight">
            <summary>
            The target terrain height to blend to.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.FlattenMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.HolesMode">
            <summary>
            Terrain holes creating tool mode edits terrain holes mask by changing area affected by brush.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.SupportsNegativeApply">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.EditHoles">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Sculpt.HolesMode"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.HolesMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.Mode">
            <summary>
            The base class for terran sculpt tool modes.
            </summary>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options">
            <summary>
            The options container for the terrain editing apply.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options.Invert">
            <summary>
            If checked, modification apply method should be inverted.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options.Strength">
            <summary>
            The master strength parameter to apply when editing the terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Options.DeltaTime">
            <summary>
            The delta time (in seconds) for the terrain modification apply. Used to scale the strength. Adjusted to handle low-FPS.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.Strength">
            <summary>
            The tool strength (normalized to range 0-1). Defines the intensity of the sculpt operation to make it stronger or mre subtle.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.Mode.SupportsNegativeApply">
            <summary>
            Gets a value indicating whether this mode supports negative apply for terrain modification.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.Mode.EditHoles">
            <summary>
            Gets a value indicating whether this mode modifies the terrain holes mask rather than heightmap.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.Mode.Apply(FlaxEditor.Tools.Terrain.Brushes.Brush,FlaxEditor.Tools.Terrain.Sculpt.Mode.Options@,FlaxEditor.Tools.Terrain.SculptTerrainGizmoMode,FlaxEngine.Terrain)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="brush">The brush.</param>
            <param name="options">The options.</param>
            <param name="gizmo">The gizmo.</param>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams">
            <summary>
            The mode apply parameters.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Brush">
            <summary>
            The brush.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Options">
            <summary>
            The options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Gizmo">
            <summary>
            The gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Terrain">
            <summary>
            The terrain.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.PatchCoord">
            <summary>
            The patch coordinates.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.ModifiedOffset">
            <summary>
            The modified offset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.ModifiedSize">
            <summary>
            The modified size.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.Strength">
            <summary>
            The final calculated strength of the effect to apply (can be negative for inverted terrain modification if <see cref="P:FlaxEditor.Tools.Terrain.Sculpt.Mode.SupportsNegativeApply"/> is set).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.TempBuffer">
            <summary>
            The temporary data buffer (for modified data). Has size of array of floats that has size of heightmap length.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.SourceHeightMap">
            <summary>
            The source heightmap data buffer. May be null if modified is holes mask.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.SourceHolesMask">
            <summary>
            The source holes mask data buffer. May be null if modified is.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.HeightmapSize">
            <summary>
            The heightmap size (edge).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.PatchPositionLocal">
            <summary>
            The patch position in terrain local-space.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams.TerrainWorld">
            <summary>
            The terrain local-to-world matrix.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.Mode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <summary>
            Applies the modification to the terrain.
            </summary>
            <param name="p">The parameters to use.</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode">
            <summary>
            Sculpt tool mode that applies the noise to the terrain heightmap area affected by brush.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.NoiseScale">
            <summary>
            The tool noise scale. Adjusts the noise pattern scale.
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.NoiseAmount">
            <summary>
            The tool noise amount scale. Adjusts the noise amplitude scale.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.SupportsNegativeApply">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.NoiseMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.SculptMode">
            <summary>
            Sculpt tool mode. Edits terrain heightmap by moving area affected by brush up or down.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Sculpt.SculptMode.SupportsNegativeApply">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.SculptMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Sculpt.SmoothMode">
            <summary>
            Sculpt tool mode that smooths the terrain heightmap area affected by brush.
            </summary>
            <seealso cref="T:FlaxEditor.Tools.Terrain.Sculpt.Mode" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Sculpt.SmoothMode.FilterRadius">
            <summary>
            The tool smoothing radius. Defines the size of smoothing kernel, the higher value the more nearby samples is included into normalized sum. Scaled by the brush size.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Sculpt.SmoothMode.Apply(FlaxEditor.Tools.Terrain.Sculpt.Mode.ApplyParams@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction">
            <summary>
            The terrain heightmap editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.#ctor(FlaxEngine.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHeightMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction">
            <summary>
            The terrain heightmap or visibility map editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._terrain">
            <summary>
            The terrain (actor Id).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._heightmapLength">
            <summary>
            The heightmap length (vertex count).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._heightmapDataSize">
            <summary>
            The heightmap data size (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction._patches">
            <summary>
            The terrain patches
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.HasAnyModification">
            <summary>
            Gets a value indicating whether this action has any modification to the terrain (recorded patches changes).
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Terrain">
            <summary>
            Gets the terrain.
            </summary>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.#ctor(FlaxEngine.Terrain,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction"/> class.
            </summary>
            <remarks>Use <see cref="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.AddPatch(FlaxEngine.Int2@,System.Object)"/> to mark new patches to record and <see cref="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.OnEditingEnd"/> to finalize patches data after editing action.</remarks>
            <param name="terrain">The terrain.</param>
            <param name="stride">The data stride (eg. sizeof(float)).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.HashPatch(FlaxEngine.Int2@)">
            <summary>
            Checks if the patch at the given coordinates has been already added.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <returns>True if patch has been added, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.AddPatch(FlaxEngine.Int2@,System.Object)">
            <summary>
            Adds the patch to the action and records its current state.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <param name="tag">The custom argument (per patch).</param>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.OnEditingEnd">
            <summary>
            Called when terrain action editing ends. Record the `after` state of the patches.
            </summary>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <summary>
            Gets the patch data.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <param name="tag">The custom argument (per patch).</param>
            <returns>The data buffer (pointer to unmanaged memory).</returns>
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <summary>
            Sets the patch data.
            </summary>
            <param name="patchCoord">The patch coordinates.</param>
            <param name="data">The patch data.</param>
            <param name="tag">The custom argument (per patch).</param>
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction">
            <summary>
            The terrain splatmap editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.#ctor(FlaxEngine.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainSplatMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction">
            <summary>
            The terrain holes mask editing action that records before and after states to swap between unmodified and modified terrain data.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainMapAction" />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.#ctor(FlaxEngine.Terrain)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction"/> class.
            </summary>
            <param name="terrain">The terrain.</param>
        </member>
        <member name="P:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.GetData(FlaxEngine.Int2@,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Tools.Terrain.Undo.EditTerrainHolesMapAction.SetData(FlaxEngine.Int2@,System.IntPtr,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.AddRemoveScript">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to add/remove <see cref="T:FlaxEngine.Script"/> from the <see cref="T:FlaxEngine.Actor"/>.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Added(FlaxEngine.Script)">
            <summary>
            Creates a new added script undo action.
            </summary>
            <param name="script">The new script.</param>
            <returns>The action.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Add(FlaxEngine.Actor,System.Type)">
            <summary>
            Creates a new add script undo action.
            </summary>
            <param name="parentActor">The parent actor.</param>
            <param name="scriptType">The script type.</param>
            <returns>The action.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Remove(FlaxEngine.Script)">
            <summary>
            Creates a new remove script undo action.
            </summary>
            <param name="script">The script.</param>
            <returns>The action.</returns>
        </member>
        <member name="P:FlaxEditor.Actions.AddRemoveScript.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.AddRemoveScript.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.BreakPrefabLinkAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to break/restore <see cref="T:FlaxEngine.Prefab"/> connection for the collection of <see cref="T:FlaxEngine.Actor"/> and <see cref="T:FlaxEngine.Script"/> objects.
            </summary>
            <remarks>
            This action assumes that all objects in the given actor hierarchy are using the same prefab asset.
            </remarks>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Break(FlaxEngine.Actor)">
            <summary>
            Creates a new undo action that in state for breaking prefab connection.
            </summary>
            <param name="actor">The target actor.</param>
            <returns>The action.</returns>
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Linked(FlaxEngine.Actor)">
            <summary>
            Creates a new undo action that in state for linked prefab connection. Action on perform will undo that.
            </summary>
            <param name="actor">The target actor.</param>
            <returns>The action.</returns>
        </member>
        <member name="P:FlaxEditor.Actions.BreakPrefabLinkAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.BreakPrefabLinkAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.ChangeScriptAction">
            <summary>
            Change <see cref="T:FlaxEngine.Script"/> order or enable/disable undo action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
            <seealso cref="T:FlaxEditor.ISceneEditAction" />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.ChangeOrder(FlaxEngine.Script,System.Int32)">
            <summary>
            Creates new undo action that changes script order in parent actor scripts collection.
            </summary>
            <param name="script">The script to reorder.</param>
            <param name="newOrder">New index.</param>
            <returns>The action (not performed yet).</returns>
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.ChangeEnabled(FlaxEngine.Script,System.Boolean)">
            <summary>
            Creates new undo action that enables/disables script.
            </summary>
            <param name="script">The script to enable or disable.</param>
            <param name="newEnaled">New enable state.</param>
            <returns>The action (not performed yet).</returns>
        </member>
        <member name="P:FlaxEditor.Actions.ChangeScriptAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.ChangeScriptAction.MarkSceneEdited(FlaxEditor.Modules.SceneModule)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Actions.DeleteActorsAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to delete a selection of <see cref="T:FlaxEditor.SceneGraph.ActorNode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.Actions.DeleteActorsAction._nodeParents">
            <summary>
            The node parents.
            </summary>
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.#ctor(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Actions.DeleteActorsAction"/> class.
            </summary>
            <param name="objects">The objects.</param>
            <param name="isInverted">If set to <c>true</c> action will be inverted - instead of delete it will be create actors.</param>
        </member>
        <member name="P:FlaxEditor.Actions.DeleteActorsAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Delete">
            <summary>
            Deletes the objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Actions.DeleteActorsAction.Create">
            <summary>
            Creates the removed objects (from data).
            </summary>
        </member>
        <member name="T:FlaxEditor.Actions.PasteActorsAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to paste a set of <see cref="T:FlaxEditor.SceneGraph.ActorNode"/>.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.Actions.PasteActorsAction._nodeParents">
            <summary>
            The node parents.
            </summary>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.#ctor(System.Byte[],System.Guid[],System.Guid@,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Actions.PasteActorsAction"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="objectIds">The object ids.</param>
            <param name="pasteParent">The paste parent object id.</param>
            <param name="name">The action name.</param>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.LinkBrokenParentReference(FlaxEngine.Actor)">
            <summary>
            Links the broken parent reference (missing parent). By default links the actor to the first scene.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="P:FlaxEditor.Actions.PasteActorsAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Do(System.Collections.Generic.List{FlaxEditor.SceneGraph.ActorNode}@,System.Collections.Generic.List{FlaxEditor.SceneGraph.ActorNode}@)">
            <summary>
            Performs the paste/duplicate action and outputs created objects nodes.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="nodeParents">The node parents.</param>
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Actions.PasteActorsAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.EditorUndo">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Undo"/> customized for the <see cref="T:FlaxEditor.Editor"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Undo" />
        </member>
        <member name="P:FlaxEditor.EditorUndo.Enabled">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.OnAction(FlaxEditor.IUndoAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.OnUndo(FlaxEditor.IUndoAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.OnRedo(FlaxEditor.IUndoAction)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.EditorUndo.CheckSceneEdited(FlaxEditor.IUndoAction)">
            <summary>
            Checks if the any scene has been edited after performing the given action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:FlaxEditor.ISceneEditAction">
            <summary>
            Interface for undo action that can modify scene data (actors, scripts, etc.)
            </summary>
        </member>
        <member name="M:FlaxEditor.ISceneEditAction.MarkSceneEdited(FlaxEditor.Modules.SceneModule)">
            <summary>
            Marks the scenes edited.
            </summary>
            <param name="sceneModule">The scene module.</param>
        </member>
        <member name="T:FlaxEditor.IUndoAction">
            <summary>
            Interface for <see cref="M:FlaxEditor.IUndoAction.Undo"/> actions.
            </summary>
            <seealso cref="T:FlaxEditor.History.IHistoryAction" />
        </member>
        <member name="M:FlaxEditor.IUndoAction.Do">
            <summary>
            Performs this action.
            </summary>
        </member>
        <member name="M:FlaxEditor.IUndoAction.Undo">
            <summary>
            Undoes this action.
            </summary>
        </member>
        <member name="T:FlaxEditor.MultiUndoAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> that contains one or more child actions performed at once. Allows to merge different actions.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="F:FlaxEditor.MultiUndoAction.Actions">
            <summary>
            The child actions.
            </summary>
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.#ctor(FlaxEditor.IUndoAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.MultiUndoAction"/> class.
            </summary>
            <param name="actions">The actions to include within this multi action.</param>
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.#ctor(System.Collections.Generic.IEnumerable{FlaxEditor.IUndoAction},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.MultiUndoAction"/> class.
            </summary>
            <param name="actions">The actions to include within this multi action.</param>
            <param name="actionString">The action string.</param>
        </member>
        <member name="P:FlaxEditor.MultiUndoAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.MultiUndoAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.SelectionChangeAction">
            <summary>
            Objects selection change action.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.SelectionChangeAction.DataStorage">
            <summary>
            The undo data.
            </summary>
        </member>
        <member name="F:FlaxEditor.SelectionChangeAction.DataStorage.Before">
            <summary>
            The 'before' selection.
            </summary>
        </member>
        <member name="F:FlaxEditor.SelectionChangeAction.DataStorage.After">
            <summary>
            The 'after' selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.SelectionChangeAction.#ctor(FlaxEditor.SceneGraph.SceneGraphNode[],FlaxEditor.SceneGraph.SceneGraphNode[],System.Action{FlaxEditor.SceneGraph.SceneGraphNode[]})">
            <summary>
            User selection has changed
            </summary>
            <param name="before">Previously selected nodes</param>
            <param name="after">Newly selected nodes</param>
            <param name="callback">Selection change callback</param>
        </member>
        <member name="P:FlaxEditor.SelectionChangeAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SelectionChangeAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SelectionChangeAction.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.TransformObjectsAction">
            <summary>
            Implementation of <see cref="T:FlaxEditor.IUndoAction"/> used to transform a selection of <see cref="T:FlaxEditor.SceneGraph.SceneGraphNode"/>.
            The same logic could be achieved using <see cref="T:FlaxEditor.UndoMultiBlock"/> but it would be slower.
            Since we use this kind of action very ofter (for <see cref="T:FlaxEditor.Gizmo.TransformGizmo"/> operations) it's better to provide faster implementation.
            </summary>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="T:FlaxEditor.TransformObjectsAction.DataStorage">
            <summary>
            The undo data.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.Scene">
            <summary>
            The scene of the selected objects.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.Selection">
            <summary>
            The selection pool.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.Before">
            <summary>
            The 'before' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.After">
            <summary>
            The 'after' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.BeforeBounds">
            <summary>
            The cached bounding box that contains all selected items in 'before' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.AfterBounds">
            <summary>
            The cached bounding box that contains all selected items in 'after' state.
            </summary>
        </member>
        <member name="F:FlaxEditor.TransformObjectsAction.DataStorage.NavigationDirty">
            <summary>
            True if navigation system has been modified during editing the selected objects (navmesh auto-rebuild is required).
            </summary>
        </member>
        <member name="P:FlaxEditor.TransformObjectsAction.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.TransformObjectsAction.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.TransformObjectsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneTreeNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneTreeNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.SceneTreeNodeConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.UndoActionBase`1">
            <summary>
            Base class for <see cref="T:FlaxEditor.IUndoAction"/> implementations. Stores undo data serialized and preserves references to the game objects.
            </summary>
            <typeparam name="TData">The type of the data. Must have <see cref="T:System.SerializableAttribute"/>.</typeparam>
            <seealso cref="T:FlaxEditor.IUndoAction" />
        </member>
        <member name="P:FlaxEditor.UndoActionBase`1.Data">
            <summary>
            Gets or sets the serialized undo data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:FlaxEditor.UndoActionBase`1.ActionString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.UndoActionBase`1.Do">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.UndoActionBase`1.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.UndoActionBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.UndoBlock">
            <summary>
            Helper class to record undo operations in a block with <c>using</c> keyword.
            <example>
            using(new UndoBlock(undo, obj, "Rename"))
            {
                obj.Name = "super name";
            }
            </example>
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEditor.UndoBlock.#ctor(FlaxEditor.Undo,System.Object,System.String,FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
                Creates new undo object for recording actions with using pattern.
            </summary>
            <param name="undo">The undo/redo object.</param>
            <param name="snapshotInstance">Instance of an object to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="M:FlaxEditor.UndoBlock.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.UndoMultiBlock">
            <summary>
            Helper class to record undo operations in a block with <c>using</c> keyword. Records changes for one or more objects.
            </summary>
            <example>
            using(new UndoMultiBlock(undo, objs, "Rename objects"))
            {
            	foreach(var e in objs)
            		e.Name = "super name";
            }
            </example>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEditor.UndoMultiBlock.#ctor(FlaxEditor.Undo,System.Collections.Generic.IEnumerable{System.Object},System.String,FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
            Creates new undo object for recording actions with using pattern.
            </summary>
            <param name="undo">The undo/redo object.</param>
            <param name="snapshotInstances">Instances of objects to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="M:FlaxEditor.UndoMultiBlock.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.Constants">
            <summary>
            Editor constants and global properties.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.DuplicateScenes">
            <summary>
            Tool helper class used to duplicate loaded scenes (backup them) and restore later. Used for play in-editor functionality.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.DuplicateScenes.HasData">
            <summary>
            Checks if scene data has been gathered.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.DuplicateScenes.WasDirty">
            <summary>
            Gets a value indicating whether any scene was dirty before gathering.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.GatherSceneData">
            <summary>
            Collect loaded scenes data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.CreateScenes">
            <summary>
            Deserialize captured scenes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.DeletedScenes">
            <summary>
            Deletes the creates scenes for the simulation.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.DuplicateScenes.RestoreSceneData">
            <summary>
            Restore captured scene data.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.MemberInfoPath">
            <summary>
            Helper class used to store path made of <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.MemberInfoPath.Entry">
            <summary>
            The path entry.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberInfoPath.Entry.Member">
            <summary>
            The member.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberInfoPath.Entry.Index">
            <summary>
            The array index.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.MemberInfoPath.Entry.Type">
            <summary>
            Gets the member type (field or property type).
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.#ctor(System.Reflection.MemberInfo,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberInfoPath.Entry"/> struct.
            </summary>
            <param name="member">The member.</param>
            <param name="index">The array index.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.GetValue(System.Object)">
            <summary>
            Gets the value. Handles arrays.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.Entry.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.#ctor(System.Reflection.MemberInfo,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberInfoPath"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="index">The array index.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.#ctor(System.Collections.Generic.Stack{FlaxEditor.Utilities.MemberInfoPath.Entry})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberInfoPath"/> class.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:FlaxEditor.Utilities.MemberInfoPath.Path">
            <summary>
            Gets the members path string.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.GetLastMember(System.Object@)">
            <summary>
            Gets the last member (returns it) and the instance (by the ref parameter).
            </summary>
            <param name="instance">The instance. Also contains the result instance for the last member.</param>
            <returns>The last member info.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.GetLastValue(System.Object)">
            <summary>
            Gets the last member value.
            </summary>
            <param name="instance">The top object instance.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberInfoPath.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.ObjectSnapshot">
            <summary>
            Helper class to gather object snapshots and compare them using reflection.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.ObjectSnapshot.ObjectType">
            <summary>
            The object type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.ObjectSnapshot.CaptureSnapshot(System.Object)">
            <summary>
            Captures the snapshot of the object.
            </summary>
            <param name="obj">The object to capture.</param>
            <returns>The object snapshot.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.ObjectSnapshot.Compare(System.Object)">
            <summary>
            Gets a list of MemberComparison values that represent the fields and/or properties
            that differ between the given object and the captured state.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>The collection of modified properties.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.QueryFilterHelper">
            <summary>
            Helper class to filter items based on a input filter query.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Match(System.String,System.String)">
            <summary>
            Matches the specified text with the filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="text">The text.</param>
            <returns>True if text has one or more matches, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Match(System.String,System.String,FlaxEditor.Utilities.QueryFilterHelper.Range[]@)">
            <summary>
            Matches the specified text with the filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="text">The text.</param>
            <param name="matches">The found matches.</param>
            <returns>True if text has one or more matches, otherwise false.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.QueryFilterHelper.Range">
            <summary>
            Describes sub range of the text.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.QueryFilterHelper.Range.StartIndex">
            <summary>
            The start index of the range.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.QueryFilterHelper.Range.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="P:FlaxEditor.Utilities.QueryFilterHelper.Range.EndIndex">
            <summary>
            The end index of the range.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.QueryFilterHelper.Range"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.op_Equality(FlaxEditor.Utilities.QueryFilterHelper.Range,FlaxEditor.Utilities.QueryFilterHelper.Range)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.op_Inequality(FlaxEditor.Utilities.QueryFilterHelper.Range,FlaxEditor.Utilities.QueryFilterHelper.Range)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.Equals(FlaxEditor.Utilities.QueryFilterHelper.Range)">
            <summary>
            Compares this object with the other instanbce.
            </summary>
            <param name="other">The other object.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Utilities.QueryFilterHelper.Range.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.SelectionCache">
            <summary>
            Helper utility object that caches the selection of the editor and can restore it later. Works only for objects of <see cref="T:FlaxEngine.Object"/> type.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.SelectionCache.Cache">
            <summary>
            Caches selection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.SelectionCache.Restore">
            <summary>
            Restores selection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Utilities.Extensions">
            <summary>
            Helper methods used by the editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.Extensions.ReflectiveCompare``1(``0,``0)">
            <summary>
                Gets a list of MemberComparison values that represent the fields and/or properties that differ between the two
                objects.
            </summary>
            <typeparam name="T">Type of object to compare.</typeparam>
            <param name="first">First object to compare.</param>
            <param name="second">Second object to compare.</param>
            <returns>Returns list of <see cref="T:FlaxEditor.Utilities.MemberComparison" /> structs with all different fields and properties.</returns>
        </member>
        <member name="T:FlaxEditor.Utilities.MemberComparison">
            <summary>
                This structure represents the comparison of one member of an object to the corresponding member of another object.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberComparison.MemberPath">
            <summary>
                Members path this Comparison compares.
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberComparison.Value1">
            <summary>
                The value of first object respective member
            </summary>
        </member>
        <member name="F:FlaxEditor.Utilities.MemberComparison.Value2">
            <summary>
                The value of second object respective member
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.#ctor(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberComparison"/> struct.
            </summary>
            <param name="member">The member.</param>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.#ctor(FlaxEditor.Utilities.MemberInfoPath,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Utilities.MemberComparison"/> struct.
            </summary>
            <param name="memberPath">The member path.</param>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.SetMemberValue(System.Object,System.Object)">
            <summary>
            Sets the member value. Handles field or property type.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.MemberComparison.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Utilities.Utils">
            <summary>
            Editor utilities and helper functions.
            </summary>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.FormatBytesCount(System.Int32)">
            <summary>
            Formats the amount of bytes to get a human-readable data size in bytes with abbreviation. Eg. 32 kB
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The formatted amount of bytes.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.FormatBytesCount(System.UInt64)">
            <summary>
            Formats the amount of bytes to get a human-readable data size in bytes with abbreviation. Eg. 32 kB
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The formatted amount of bytes.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.HasInvalidPathChar(System.String)">
            <summary>
            Determines whether the specified path string contains any invalid character.
            </summary>
            <param name="path">The path.</param>
            <returns><c>true</c> if the given string cannot be used as a path because it contains one or more illegal characters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the given type (can be value type or reference type).
            </summary>
            <param name="type">The type.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.IsTypeFromGameScripts(System.Type)">
            <summary>
            Determines whether the given type comes from the game scripts assembly or the editor scripts assembly.
            </summary>
            <param name="type">The type.</param>
            <returns>True if type is from gae or editor assembly, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within the given assembly.
            </summary>
            <param name="assembly">The target assembly to check its types.</param>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within all the loaded assemblies.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within the given assembly.
            </summary>
            <param name="assembly">The target assembly to check its types.</param>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within all the loaded assemblies.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetDerivedTypes(System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Gets all the derived types from the given base type (excluding that type) within all the loaded assemblies.
            </summary>
            <param name="baseType">The base type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
            <param name="checkAssembly">Additional callback used to check if the given assembly is valid. Returns true if search for types in the given assembly, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetTypesWithAttributeDefined(System.Reflection.Assembly,System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Gets all the types that have the given attribute defined within the given assembly.
            </summary>
            <param name="assembly">The target assembly to check its types.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetTypesWithAttributeDefined(System.Type,System.Collections.Generic.List{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Gets all the types that have the given attribute defined within all the loaded assemblies.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <param name="result">The result collection. Elements will be added to it. Clear it before usage.</param>
            <param name="checkFunc">Additional callback used to check if the given type is valid. Returns true if add type, otherwise false.</param>
            <param name="checkAssembly">Additional callback used to check if the given assembly is valid. Returns true if search for types in the given assembly, otherwise false.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetType(System.String)">
            <summary>
            Tries to get the object type from the given full typename. Searches in-build Flax Engine/Editor assemblies and game assemblies.
            </summary>
            <param name="typeName">The full name of the type.</param>
            <returns>The type or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.GetType(FlaxEngine.ContentDomain)">
            <summary>
            Gets the type of the base class for the given content domain. Used by the editor internal layer to convert static enum to the runtime asset type.
            </summary>
            <param name="domain">The domain.</param>
            <returns>The asset object type.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.CreateInstance(System.String)">
            <summary>
            Tries to create object instance of the given full typename. Searches in-build Flax Engine/Editor assemblies and game assemblies.
            </summary>
            <param name="typeName">The full name of the type.</param>
            <returns>The created object or null if failed.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.RemoveFileIfExists(System.String)">
            <summary>
            Removes the file if it exists.
            </summary>
            <param name="file">The file path.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.DirectoryCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies the directory. Supports subdirectories copy with files override option.
            </summary>
            <param name="srcDirectoryPath">The source directory path.</param>
            <param name="dstDirectoryPath">The destination directory path.</param>
            <param name="copySubdirs">If set to <c>true</c> copy subdirectories.</param>
            <param name="overrideFiles">if set to <c>true</c> override existing files.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.ByteArrayToStructure``1(System.Byte[])">
            <summary>
            Converts the raw bytes into the structure. Supported only for structures with simple types and no GC objects.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="bytes">The data bytes.</param>
            <returns>The structure.</returns>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.ByteArrayToStructure``1(System.Byte[],``0@)">
            <summary>
            Converts the raw bytes into the structure. Supported only for structures with simple types and no GC objects.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="bytes">The data bytes.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.Utilities.Utils.StructureToByteArray``1(``0@)">
            <summary>
            Converts the structure to the raw bytes. Supported only for structures with simple types and no GC objects.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="value">The structure value.</param>
            <returns>The bytes array that contains a structure data.</returns>
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.ArcBallCamera">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera"/> that orbits around the fixed location.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera" />
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.ArcBallCamera.OrbitCenter">
            <summary>
            Gets or sets the orbit center.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.ArcBallCamera.OrbitRadius">
            <summary>
            Gets or sets the orbit radius.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Cameras.ArcBallCamera"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Cameras.ArcBallCamera"/> class.
            </summary>
            <param name="orbitCenter">The orbit center.</param>
            <param name="radius">The orbit radius.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.SetView(FlaxEngine.Vector3)">
            <summary>
            Sets view direction.
            </summary>
            <param name="direction">The view direction.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.SetView(FlaxEngine.Quaternion)">
            <summary>
            Sets view orientation.
            </summary>
            <param name="orientation">The view rotation.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ArcBallCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.FPSCamera">
            <summary>
            Implementation of <see cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera"/> that simulated the first-person camera which can fly though the scene.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Cameras.ViewportCamera" />
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.FPSCamera.IsAnimatingMove">
            <summary>
            Gets a value indicating whether this viewport is animating movement.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Cameras.FPSCamera.TargetPoint">
            <summary>
            The target point location. It's used to orbit around it whe user clicks Alt+LMB.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.SetView(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Sets view.
            </summary>
            <param name="position">The view position.</param>
            <param name="direction">The view direction.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.SetView(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Sets view.
            </summary>
            <param name="position">The view position.</param>
            <param name="orientation">The view rotation.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.MoveViewport(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Start animating viewport movement to the target transformation.
            </summary>
            <param name="position">The target position.</param>
            <param name="orientation">The target orientation.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.MoveViewport(FlaxEngine.Transform)">
            <summary>
            Start animating viewport movement to the target transformation.
            </summary>
            <param name="target">The target transform.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.ShowActor(FlaxEngine.Actor)">
            <summary>
            Moves the viewport to visualize the actor.
            </summary>
            <param name="actor">The actor to preview.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.ShowActors(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Moves the viewport to visualize selected actors.
            </summary>
            <param name="actors">The actors to show.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.FPSCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.IViewportCamera">
            <summary>
            The interface for the editor viewport camera controllers. Handles the input logic updates and the preview rendering viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.IViewportCamera.Update(System.Single)">
            <summary>
            Updates the camera.
            </summary>
            <param name="deltaTime">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.IViewportCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <summary>
            Updates the view.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
            <param name="moveDelta">The move delta (scaled).</param>
            <param name="mouseDelta">The mouse delta (scaled).</param>
            <param name="centerMouse">True if center mouse after the update.</param>
        </member>
        <member name="T:FlaxEditor.Viewport.Cameras.ViewportCamera">
            <summary>
            Base class for <see cref="T:FlaxEditor.Viewport.EditorViewport"/> view controllers.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Cameras.IViewportCamera" />
        </member>
        <member name="P:FlaxEditor.Viewport.Cameras.ViewportCamera.Viewport">
            <summary>
            Gets the parent viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Cameras.ViewportCamera.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.EditorGizmoViewport">
            <summary>
            Viewport with free camera and gizmo tools.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.EditorViewport" />
            <seealso cref="T:FlaxEditor.Gizmo.IGizmoOwner" />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorGizmoViewport.#ctor(FlaxEngine.Rendering.SceneRenderTask,FlaxEditor.Undo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.EditorGizmoViewport"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="undo">The undo.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.Gizmos">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.RenderTask">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.ViewFarPlane">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsLeftMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsRightMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsAltKeyDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.IsControlDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.SnapToGround">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.MouseDelta">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.UseSnapping">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.UseDuplicate">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.EditorGizmoViewport.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorGizmoViewport.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.EditorViewport">
            <summary>
            Editor viewports base class.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RenderOutputControl" />
        </member>
        <member name="T:FlaxEditor.Viewport.EditorViewport.Input">
            <summary>
            Gathered input data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsPanning">
            <summary>
            The is panning state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsRotating">
            <summary>
            The is rotating state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMoving">
            <summary>
            The is moving state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsZooming">
            <summary>
            The is zooming state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsOrbiting">
            <summary>
            The is orbiting state.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsControlDown">
            <summary>
            The is control down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsShiftDown">
            <summary>
            The is shift down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsAltDown">
            <summary>
            The is alt down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMouseRightDown">
            <summary>
            The is mouse right down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMouseMiddleDown">
            <summary>
            The is mouse middle down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.IsMouseLeftDown">
            <summary>
            The is mouse left down flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.Input.MouseWheelDelta">
            <summary>
            The mouse wheel delta.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.Input.IsControllingMouse">
            <summary>
            Gets a value indicating whether use is controlling mouse.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.Input.Gather(FlaxEngine.Window)">
            <summary>
            Gathers input from the specified window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.Input.Clear">
            <summary>
            Clears the data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.FpsCameraFilteringFrames">
            <summary>
            The FPS camera filtering frames count (how much frames we want to keep in the buffer to calculate the avg. delta currently hardcoded).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._speedWidget">
            <summary>
            The speed widget button.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._prevInput">
            <summary>
            The previous input (from the previous update).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._input">
            <summary>
            The input data (from the current frame).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._viewMousePos">
            <summary>
            The view mouse position.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._mouseDeltaRight">
            <summary>
            The mouse delta (right button down).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport._mouseDeltaLeft">
            <summary>
            The mouse delta (left button down).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.MouseSpeed">
            <summary>
            Speed of the mouse.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.MouseWheelZoomSpeedFactor">
            <summary>
            Speed of the mouse wheel zooming.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MovementSpeed">
            <summary>
            Gets or sets the camera movement speed.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MouseDeltaRight">
            <summary>
            Gets the mouse movement delta for the right button (user press and move).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MouseDeltaLeft">
            <summary>
            Gets the mouse movement delta for the left button (user press and move).
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.CamPitchAngles">
            <summary>
            Camera's pitch angle clamp range (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewTransform">
            <summary>
            Gets the view transform.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewPosition">
            <summary>
            Gets or sets the view position.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewOrientation">
            <summary>
            Gets or sets the view orientation.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewDirection">
            <summary>
            Gets or sets the view direction vector.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewRay">
            <summary>
            Gets or sets the view ray (position and direction).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.Yaw">
            <summary>
            Gets or sets the yaw angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.Pitch">
            <summary>
            Gets or sets the pitch angle (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.YawPitch">
            <summary>
            Gets or sets the absolute mouse position (normalized, not in pixels). Yaw is X, Pitch is Y.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.EulerAngles">
            <summary>
            Gets or sets the euler angles (pitch, yaw, roll).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.HasLoadedAssets">
            <summary>
            Gets a value indicating whether this viewport has loaded dependant assets.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.ViewWidgetButtonMenu">
            <summary>
            The 'View' widget button context menu.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.ViewWidgetShowMenu">
            <summary>
            The 'View' widget 'Show' category context menu.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ViewportCamera">
            <summary>
            Gets or sets the viewport camera controller.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.NearPlane">
            <summary>
            Gets or sets the camera near clipping plane.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.FarPlane">
            <summary>
            Gets or sets the camera far clipping plane.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.FieldOfView">
            <summary>
            Gets or sets the camera field of view (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.OrthographicScale">
            <summary>
            Gets or sets the camera orthographic size scale (if camera uses orthographic mode).
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.UseOrthographicProjection">
            <summary>
            Gets or sets the camera orthographic mode (otherwise uses perspective projection).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.#ctor(FlaxEngine.Rendering.SceneRenderTask,FlaxEditor.Viewport.Cameras.ViewportCamera,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.EditorViewport"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="camera">The camera controller.</param>
            <param name="useWidgets">Enable/disable viewport widgets.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.ShowFpsCounter">
            <summary>
            Gets or sets a value indicating whether show or hide FPS counter.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.TakeScreenshot(System.String)">
            <summary>
            Takes the screenshot of the current viewport.
            </summary>
            <param name="path">The output file path. Set null to use default value.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.CopyViewData(FlaxEngine.Rendering.RenderView@)">
            <summary>
            Copies the render view data to <see cref="T:FlaxEngine.Rendering.RenderView"/> structure.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.GetInput(FlaxEditor.Viewport.EditorViewport.Input@)">
            <summary>
            Gets the input state data.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.CreateProjectionMatrix(FlaxEngine.Matrix@)">
            <summary>
            Creates the projection matrix.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.CreateViewMatrix(FlaxEngine.Matrix@)">
            <summary>
            Creates the view matrix.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.EditorViewport.MouseRay">
            <summary>
            Gets the mouse ray.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.ConvertMouseToRay(FlaxEngine.Vector2@)">
            <summary>
            Converts the mouse position to the ray (in world space of the viewport).
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <returns>The result ray.</returns>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnControlMouseBegin(FlaxEngine.Window)">
            <summary>
            Called when mouse control begins.
            </summary>
            <param name="win">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnControlMouseEnd(FlaxEngine.Window)">
            <summary>
            Called when mouse control ends.
            </summary>
            <param name="win">The parent window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnLeftMouseButtonDown">
            <summary>
            Called when left mouse button goes down (on press).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnLeftMouseButtonUp">
            <summary>
            Called when left mouse button goes up (on release).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnRightMouseButtonDown">
            <summary>
            Called when right mouse button goes down (on press).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnRightMouseButtonUp">
            <summary>
            Called when right mouse button goes up (on release).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.UpdateView(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector2@,System.Boolean@)">
            <summary>
            Updates the view.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
            <param name="moveDelta">The move delta (scaled).</param>
            <param name="mouseDelta">The mouse delta (scaled).</param>
            <param name="centerMouse">True if center mouse after the update.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.ViewModeOptions.Mode">
            <summary>
            The mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.EditorViewport.ViewModeOptions.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.EditorViewport.ViewModeOptions.#ctor(FlaxEngine.Rendering.ViewMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.EditorViewport.ViewModeOptions"/> struct.
            </summary>
            <param name="mode">The mode.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:FlaxEditor.Viewport.MainEditorGizmoViewport">
            <summary>
            Main editor gizmo viewport used by the <see cref="T:FlaxEditor.Windows.EditGameWindow"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.EditorGizmoViewport" />
        </member>
        <member name="T:FlaxEditor.Viewport.MainEditorGizmoViewport.DragDropEventArgs">
            <summary>
            The custom drag drop event arguments.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Drag.DragEventArgs" />
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DragDropEventArgs.Hit">
            <summary>
            The hit.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DragDropEventArgs.HitLocation">
            <summary>
            The hit location.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.DragHandlers">
            <summary>
            Drag and drop handlers
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.TransformGizmo">
            <summary>
            The transform gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.Grid">
            <summary>
            The grid gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.SelectionOutline">
            <summary>
            The selection outline postFx.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditorPrimitives">
            <summary>
            The editor primitives postFx.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.DebugDrawData">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.ShowNavigation">
            <summary>
            Gets or sets a value indicating whether show navigation mesh.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.MainEditorGizmoViewport"/> class.
            </summary>
            <param name="editor">Editor instance.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OverrideSelectionOutline(FlaxEditor.Gizmo.SelectionOutline)">
            <summary>
            Overrides the selection outline effect or restored the default one.
            </summary>
            <param name="customSelectionOutline">The custom selection outline or null if use default one.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.ApplyTransform(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Applies the transform to the collection of scene graph nodes.
            </summary>
            <param name="selection">The selection.</param>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnLeftMouseButtonUp">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.MainEditorGizmoViewport.ActiveMode">
            <summary>
            Gets the active gizmo mode.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.MainEditorGizmoViewport.ActiveModeChanged">
            <summary>
            Occurs when active mode gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.SculptTerrainGizmo">
            <summary>
            The sculpt terrain gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.PaintTerrainGizmo">
            <summary>
            The paint terrain gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditTerrainGizmo">
            <summary>
            The edit terrain gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.PaintFoliageGizmo">
            <summary>
            The paint foliage gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.MainEditorGizmoViewport.EditFoliageGizmo">
            <summary>
            The edit foliage gizmo.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.AddMode(FlaxEditor.Viewport.Modes.EditorGizmoMode)">
            <summary>
            Adds the mode to the viewport.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.RemoveMode(FlaxEditor.Viewport.Modes.EditorGizmoMode)">
            <summary>
            Removes the mode from the viewport.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.SetActiveMode(FlaxEditor.Viewport.Modes.EditorGizmoMode)">
            <summary>
            Sets the active mode.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.MainEditorGizmoViewport.SetActiveMode``1">
            <summary>
            Sets the active mode.
            </summary>
            <typeparam name="T">The mode type.</typeparam>
            <returns>The activated mode.</returns>
        </member>
        <member name="T:FlaxEditor.Viewport.Modes.EditorGizmoMode">
            <summary>
            Editor viewport gizmo mode descriptor. Defines which gizmo tools to show and how to handle scene editing.
            </summary>
            <remarks>
            Only one gizmo mode can be active at the time. It defines the viewport toolset usage.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Viewport.Modes.EditorGizmoMode.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.Modes.EditorGizmoMode.Activated">
            <summary>
            Occurs when mode gets activated.
            </summary>
        </member>
        <member name="E:FlaxEditor.Viewport.Modes.EditorGizmoMode.Deactivated">
            <summary>
            Occurs when mode gets deactivated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.Init(FlaxEditor.Viewport.MainEditorGizmoViewport)">
            <summary>
            Initializes the specified mode and links it to the viewport.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.Dispose">
            <summary>
            Releases the mode. Called on editor exit or when mode gets removed from the current viewport.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.OnActivated">
            <summary>
            Called when mode gets activated.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.EditorGizmoMode.OnDeactivated">
            <summary>
            Called when mode gets deactivated.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Modes.NoGizmoMode">
            <summary>
            The editor gizmo editor mode that does nothing. Can be used to hide other gizmos when using a specific editor tool.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.NoGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Modes.TransformGizmoMode">
            <summary>
            The default editor mode that uses <see cref="T:FlaxEditor.Gizmo.TransformGizmo"/> for objects transforming.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Modes.EditorGizmoMode" />
        </member>
        <member name="M:FlaxEditor.Viewport.Modes.TransformGizmoMode.OnActivated">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.PrefabWindowViewport">
            <summary>
            Editor viewport used by the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow"/>
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.PrefabWindow" />
            <seealso cref="T:FlaxEditor.Viewport.Previews.PrefabPreview" />
            <seealso cref="T:FlaxEditor.Gizmo.IGizmoOwner" />
        </member>
        <member name="F:FlaxEditor.Viewport.PrefabWindowViewport.TransformGizmo">
            <summary>
            The transform gizmo.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.PrefabWindowViewport.SelectionOutline">
            <summary>
            The selection outline postFx.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.PrefabWindowViewport.EditorPrimitives">
            <summary>
            The editor primitives postFx.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.#ctor(FlaxEditor.Windows.Assets.PrefabWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.PrefabWindowViewport"/> class.
            </summary>
            <param name="window">Editor window.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.ShowSelectedActors">
            <summary>
            Moves the viewport to visualize selected actors.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.Gizmos">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.RenderTask">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.ViewFarPlane">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsLeftMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsRightMouseButtonDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsAltKeyDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.IsControlDown">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.SnapToGround">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.MouseDelta">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.UseSnapping">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.UseDuplicate">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.ApplyTransform(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode},FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Applies the transform to the collection of scene graph nodes.
            </summary>
            <param name="selection">The selection.</param>
            <param name="translationDelta">The translation delta.</param>
            <param name="rotationDelta">The rotation delta.</param>
            <param name="scaleDelta">The scale delta.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnLeftMouseButtonUp">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.PrefabWindowViewport.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.PrefabWindowViewport.DebugDrawData">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AnimatedModelPreview">
            <summary>
            Animated model asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.SkinnedModel">
            <summary>
            Gets or sets the skinned model asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.PreviewActor">
            <summary>
            Gets the skinned model actor used to preview selected asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.PlayAnimation">
            <summary>
            Gets or sets a value indicating whether play the animation in editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.ShowBones">
            <summary>
            Gets or sets a value indicating whether show animated model skeleton bones debug view.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.ScaleToFit">
            <summary>
            Gets or sets a value indicating whether scale the model to the normalized bounds.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.BonesMask">
            <summary>
            Gets or sets the custom mask for the skeleton bones. Bones with false values will be skipped during rendering. Works only if <see cref="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.ShowBones"/> is set to true and the array matches the attached <see cref="P:FlaxEditor.Viewport.Previews.AnimatedModelPreview.SkinnedModel"/> bones hierarchy.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AnimatedModelPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.AnimatedModelPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AnimatedModelPreview.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AnimatedModelPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AssetPreview">
            <summary>
            Generic asset preview editor viewport base class.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.EditorViewport" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.PreviewLight">
            <summary>
            The preview light. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.EnvProbe">
            <summary>
            The env probe. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.Sky">
            <summary>
            The sky. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.SkyLight">
            <summary>
            The sky light. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.AssetPreview.PostFxVolume">
            <summary>
            Gets the post fx volume. Allows to modify rendering settings.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AssetPreview.ShowDefaultSceneActors">
            <summary>
            Gets or sets a value indicating whether show default scene actors (sky, env probe, skylight, directional light, etc.).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AssetPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.AssetPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AssetPreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AssetPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.AudioClipPreview">
            <summary>
            Audio clip PCM data editor preview.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AudioClipPreview.Asset">
            <summary>
            Gets or sets the clip to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.AudioClipPreview.HasData">
            <summary>
            Gets a value indicating whether audio data has been fetched from the asset (done as an async task). It is required to be valid in order to draw the audio buffer preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AudioClipPreview.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AudioClipPreview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.AudioClipPreview.DownloadData">
            <summary>
            Downloads the audio clip raw PCM data. Use it from async thread to prevent blocking,
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.CubeTexturePreview">
            <summary>
            Cube Texture asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.MaterialPreview" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.CubeTexturePreview._previewMaterial">
            <summary>
            The preview material instance used to draw texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.CubeTexture">
            <summary>
            Sets the cube texture to preview.
            </summary>
            <value>
            The cube texture.
            </value>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.ViewChannels">
            <summary>
            Gets or sets the view channels to show.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.UsePointSampler">
            <summary>
            Gets or sets a value indicating whether use point sampler when drawing the texture. The default value is false.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.MipLevel">
            <summary>
            Gets or sets the mip level to show. The default value is -1.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.CubeTexturePreview.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.CubeTexturePreview.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.CubeTexturePreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.CubeTexturePreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.IESProfilePreview">
            <summary>
            Preview control for <see cref="T:FlaxEngine.IESProfile"/> asset.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.IESProfilePreview.Asset">
            <summary>
            Gets or sets the asset to preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.IESProfilePreview"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.IESProfilePreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.MaterialPreview">
            <summary>
            Material or Material Instance asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.Material">
            <summary>
            Gets or sets the material asset to preview. It can be <see cref="T:FlaxEngine.Material"/> or <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.SelectedModelIndex">
            <summary>
            Gets or sets the selected preview model index.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.MaterialPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.MaterialPreview.HasLoadedAssets">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.MaterialPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.ModelPreview">
            <summary>
            Model asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ModelPreview.Model">
            <summary>
            Gets or sets the model asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.ModelPreview.PreviewStaticModel">
            <summary>
            Gets the model actor used to preview selected asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ModelPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.ModelPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.ModelPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.PrefabPreview">
            <summary>
            Prefab asset preview editor viewport.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.AssetPreview" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.PrefabPreview.LoadingPreview">
            <summary>
            The preview that is during prefab instance spawning. Used to link some actors such as UIControl to preview scene and view.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.PrefabPreview.Prefab">
            <summary>
            Gets or sets the prefab asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.PrefabPreview.Instance">
            <summary>
            Gets the instance of the prefab spawned for the preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.PrefabPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.PrefabPreview"/> class.
            </summary>
            <param name="useWidgets">if set to <c>true</c> use widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.PrefabPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.TexturePreviewBase">
            <summary>
            Base class for texture previews. Draws a surface in the UI and supports view moving/zomming.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.CenterView">
            <summary>
            Moves the view to the center.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.UpdateTextureRect">
            <summary>
            Updates the texture rectangle.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <summary>
            Calculates the texture rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.CalculateTextureRect(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Rectangle@)">
            <summary>
            Calculates the texture rect fr the given texture and the view size.
            </summary>
            <param name="textureSize">Size of the texture.</param>
            <param name="viewSize">Size of the view.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.DrawTexture(FlaxEngine.Rectangle@)">
            <summary>
            Draws the texture.
            </summary>
            <param name="rect">The target texture view rectangle.</param>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewBase.TextureViewRect">
            <summary>
            Gets the texture view rect (scaled and offseted).
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewBase.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.ChannelFlags">
            <summary>
            Texture channel flags.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.ChannelFlags.All">
            <summary>
            All texture channels.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase">
            <summary>
            Base class for texture previews with custom drawing features. Uses in-build postFx material to render a texture.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="F:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase._previewMaterial">
            <summary>
            The preview material instance used to draw texture.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.ViewChannels">
            <summary>
            Gets or sets the view channels to show.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.UsePointSampler">
            <summary>
            Gets or sets a value indicating whether use point sampler when drawing the texture. The default value is false.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.MipLevel">
            <summary>
            Gets or sets the mip level to show. The default value is -1.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.#ctor(System.Boolean)">
            <inheritdoc />
            <param name="useWidgets">True if show viewport widgets.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.SetTexture(System.Object)">
            <summary>
            Sets the texture to draw (material parameter).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.SimpleTexturePreview">
            <summary>
            Texture preview GUI control. Draws <see cref="T:FlaxEngine.Texture"/> in the UI and supports view moving/zomming.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleTexturePreview.Asset">
            <summary>
            Gets or sets the asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleTexturePreview.Color">
            <summary>
            Gets or sets the color used to multiply texture colors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleTexturePreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleTexturePreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview">
            <summary>
            Sprite atlas preview GUI control. Draws <see cref="T:FlaxEngine.SpriteAtlas"/> in the UI and supports view moving/zomming.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.Asset">
            <summary>
            Gets or sets the asset to preview.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.Color">
            <summary>
            Gets or sets the color used to multiply texture colors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SimpleSpriteAtlasPreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.TexturePreview">
            <summary>
            Texture preview GUI control. Draws <see cref="T:FlaxEngine.Texture"/> in the UI and supports view moving/zomming.
            Supports texture channels masking and color transformations.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.TexturePreview.Asset">
            <summary>
            Gets or sets the texture to preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.TexturePreview"/> class.
            </summary>
            <param name="useWidgets">True if show viewport widgets.</param>
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.TexturePreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Previews.SpriteAtlasPreview">
            <summary>
            Sprite atlas preview GUI control. Draws <see cref="T:FlaxEngine.SpriteAtlas"/> in the UI and supports view moving/zomming.
            Supports texture channels masking and color transformations.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.TexturePreviewCustomBase" />
        </member>
        <member name="P:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.Asset">
            <summary>
            Gets or sets the sprite atlas to preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Previews.SpriteAtlasPreview"/> class.
            </summary>
            <param name="useWidgets">True if show viewport widgets.</param>
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.CalculateTextureRect(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Previews.SpriteAtlasPreview.DrawTexture(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Widgets.ViewportWidgetButton">
            <summary>
            Viewport Widget Button class.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.OnToggle">
            <summary>
            Event fired when user toggles checked state.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEditor.Viewport.Widgets.ViewportWidgetButton"/> is checked.
            </summary>
            <value>
              <c>true</c> if checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.#ctor(System.String,FlaxEngine.Sprite,FlaxEngine.GUI.ContextMenu,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Widgets.ViewportWidgetButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="icon">The icon.</param>
            <param name="contextMenu">The context menu.</param>
            <param name="autoCheck">if set to <c>true</c> will be automatic checked on mouse click.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetButton.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Viewport.Widgets.ViewportWidgetLocation">
            <summary>
            The viewport widget location.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetLocation.UpperLeft">
            <summary>
            The upper left.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetLocation.UpperRight">
            <summary>
            The upper right.
            </summary>
        </member>
        <member name="T:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer">
            <summary>
            Viewport Widgets Container control
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetsMargin">
            <summary>
            The widgets margin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetsHeight">
            <summary>
            The widgets height.
            </summary>
        </member>
        <member name="F:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetsIconSize">
            <summary>
            The widgets icon size.
            </summary>
        </member>
        <member name="P:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.WidgetLocation">
            <summary>
            Gets the widget location.
            </summary>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.#ctor(FlaxEditor.Viewport.Widgets.ViewportWidgetLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Viewport.Widgets.ViewportWidgetsContainer.ArrangeWidgets(FlaxEngine.GUI.ContainerControl)">
            <summary>
            Arranges the widgets of the control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:FlaxEditor.ViewportDebugDrawData">
            <summary>
            The custom data container used during collecting draw data for drawing debug visuals of selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.ViewportDebugDrawData" /> class.
            </summary>
            <param name="actorsCapacity">The actors capacity.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.Add(FlaxEngine.Actor)">
            <summary>
            Adds the specified actor to draw it's debug visuals.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.HighlightModel(FlaxEngine.StaticModel)">
            <summary>
            Highlights the model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.HighlightModel(FlaxEngine.StaticModel,System.Int32)">
            <summary>
            Highlights the model entry.
            </summary>
            <param name="model">The model.</param>
            <param name="entryIndex">Index of the entry to highlight.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.HighlightBrushSurface(FlaxEngine.BrushSurface)">
            <summary>
            Highlights the brush surface.
            </summary>
            <param name="surface">The surface.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.OnDraw(FlaxEngine.Rendering.DrawCallsCollector)">
            <summary>
            Called when task calls <see cref="E:FlaxEngine.Rendering.SceneRenderTask.Draw" /> event.
            </summary>
            <param name="collector">The draw calls collector.</param>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.Clear">
            <summary>
            Clears this data collector.
            </summary>
        </member>
        <member name="M:FlaxEditor.ViewportDebugDrawData.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.AboutDialog">
            <summary>
                About this product dialog window.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.CreateHeader">
            <summary>
                Create header with Flax engine icon and version number
            </summary>
            <returns>Returns icon controller (most top left)</returns>
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.CreateFooter(FlaxEngine.GUI.Control)">
            <summary>
                Create footer label
            </summary>
            <param name="topParentControl">Top element that this footer should be put under</param>
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.CreateAuthorsLabels(FlaxEngine.GUI.Control)">
            <summary>
                Authors labels generation and show
            </summary>
            <param name="topParentControl">Top element that this labels should be put under</param>
            <returns>Authors control</returns>
        </member>
        <member name="M:FlaxEditor.Windows.AboutDialog.GenerateThirdPartyLabels(FlaxEngine.GUI.Control)">
            <summary>
                3rdParty software and other licenses labels
            </summary>
            <param name="authorsLabel"></param>
            <returns></returns>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationGraphWindow">
            <summary>
            Animation Graph window allows to view and edit <see cref="T:FlaxEngine.AnimationGraph"/> asset.
            Note: it uses ClonedAssetEditorWindowBase which is creating cloned asset to edit/preview.
            </summary>
            <seealso cref="T:FlaxEngine.AnimationGraph" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.Preview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.Preview.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy">
            <summary>
            The graph properties proxy object.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor">
            <summary>
            Custom editor for editing graph parameters collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.ShowParameterMenu(FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel,FlaxEngine.Vector2@)">
            <summary>
            Shows the parameter context menu.
            </summary>
            <param name="label">The label control.</param>
            <param name="targetLocation">The target location.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.AddParameter(FlaxEditor.Surface.ParameterType)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.StartParameterRenaming(FlaxEditor.CustomEditors.GUI.ClickablePropertyNameLabel)">
            <summary>
            Starts renaming parameter.
            </summary>
            <param name="label">The label control.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.DeleteParameter(System.Int32)">
            <summary>
            Removes the parameter.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.ParametersEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.AnimationGraphWindow)">
            <summary>
            Gathers parameters from the graph.
            </summary>
            <param name="window">The graph window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.OnSave(FlaxEditor.Windows.Assets.AnimationGraphWindow)">
            <summary>
            Saves the properties to the graph.
            </summary>
            <param name="window">The graph window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.Surface">
            <summary>
            Gets the graph surface.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.PreviewActor">
            <summary>
            Gets the animated model actor used for the animation preview.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.RefreshTempAsset">
            <summary>
            Refreshes temporary asset to see changes live when editing the surface.
            </summary>
            <returns>True if cannot refresh it, otherwise false.</returns>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.MainNode">
            <summary>
            Gets or sets the main graph node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.ScrollViewToMain">
            <summary>
            Scrolls the view to the main graph node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnSurfaceEditedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnSurfaceGraphEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnSurfaceClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AnimationGraphWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationGraphWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.Animation"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Animation" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AnimationWindow.PropertiesProxy">
            <summary>
            The model properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.PropertiesProxy.ProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AnimationWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AssetEditorWindow">
            <summary>
            Base class for assets editing/viewing windows.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindow._item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindow._toolstrip">
            <summary>
            The toolstrip.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.SerializationTypename">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.UnlinkItem">
            <summary>
            Unlinks the item. Removes reference to it and unbinds all events.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.UpdateToolstrip">
            <summary>
            Updates the toolstrip buttons and other controls. Called after some window events.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.WindowTitleName">
            <summary>
            Gets the name of the window title format text ({0} to insert asset short name).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.UpdateTitle">
            <summary>
            Updates the window title text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.Save">
            <summary>
            Tries to save asset changes if it has been edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.IsEditingItem(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnClosing(FlaxEngine.ClosingReason)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="E:FlaxEditor.Windows.Assets.AssetEditorWindow.OnEdited">
            <summary>
            Occurs when object gets edited.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindow.IsEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.MarkAsEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.ClearEditedFlag">
            <summary>
            Clears the edited flag.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnEditedState">
            <summary>
            Action fired when object gets edited.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnEditedStateChanged">
            <summary>
            Action fired when object edited state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnShowContextMenu(FlaxEngine.GUI.ContextMenu)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemDeleted(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemRenamed(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindow.OnItemDispose(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1">
            <summary>
            Generic base class for asset editors.
            </summary>
            <typeparam name="T">Asset type.</typeparam>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1._asset">
            <summary>
            The asset.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.Asset">
            <summary>
            Gets the asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.LoadAsset">
            <summary>
            Loads the asset.
            </summary>
            <returns>Loaded asset or null if cannot do it.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLinked">
            <summary>
            Called when asset gets linked and may setup window UI for it.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnAssetLoaded">
            <summary>
            Called when asset gets loaded and may setup window UI for it.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnShow">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AssetEditorWindowBase`1.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1">
            <summary>
            Generic base class for asset editors that modify cloned asset and update original asset on save.
            </summary>
            <typeparam name="T">Asset type.</typeparam>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.SaveToOriginal">
            <summary>
            Saves the copy of the asset to the original location. This action cannot be undone!
            </summary>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ClonedAssetEditorWindowBase`1.LoadAsset">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AudioClipWindow">
            <summary>
            Audio clip window allows to view and edit <see cref="T:FlaxEngine.AudioClip"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.AudioClip" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy">
            <summary>
            The AudioClip properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.AudioClipWindow)">
            <summary>
            Gathers parameters from the specified AudioClip.
            </summary>
            <param name="window">The asset window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.AudioClipWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.AudioClipWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CollisionDataWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.CollisionData"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.CollisionData" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy">
            <summary>
            The asset properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy.Editor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy.Editor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.PropertiesProxy.CookData.Create">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.UpdateWiresModel">
            <summary>
            Updates the collision data debug model.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.CollisionDataWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CollisionDataWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CubeTextureWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.CubeTexture"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.CubeTexture" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy">
            <summary>
            The texture properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.CubeTextureWindow)">
            <summary>
            Gathers parameters from the specified texture.
            </summary>
            <param name="window">The asset window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.CubeTextureWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.CubeTextureWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.FontAssetWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.FontAsset"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.FontAsset" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.FontAssetWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.IESProfileWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.IESProfile"/> asset.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.IESProfileWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.IESProfileWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.IESProfileWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.JsonAssetWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.JsonAsset"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAsset" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.JsonAssetWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialInstanceWindow">
            <summary>
            Material window allows to view and edit <see cref="T:FlaxEngine.MaterialInstance"/> asset.
            Note: it uses actual asset to modify so changes are visible live in the game/editor preview.
            </summary>
            <seealso cref="T:FlaxEngine.MaterialInstance" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy">
            <summary>
            The material properties proxy object.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.Window">
            <summary>
            The window reference. Used to handle some special logic.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.Values">
            <summary>
            The material parameter values collection. Used to record undo changes.
            </summary>
            <remarks>
            Contains only items with raw values excluding Flax Objects.
            </remarks>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.ValuesRef">
            <summary>
            The material parameter values collection. Used to record undo changes.
            </summary>
            <remarks>
            Contains only items with references to Flax Objects identified by ID.
            </remarks>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.MaterialInstanceWindow)">
            <summary>
            Gathers parameters from the specified material.
            </summary>
            <param name="materialWin">The material window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialInstanceWindow.ParametersEditor">
            <summary>
            Custom editor for editing material parameters collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.ParametersEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.ParametersEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialInstanceWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialInstanceWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialWindow">
            <summary>
            Material window allows to view and edit <see cref="T:FlaxEngine.Material"/> asset.
            Note: it uses ClonedAssetEditorWindowBase which is creating cloned asset to edit/preview.
            </summary>
            <seealso cref="T:FlaxEngine.Material" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
            <seealso cref="T:FlaxEditor.Surface.IVisjectSurfaceOwner" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy">
            <summary>
            The material properties proxy object.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor">
            <summary>
            Custom editor for editing material parameters collection.
            </summary>
            <seealso cref="T:FlaxEditor.CustomEditors.CustomEditor" />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.Style">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.ShowParameterMenu(System.Int32,FlaxEngine.GUI.Control,FlaxEngine.Vector2@)">
            <summary>
            Shows the parameter context menu.
            </summary>
            <param name="index">The index.</param>
            <param name="label">The label control.</param>
            <param name="targetLocation">The target location.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.AddParameter(FlaxEditor.Surface.ParameterType)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.StartParameterRenaming(System.Int32,FlaxEngine.GUI.Control)">
            <summary>
            Starts renaming parameter.
            </summary>
            <param name="index">The index.</param>
            <param name="label">The label control.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.DeleteParameter(System.Int32)">
            <summary>
            Removes the parameter.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.ParametersEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.MaterialWindow)">
            <summary>
            Gathers parameters from the specified material.
            </summary>
            <param name="materialWin">The material window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.OnSave(FlaxEngine.Rendering.MaterialInfo@)">
            <summary>
            Saves the material properties to the material info structure.
            </summary>
            <param name="info">The material info.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.Surface">
            <summary>
            Gets the material surface.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.ShowSourceCode(FlaxEngine.Material)">
            <summary>
            Shows the material source code window.
            </summary>
            <param name="material">The material asset.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.RefreshTempMaterial">
            <summary>
            Refreshes temporary material to see changes live when editing the surface.
            </summary>
            <returns>True if cannot refresh it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.FillMaterialInfo(FlaxEngine.Rendering.MaterialInfo@)">
            <summary>
            Gets material info from UI.
            </summary>
            <param name="info">Output info.</param>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.MainNode">
            <summary>
            Gets or sets the main material node.
            </summary>
            <value>
            The main node.
            </value>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.RefreshMainNode">
            <summary>
            Refreshes the main material node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.ScrollViewToMain">
            <summary>
            Scrolls the view to the main material node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.SurfaceName">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.SurfaceData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnContextCreated(FlaxEditor.Surface.VisjectSurfaceContext)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnSurfaceEditedChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnSurfaceGraphEdited">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnSurfaceClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.MaterialWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.MaterialWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ModelWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.Model"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Model" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.Preview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.Preview.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy">
            <summary>
            The model properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.UpdateEffectsOnUI">
            <summary>
            Updates the highlight/isolate effects on UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.UpdateMaterialSlotsUI">
            <summary>
            Updates the material slots UI parts. Should be called after material slot rename.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.SetMaterialSlot(FlaxEngine.Mesh,System.Int32)">
            <summary>
            Sets the material slot index to the mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="newSlotIndex">New index of the material slot to use.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.SetIsolate(FlaxEngine.Mesh)">
            <summary>
            Sets the material slot to isolate.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.SetHighlight(FlaxEngine.Mesh)">
            <summary>
            Sets the material slot index to highlight.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.ProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.PropertiesProxy.ProxyEditor.RefreshInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UpdateEffectsOnAsset">
            <summary>
            Updates the highlight/isolate effects on a model asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.ModelWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.ModelWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow">
            <summary>
            Prefab window allows to view and edit <see cref="T:FlaxEngine.Prefab"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Prefab" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Cut">
            <summary>
            Cuts selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Copy">
            <summary>
            Copies selected objects to system clipboard.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Paste">
            <summary>
            Pastes objects from the system clipboard.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Paste(FlaxEngine.Actor)">
            <summary>
            Pastes the copied objects. Supports undo/redo.
            </summary>
            <param name="pasteTargetActor">The target actor to paste copied data.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Duplicate">
            <summary>
            Duplicates selected objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomDeleteActorsAction.Delete">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomPasteActorsAction.LinkBrokenParentReference(FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomPasteActorsAction.Undo">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Delete">
            <summary>
            Deletes selected objects.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.Tree">
            <summary>
            Gets the prefab hierarchy tree control.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.Undo">
            <summary>
            Gets the undo system used by this window for changes tracking.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.PrefabWindow.Graph">
            <summary>
            The local scene nodes graph used by the prefab editor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.LiveReload">
            <summary>
            Gets or sets a value indicating whether use live reloading for the prefab changes (applies prefab changes on modification by auto).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.LiveReloadTimeout">
            <summary>
            Gets or sets the live reload timeout. It defines the time to apply prefab changes after modification.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnEditedState">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode">
            <summary>
            The custom implementation of the root node for the scene graph.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode.#ctor(FlaxEditor.Windows.Assets.PrefabWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode"/> class.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.PrefabWindow.CustomRootNode.Undo">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PrefabWindow.PrefabTree">
            <summary>
            The prefab hierarchy tree control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tree" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.PrefabTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Assets.PrefabWindow.PrefabTree"/> class.
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Assets.PrefabWindow.ContextMenuShow">
            <summary>
            Occurs when prefab hierarchy panel wants to show the context menu. Allows to add custom options. Applies to all prefab windows.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.CreateContextMenu">
            <summary>
            Creates the context menu for the current objects selection.
            </summary>
            <returns>The context menu.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.ShowContextMenu(FlaxEngine.GUI.Control,FlaxEngine.Vector2@)">
            <summary>
            Shows the context menu on a given location (in the given control coordinates).
            </summary>
            <param name="parent">The parent control.</param>
            <param name="location">The location (within a given control).</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Spawn(FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor to the prefab (adds actor to root).
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Spawn(System.Type)">
            <summary>
            Spawns the actor of the specified type to the prefab (adds actor to root).
            </summary>
            <param name="type">The actor type.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Spawn(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns the specified actor.
            </summary>
            <param name="actor">The actor.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="F:FlaxEditor.Windows.Assets.PrefabWindow.Selection">
            <summary>
            The current selection (readonly).
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Assets.PrefabWindow.SelectionChanged">
            <summary>
            Occurs when selection gets changed.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.OnSelectionChanged(FlaxEditor.SceneGraph.SceneGraphNode[])">
            <summary>
            Called when selection gets changed.
            </summary>
            <param name="before">The selection before the change.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Select(System.Collections.Generic.List{FlaxEditor.SceneGraph.SceneGraphNode})">
            <summary>
            Selects the specified nodes collection.
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Select(FlaxEditor.SceneGraph.SceneGraphNode,System.Boolean)">
            <summary>
            Selects the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="additive">if set to <c>true</c> will use additive mode, otherwise will clear previous selection.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Deselect(FlaxEditor.SceneGraph.SceneGraphNode)">
            <summary>
            Deselects the specified node.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PrefabWindow.Deselect">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Assets.PreviewsCacheWindow">
            <summary>
            Editor window that allows to view <see cref="T:FlaxEditor.PreviewsCache"/> asset.
            </summary>
            <seealso cref="T:FlaxEditor.PreviewsCache" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PreviewsCacheWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PreviewsCacheWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.PreviewsCacheWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkeletonMaskWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.SkeletonMask"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.SkeletonMask" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkeletonMaskWindow.PropertiesProxy">
            <summary>
            The asset properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.PropertiesProxy.ProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.PropertiesProxy.ProxyEditor.Refresh">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SkeletonMaskWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkeletonMaskWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkinnedModelWindow">
            <summary>
            Editor window to view/modify <see cref="T:FlaxEngine.SkinnedModel"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.SkinnedModel" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Preview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Preview.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy">
            <summary>
            The model properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.UpdateEffectsOnUI">
            <summary>
            Updates the highlight/isolate effects on UI.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.UpdateMaterialSlotsUI">
            <summary>
            Updates the material slots UI parts. Should be called after material slot rename.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.SetMaterialSlot(FlaxEngine.SkinnedMesh,System.Int32)">
            <summary>
            Sets the material slot index to the mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="newSlotIndex">New index of the material slot to use.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.SetIsolate(FlaxEngine.SkinnedMesh)">
            <summary>
            Sets the material slot to isolate.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.SetHighlight(FlaxEngine.SkinnedMesh)">
            <summary>
            Sets the material slot index to highlight.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.ProxyEditor.Initialize(FlaxEditor.CustomEditors.LayoutElementsContainer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.PropertiesProxy.ProxyEditor.RefreshInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UpdateEffectsOnAsset">
            <summary>
            Updates the highlight/isolate effects on a model asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnAssetLoaded">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SkinnedModelWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SkinnedModelWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SpriteAtlasWindow">
            <summary>
            Sprite Atlas window allows to view and edit <see cref="T:FlaxEngine.SpriteAtlas"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.SpriteAtlas" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SpriteAtlasWindow.AtlasView">
            <summary>
            Atlas view control. Shows sprites.
            </summary>
            <seealso cref="T:FlaxEditor.Viewport.Previews.SpriteAtlasPreview" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy">
            <summary>
            The texture properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.UpdateSprites">
            <summary>
            Updates the sprites collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.SpriteAtlasWindow)">
            <summary>
            Gathers parameters from the specified texture.
            </summary>
            <param name="win">The texture window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.Save">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.UpdateToolstrip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.SpriteAtlasWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.SpriteAtlasWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.TextureWindow">
            <summary>
            Texture window allows to view and edit <see cref="T:FlaxEngine.Texture"/> asset.
            </summary>
            <seealso cref="T:FlaxEngine.Texture" />
            <seealso cref="T:FlaxEditor.Windows.Assets.AssetEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy">
            <summary>
            The texture properties proxy object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.OnLoad(FlaxEditor.Windows.Assets.TextureWindow)">
            <summary>
            Gathers parameters from the specified texture.
            </summary>
            <param name="window">The asset window.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.PeekState">
            <summary>
            Records the current state to restore it on DiscardChanges.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.Reimport">
            <summary>
            Reimports asset.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.DiscardChanges">
            <summary>
            On discard changes
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.PropertiesProxy.OnClean">
            <summary>
            Clears temporary data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.#ctor(FlaxEditor.Editor,FlaxEditor.Content.AssetItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.UnlinkItem">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnAssetLinked">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnItemReimported(FlaxEditor.Content.ContentItem)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnClose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Assets.TextureWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Assets.TextureWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.ContentWindow">
            <summary>
            One of the main editor windows used to present workspace content and user scripts.
            Provides various functionalities for asset operations.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="E:FlaxEditor.Windows.ContentWindow.ContextMenuShow">
            <summary>
            Occurs when content window wants to show the context menu for the given content item. Allows to add custom options.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.RefreshViewItemsThumbnails">
            <summary>
            Refreshes thumbnails for all the items in the view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ReimportSelection">
            <summary>
            Reimports the selected assets.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ExportSelection">
            <summary>
            Exports the selected items.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.Toolstrip">
            <summary>
            Gets the toolstrip.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.View">
            <summary>
            Gets the assets view.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.ContentWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Rename(FlaxEditor.Content.ContentItem)">
            <summary>
            Shows popup dialog with UI to rename content item.
            </summary>
            <param name="item">The item to rename.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Rename(FlaxEditor.Content.ContentItem,System.String)">
            <summary>
            Renames the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="newShortName">New name (without extension, just the filename).</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Delete(FlaxEditor.Content.ContentItem)">
            <summary>
            Deletes the specified item. Asks user first and uses some GUI.
            </summary>
            <param name="item">The item to delete.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Delete(System.Collections.Generic.List{FlaxEditor.Content.ContentItem})">
            <summary>
            Deletes the specified items. Asks user first and uses some GUI.
            </summary>
            <param name="items">The items to delete.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Clone(FlaxEditor.Content.ContentItem)">
            <summary>
            Clones the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Clone(System.Collections.Generic.List{FlaxEditor.Content.ContentItem})">
            <summary>
            Clones the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Paste(System.String[])">
            <summary>
            Pastes the specified files.
            </summary>
            <param name="files">The files paths to import.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NewFolder">
            <summary>
            Stars creating the folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NewItem(FlaxEditor.Content.ContentProxy,System.Object,System.Action{FlaxEditor.Content.ContentItem})">
            <summary>
            Starts creating new item.
            </summary>
            <param name="proxy">The new item proxy.</param>
            <param name="argument">The argument passed to the proxy for the item creation. In most cases it is null.</param>
            <param name="created">The event called when the item is crated by the user. The argument is the new item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Open(FlaxEditor.Content.ContentItem)">
            <summary>
            Opens the specified content item.
            </summary>
            <param name="item">The content item.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Select(FlaxEngine.Asset)">
            <summary>
            Selects the specified asset in the content view.
            </summary>
            <param name="asset">The asset to select.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Select(FlaxEditor.Content.ContentItem)">
            <summary>
            Selects the specified item in the content view.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.RefreshView">
            <summary>
            Refreshes the current view items collection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.RefreshView(FlaxEditor.Content.ContentTreeNode)">
            <summary>
            Refreshes the view.
            </summary>
            <param name="target">The target location.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnExit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.Navigate(FlaxEditor.Content.ContentTreeNode)">
            <summary>
            Navigates to the specified target content location.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigateBackward">
            <summary>
            Navigates backward.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigateForward">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigateUp">
            <summary>
            Navigates directory up.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.NavigationClearHistory">
            <summary>
            Clears the navigation history.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.SelectedNode">
            <summary>
            Gets the selected tree node.
            </summary>
            <value>
            The selected node.
            </value>
        </member>
        <member name="P:FlaxEditor.Windows.ContentWindow.CurrentViewFolder">
            <summary>
            Gets the current view folder.
            </summary>
            <value>
            The current view folder.
            </value>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ShowRoot">
            <summary>
            Shows the root folder.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.SearchFilterComboBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ContentWindow.ClearItemsSearch">
            <summary>
            Clears the items searching query text and filters.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.DebugLogWindow">
            <summary>
            Editor window used to show debug info, warning and error messages. Captures <see cref="T:FlaxEngine.Debug"/> messages.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription">
            <summary>
            Debug log entry description;
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.Level">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.Title">
            <summary>
            The message title.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.Description">
            <summary>
            The message description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.ContextObject">
            <summary>
            The target object hint id (don't store ref, object may be an actor that can be removed and restored later or sth).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.IsCompileResult">
            <summary>
            True if entry is scripts compilation result.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.LocationFile">
            <summary>
            The location of the issue (file path).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntryDescription.LocationLine">
            <summary>
            The location line number (zero or less to not use it);
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.DebugLogWindow.LogEntry.DefaultHeight">
            <summary>
            The default height of the entries.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.DebugLogWindow.LogEntry.Info">
            <summary>
            Gets the information text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnVisibleChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.Copy">
            <summary>
            Copies the entry information to the system clipboard (as text).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.LogEntry.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.DebugLogWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.Clear">
            <summary>
            Clears the log.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.Add(FlaxEditor.Windows.DebugLogWindow.LogEntryDescription@)">
            <summary>
            Adds the specified log entry.
            </summary>
            <param name="desc">The log entry description.</param>
        </member>
        <member name="P:FlaxEditor.Windows.DebugLogWindow.Selected">
            <summary>
            Gets or sets the selected entry.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.DebugLogWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.DebugLogWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.EditGameWindow">
            <summary>
            Main editor window used to modify scene objects. Provides Gizmos and camera viewport navigation.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.SceneEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.EditGameWindow.CameraPreview">
            <summary>
            Camera preview output control.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.CameraPreview.IsPinned">
            <summary>
            Gets or sets a value indicating whether this preview is pinned.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.CameraPreview.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.CameraPreview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditGameWindow.CameraPreview"/> class.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.CameraPreview.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.CameraPreview.OnDestroy">
            <inheritdoc />
        </member>
        <member name="F:FlaxEditor.Windows.EditGameWindow.Viewport">
            <summary>
            The viewport control.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditGameWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.ShowSelectedActors">
            <summary>
            Moves the viewport to visualize selected actors.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.UpdateCameraPreview">
            <summary>
            Updates the camera previews.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.HideCameraPreview(FlaxEngine.Camera)">
            <summary>
            Hides the camera preview that uses given camera.
            </summary>
            <param name="camera">The camera to hide.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.HideCameraPreview(FlaxEditor.Windows.EditGameWindow.CameraPreview)">
            <summary>
            Hides the camera preview.
            </summary>
            <param name="preview">The preview to hide.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.HideAllCameraPreviews">
            <summary>
            Hides all the camera previews.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnSceneLoaded(FlaxEngine.Scene,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnSceneUnloading(FlaxEngine.Scene,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.EditGameWindow.UseLayoutData">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnLayoutSerialize(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnLayoutDeserialize(System.Xml.XmlElement)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.EditGameWindow.OnLayoutDeserialize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.EditorOptionsWindow">
            <summary>
            Editor window for changing the options.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditorOptionsWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.GatherData">
            <summary>
            Load the editor options data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.SaveData">
            <summary>
            Saves the editor options data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorOptionsWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.EditorWindow">
            <summary>
             Base class for all windows in Editor.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Docking.DockWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.EditorWindow.Editor">
            <summary>
            Gets the editor object.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.#ctor(FlaxEditor.Editor,System.Boolean,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.EditorWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="hideOnClose">True if hide window on closing, otherwise it will be destroyed.</param>
            <param name="scrollBars">The scroll bars.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.IsEditingItem(FlaxEditor.Content.ContentItem)">
            <summary>
            Determines whether this window is holding reference to the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if window is editing the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneSaving(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene starts saving
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneSaved(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets saved
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneSaveError(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets saving error
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneLoading(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene starts loading
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneLoaded(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets loaded
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneLoadError(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene cannot be loaded
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneUnloading(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets unloading
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnSceneUnloaded(FlaxEngine.Scene,System.Guid)">
            <summary>
            Fired when scene gets unloaded
            </summary>
            <param name="scene">The scene object. It may be null!</param>
            <param name="sceneId">The scene ID.</param>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnPlayBegin">
            <summary>
            Called when Editor is entering play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnPlayEnd">
            <summary>
            Called when Editor leaves the play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnInit">
            <summary>
            Called when window should be initialized.
            At this point, main window, content database, default editor windows are ready.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnUpdate">
            <summary>
            Called when every engine update.
            Note: <see cref="M:FlaxEngine.GUI.Control.Update(System.Single)"/> may be called at the lower frequency than the engine updates.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnExit">
            <summary>
            Called when editor is being closed and window should perform release data operations.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.EditorWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.GameCookerWindow">
            <summary>
            Editor tool window for building games using <see cref="T:FlaxEditor.GameCooker"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy">
            <summary>
            Proxy object for the Build tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.Windows.Arch.x64">
            <summary>
            The x64.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.Windows.Arch.x86">
            <summary>
            The x86.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.Windows.Architecture">
            <summary>
            The architecture.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.GameCookerWindow.BuildTabProxy.WPA.Architecture">
            <summary>
            The architecture.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.PresetsTargetsColumnBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.GameCookerWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.BuildAll(FlaxEditor.Content.Settings.BuildPreset)">
            <summary>
            Builds all the targets from the given preset.
            </summary>
            <param name="preset">The preset.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.Build(FlaxEditor.Content.Settings.BuildTarget)">
            <summary>
            Builds the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.GatherData">
            <summary>
            Load the build presets from the settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.SaveData">
            <summary>
            Saves the build presets to the settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameCookerWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.GameWindow">
            <summary>
            Provides in-editor play mode simulation.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.ShowGUI">
            <summary>
            Gets or sets a value indicating whether show game GUI in the view or keep it hidden.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.CenterMouseOnFocus">
            <summary>
            Gets or sets a value indicating whether center mouse position on window focus in play mode. Helps when working with games that lock mouse cursor.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GameWindow.FocusOnPlay">
            <summary>
            Gets or sets a value indicating whether auto-focus game window on play mode start.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.GameWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.SetGameMousePosition(FlaxEngine.Vector2@)">
            <summary>
            Sets the mouse position (handles call from the game scripts). Skips if editor is not focused on a game to prevent mouse position stealing.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnPlayBegin">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.UnlockMouseInPlay">
            <summary>
            Unlocks the mouse if game window is focused during play mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnStartContainsFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnEndContainsFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.GameWindow.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.GraphicsQualityWindow">
            <summary>
            Window used to show and edit current graphics rendering settings via <see cref="T:FlaxEngine.Rendering.GraphicsQuality"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel">
            <summary>
            MVC or something. https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.AAQuality">
            <summary>
            Anti Aliasing quality setting.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.SSRQuality">
            <summary>
            Screen Space Reflections quality.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.GraphicsQualityWindow.ViewModel.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.GraphicsQualityWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PropertiesWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="T:FlaxEditor.Windows.PluginExporterDialog">
            <summary>
            Dialog used to export plugin with its content.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Dialogs.Dialog" />
        </member>
        <member name="T:FlaxEditor.Windows.PluginExporterDialog.ExportOptions">
            <summary>
            Plugin exporting options.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.GamePlugin">
            <summary>
            The game plugin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.EditorPlugin">
            <summary>
            The editor plugin.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.OutputPath">
            <summary>
            Gets the output path.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.ShortName">
            <summary>
            The short name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.Icon">
            <summary>
            The icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.IncludeContent">
            <summary>
            The include content flag.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.Output">
            <summary>
            The output.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.Configuration">
            <summary>
            The configuration mode.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginExporterDialog.ExportOptions.#ctor(FlaxEngine.GamePlugin,FlaxEditor.EditorPlugin)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginExporterDialog.ExportOptions"/> class.
            </summary>
            <param name="gamePlugin">The game plugin.</param>
            <param name="editorPlugin">The editor plugin.</param>
        </member>
        <member name="M:FlaxEditor.Windows.PluginExporterDialog.ShowIt">
            <summary>
            Shows the dialog.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginExporterDialog.DoExport(FlaxEditor.Windows.PluginExporterDialog.ExportOptions@)">
            <summary>
            Performs the plugin exporting.
            </summary>
            <param name="options">The export options.</param>
            <returns>The error message or null if not failed.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.PluginExporterDialog.SetupWindowSettings(FlaxEngine.CreateWindowSettings@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.PluginsWindow">
            <summary>
            Editor tool window for plugins management using <see cref="T:FlaxEngine.PluginManager"/>.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.PluginsWindow.PluginEntry">
            <summary>
            Plugin entry control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.PluginEntry.Plugin">
            <summary>
            The plugin.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.PluginEntry.Category">
            <summary>
            The category.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.PluginEntry.#ctor(FlaxEngine.Plugin,FlaxEditor.Windows.PluginsWindow.CategoryEntry,FlaxEngine.PluginDescription@)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginsWindow.PluginEntry"/> class.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="category">The category.</param>
            <param name="desc">Plugin description</param>
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.PluginEntry.ClickLabel.DoubleClick">
            <summary>
            The double click event.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.PluginEntry.ClickLabel.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.PluginsWindow.CategoryEntry">
            <summary>
            Plugins category control.
            </summary>
            <seealso cref="T:FlaxEditor.GUI.Tab" />
        </member>
        <member name="F:FlaxEditor.Windows.PluginsWindow.CategoryEntry.Panel">
            <summary>
            The panel for the plugin entries.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.CategoryEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginsWindow.CategoryEntry"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PluginsWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.GetPluginEntry(FlaxEngine.Plugin)">
            <summary>
            Gets the plugin entry control.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.GetPluginEntry(System.Type)">
            <summary>
            Gets the plugin entry control.
            </summary>
            <param name="pluginType">The plugin type.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.PluginsWindow.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.CPU">
            <summary>
            The CPU performance profiling mode.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.CPU.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.CPU.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.CPU.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.GPU">
            <summary>
            The GPU performance profiling mode.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.GPU.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.GPU.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.GPU.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Memory">
            <summary>
            The memory profiling mode focused on system memory allocations breakdown.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Memory.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Memory.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Memory.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Overall">
            <summary>
            The general profiling mode with major game performance charts and stats.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.Profiler.ProfilerMode" />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Overall.Clear">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Overall.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Overall.UpdateView(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.ProfilerMode">
            <summary>
            Base class for all profiler modes. Implementation collects profiling events and presents it using dedicated UI.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData">
            <summary>
            The shared data container for the profiler modes. Used to reduce calls to profiler tool backend for the same data across different profiler fronted modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.Stats">
            <summary>
            The main stats. Gathered by auto by profiler before profiler mode update.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.GetEventsCPU">
            <summary>
            Gets the collected CPU events by the profiler from local or remote session.
            </summary>
            <returns>Buffer with events per thread.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.GetEventsGPU">
            <summary>
            Gets the collected GPU events by the profiler from local or remote session.
            </summary>
            <returns>Buffer with rendering events.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.Begin">
            <summary>
            Begins the data usage. Prepares the container.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData.End">
            <summary>
            Ends the data usage. Cleanups the container.  
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.ProfilerMode.MaxSamples">
            <summary>
            The maximum amount of samples to collect.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.ProfilerMode.MinEventTimeMs">
            <summary>
            The minimum event time in ms.
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Profiler.ProfilerMode.SelectedSampleChanged">
            <summary>
            Occurs when selected sample gets changed. Profiling window should propagate this change to all charts and view modes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.Update(FlaxEditor.Windows.Profiler.ProfilerMode.SharedUpdateData@)">
            <summary>
            Updates this instance. Called every frame if live recording is enabled.
            </summary>
            <param name="sharedData">The shared data.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.UpdateView(System.Int32,System.Boolean)">
            <summary>
            Updates the mode view. Called after init and on selected frame changed.
            </summary>
            <param name="selectedFrame">The selected frame index.</param>
            <param name="showOnlyLastUpdateEvents">True if show only events that happened during the last engine update (excluding events from fixed update or draw event), otherwise show all collected events.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerMode.OnSelectedSampleChanged(System.Int32)">
            <summary>
            Called when selected sample gets changed.
            </summary>
            <param name="frameIndex">Index of the view frame.</param>
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.ProfilerWindow">
            <summary>
            Editor tool window for profiling games.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.ProfilerWindow.LiveRecording">
            <summary>
            Gets or sets a value indicating whether live events recording is enabled.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.ProfilerWindow.ViewFrameIndex">
            <summary>
            Gets or sets the index of the selected frame to view (note: some view modes may not use it).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.ProfilerWindow.ShowOnlyLastUpdateEvents">
            <summary>
            Gets or sets a value indicating whether show only last update events and hide events from the other callbacks (e.g. draw or fixed update).
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.ProfilerWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.AddMode(FlaxEditor.Windows.Profiler.ProfilerMode)">
            <summary>
            Adds the mode.
            </summary>
            <remarks>
            To remove the mode simply call <see cref="M:FlaxEngine.GUI.Control.Dispose"/> on mode.
            </remarks>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.Clear">
            <summary>
            Clears data.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.OnUpdate">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.ProfilerWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.SamplesBuffer`1">
            <summary>
            Profiler samples storage buffer. Support recording new frame samples.
            </summary>
            <typeparam name="T">Single sample data type.</typeparam>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Count">
            <summary>
            Gets the amount of samples in the buffer.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Last">
            <summary>
            Gets the last sample value. Check buffer <see cref="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Count"/> before calling this property.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Item(System.Int32)">
            <summary>
            Gets or sets the sample value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The sample value.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.SamplesBuffer`1"/> class.
            </summary>
            <param name="capacity">The maximum buffer capacity.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Get(System.Int32)">
            <summary>
            Gets the sample at the specified index or the last sample if index is equal to -1.
            </summary>
            <param name="index">The index.</param>
            <returns>The sample value</returns>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Clear">
            <summary>
            Clears this buffer.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Add(`0)">
            <summary>
            Adds the specified sample to the buffer.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SamplesBuffer`1.Add(`0@)">
            <summary>
            Adds the specified sample to the buffer.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.SingleChart">
            <summary>
            Draws simple chart.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SingleChart.Title">
            <summary>
            Gets or sets the chart title.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SingleChart.SelectedSampleIndex">
            <summary>
            Gets the index of the selected sample. Value -1 is used to indicate no selection (using the latest sample).
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.SingleChart.SelectedSample">
            <summary>
            Gets the selected sample value.
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.Profiler.SingleChart.SelectedSampleChanged">
            <summary>
            Occurs when selected sample gets changed.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.SingleChart.FormatSample">
            <summary>
            The handler function to format sample value for label text.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.SingleChart"/> class.
            </summary>
            <param name="maxSamples">The maximum samples to collect.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.Clear">
            <summary>
            Clears all the samples.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.AddSample(System.Single)">
            <summary>
            Adds the sample value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.SingleChart.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Timeline">
            <summary>
            Events timeline control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Timeline.Event">
            <summary>
            Single timeline event control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEditor.Windows.Profiler.Timeline.Event.DefaultHeight">
            <summary>
            The default height of the event.
            </summary>
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.Timeline.Event.Name">
            <summary>
            Gets or sets the event name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.Event.#ctor(System.Single,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.Timeline.Event"/> class.
            </summary>
            <param name="x">The x position.</param>
            <param name="depth">The timeline row index (event depth).</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.Event.OnParentChangedInternal">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.Event.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.Profiler.Timeline.TrackLabel">
            <summary>
            Timeline track label
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.Timeline.TrackLabel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.TrackLabel.Draw">
            <inheritdoc />
        </member>
        <member name="P:FlaxEditor.Windows.Profiler.Timeline.EventsContainer">
            <summary>
            Gets the events container control. Use it to remove/add events to the timeline.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.Profiler.Timeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.Profiler.Timeline"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Windows.PropertiesWindow">
            <summary>
            Window used to present collection of selected object(s) properties in a grid. Supports Undo/Redo operations.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="F:FlaxEditor.Windows.PropertiesWindow.Presenter">
            <summary>
            The editor.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.PropertiesWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.PropertiesWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="T:FlaxEditor.Windows.SceneEditorWindow">
            <summary>
            Base class for editor windows dedicated to scene editing.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="M:FlaxEditor.Windows.SceneEditorWindow.#ctor(FlaxEditor.Editor,System.Boolean,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.SceneEditorWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
            <param name="hideOnClose">True if hide window on closing, otherwise it will be destroyed.</param>
            <param name="scrollBars">The scroll bars.</param>
        </member>
        <member name="M:FlaxEditor.Windows.SceneEditorWindow.SaveAll">
            <summary>
            Saves all changes.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.SceneEditorWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.SceneTreeWindow">
            <summary>
            Windows used to present loaded scenes collection and whole scene graph.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.SceneEditorWindow" />
        </member>
        <member name="T:FlaxEditor.Windows.SceneTreeWindow.ActorsGroup">
            <summary>
            The spawnable actors group.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.SceneTreeWindow.ActorsGroup.Name">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.SceneTreeWindow.ActorsGroup.Types">
            <summary>
            The types to spawn (name and type).
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.SceneTreeWindow.SpawnActorsGroups">
            <summary>
            The Spawnable actors (groups with single entry are inlined without a child menu)
            </summary>
        </member>
        <member name="E:FlaxEditor.Windows.SceneTreeWindow.ContextMenuShow">
            <summary>
            Occurs when scene tree window wants to show the context menu. Allows to add custom options.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.CreateContextMenu">
            <summary>
            Creates the context menu for the current objects selection and the current Editor state.
            </summary>
            <returns>The context menu.</returns>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.ShowContextMenu(FlaxEngine.GUI.Control,FlaxEngine.Vector2@)">
            <summary>
            Shows the context menu on a given location (in the given control coordinates).
            </summary>
            <param name="parent">The parent control.</param>
            <param name="location">The location (within a given control).</param>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.SceneTreeWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.Search">
            <summary>
            Focuses search box.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnKeyDown(FlaxEngine.Keys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.SceneTreeWindow.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Windows.ToolboxWindow">
            <summary>
            A helper utility window with bunch of tools used during scene editing.
            </summary>
            <seealso cref="T:FlaxEditor.Windows.EditorWindow" />
        </member>
        <member name="P:FlaxEditor.Windows.ToolboxWindow.TabsControl">
            <summary>
            Gets the tabs control used by this window. Can be used to add custom toolbox modes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.ToolboxWindow.Spawn">
            <summary>
            The items spawning tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.ToolboxWindow.Foliage">
            <summary>
            The foliage spawning tab.
            </summary>
        </member>
        <member name="F:FlaxEditor.Windows.ToolboxWindow.Carve">
            <summary>
            The terrain carving tab.
            </summary>
        </member>
        <member name="M:FlaxEditor.Windows.ToolboxWindow.#ctor(FlaxEditor.Editor)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Windows.ToolboxWindow"/> class.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:FlaxEditor.Windows.ToolboxWindow.OnInit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Windows.ToolboxWindow.Item.DoDragDrop">
            <inheritdoc />
        </member>
        <member name="T:FlaxEditor.Undo">
            <summary>
            The undo/redo actions recording object.
            </summary>
        </member>
        <member name="T:FlaxEditor.Undo.UndoEventDelegate">
            <summary>
            Undo system event.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.IUndoInternal.End(System.Object)">
            <summary>
            Creates the undo action object on recording end.
            </summary>
            <param name="snapshotInstance">The snapshot object.</param>
            <returns>The undo action. May be null if no changes found.</returns>
        </member>
        <member name="F:FlaxEditor.Undo._snapshots">
            <summary>
                Stack of undo actions for future disposal.
            </summary>
        </member>
        <member name="P:FlaxEditor.Undo.UndoOperationsStack">
            <summary>
            Gets the undo operations stack.
            </summary>
            <value>
            The undo operations stack.
            </value>
        </member>
        <member name="E:FlaxEditor.Undo.UndoDone">
            <summary>
            Occurs when undo operation is done.
            </summary>
        </member>
        <member name="E:FlaxEditor.Undo.RedoDone">
            <summary>
            Occurs when redo operation is done.
            </summary>
        </member>
        <member name="E:FlaxEditor.Undo.ActionDone">
            <summary>
            Occurs when action is done and appended to the <see cref="T:FlaxEditor.Undo"/>.
            </summary>
        </member>
        <member name="P:FlaxEditor.Undo.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEditor.Undo"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.CanUndo">
            <summary>
            Gets a value indicating whether can do undo on last performed action.
            </summary>
            <value>
              <c>true</c> if can perform undo; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.CanRedo">
            <summary>
            Gets a value indicating whether can do redo on last undone action.
            </summary>
            <value>
              <c>true</c> if can perform redo; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.FirstUndoName">
            <summary>
            Gets the first name of the undo action.
            </summary>
            <value>
            The first name of the undo action.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.FirstRedoName">
            <summary>
            Gets the first name of the redo action.
            </summary>
            <value>
            The first name of the redo action.
            </value>
        </member>
        <member name="P:FlaxEditor.Undo.Capacity">
            <summary>
            Gets or sets the capacity of the undo history buffers.
            </summary>
        </member>
        <member name="T:FlaxEditor.Undo.UndoInternal">
            <summary>
                Internal class for keeping reference of undo action.
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.UndoInternal.End(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Undo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Undo"/> class.
            </summary>
            <param name="historyActionsLimit">The history actions limit.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordBegin(System.Object,System.String)">
            <summary>
                Begins recording for undo action.
            </summary>
            <param name="snapshotInstance">Instance of an object to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordEnd(System.Object,FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
                Ends recording for undo action.
            </summary>
            <param name="snapshotInstance">Instance of an object to finish recording, if null take last provided.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="T:FlaxEditor.Undo.UndoMultiInternal">
            <summary>
                Internal class for keeping reference of undo action that modifies collection of objects.
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.UndoMultiInternal.End(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEditor.Undo.RecordMultiBegin(System.Object[],System.String)">
            <summary>
                Begins recording for undo action.
            </summary>
            <param name="snapshotInstances">Instances of objects to record.</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordMultiEnd(System.Object[],FlaxEditor.IUndoAction,FlaxEditor.IUndoAction)">
            <summary>
                Ends recording for undo action.
            </summary>
            <param name="snapshotInstance">Instance of an object to finish recording, if null take last provided.</param>
            <param name="customActionBefore">Custom action to append to the undo block action before recorded modifications apply.</param>
            <param name="customActionAfter">Custom action to append to the undo block action after recorded modifications apply.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordAction(System.Object,System.String,System.Action)">
            <summary>
                Creates new undo action for provided instance of object.
            </summary>
            <param name="snapshotInstance">Instance of an object to record</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="actionsToSave">Action in after witch recording will be finished.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordAction``1(``0,System.String,System.Action{``0})">
            <summary>
                Creates new undo action for provided instance of object.
            </summary>
            <param name="snapshotInstance">Instance of an object to record</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="actionsToSave">Action in after witch recording will be finished.</param>
        </member>
        <member name="M:FlaxEditor.Undo.RecordAction(System.Object,System.String,System.Action{System.Object})">
            <summary>
                Creates new undo action for provided instance of object.
            </summary>
            <param name="snapshotInstance">Instance of an object to record</param>
            <param name="actionString">Name of action to be displayed in undo stack.</param>
            <param name="actionsToSave">Action in after witch recording will be finished.</param>
        </member>
        <member name="M:FlaxEditor.Undo.AddAction(FlaxEditor.IUndoAction)">
            <summary>
            Adds the action to the history.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.PerformUndo">
            <summary>
                Undo last recorded action
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.PerformRedo">
            <summary>
                Redo last undone action
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.OnAction(FlaxEditor.IUndoAction)">
            <summary>
            Called when <see cref="T:FlaxEditor.Undo"/> performs action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.OnUndo(FlaxEditor.IUndoAction)">
            <summary>
            Called when <see cref="T:FlaxEditor.Undo"/> performs undo action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.OnRedo(FlaxEditor.IUndoAction)">
            <summary>
            Called when <see cref="T:FlaxEditor.Undo"/> performs redo action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:FlaxEditor.Undo.Clear">
            <summary>
            Clears the history.
            </summary>
        </member>
        <member name="M:FlaxEditor.Undo.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ComboBox">
            <summary>
            Combo box control allows to choose one item or set of items from the provided collection of options.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ComboBox.DefaultHeight">
            <summary>
            The default height of the control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ComboBox._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ComboBox._popupMenu">
            <summary>
            The popup menu. May be null if has not been used yet.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ComboBox._mouseDown">
            <summary>
            The mouse down flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ComboBox._blockPopup">
            <summary>
            The block popup flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ComboBox._selectedIndices">
            <summary>
            The selected indices.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.Sorted">
            <summary>
            True if sort items before showing the list, otherwise present them in the unchanged order.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.SupportMultiSelect">
            <summary>
            Gets or sets a value indicating whether support multi items selection.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.MaximumItemsInViewCount">
            <summary>
            Gets or sets the maximum amount of items in the view. If popup has more items to show it uses a additional scroll panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item (returns <see cref="F:System.String.Empty"/> if no item is being selected or more than one item is selected).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.HasSelection">
            <summary>
            Gets a value indicating whether this combobox has any item selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected. If combobox has more than 1 item selected then it returns invalid index (value -1).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.Selection">
            <summary>
            Gets or sets the selection.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ComboBox.SelectedIndexChanged">
            <summary>
            Event fired when selected index gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ComboBox.PopupShowing">
            <summary>
            Occurs when popup is showing (before event). Can be used to update items collection before showing it to the user.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.IsPopupOpened">
            <summary>
            Gets a value indicating whether this popup menu is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.Font">
            <summary>
            Gets or sets the font used to draw text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when combobox popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.BorderColorSelected">
            <summary>
            Gets or sets the border color when combobox popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when combobox is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when combobox is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.ArrowImage">
            <summary>
            Gets or sets the image used to render combobox drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.ArrowColor">
            <summary>
            Gets or sets the color used to render combobox drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.ArrowColorSelected">
            <summary>
            Gets or sets the color used to render combobox drop arrow icon (menu is opened).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ComboBox.ArrowColorHighlighted">
            <summary>
            Gets or sets the color used to render combobox drop arrow icon (menu is highlighted).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ComboBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ComboBox"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.AddItem(System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.SetItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnSelectedIndexChanged">
            <summary>
            Called when selected item index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnItemClicked(System.Int32)">
            <summary>
            Called when item is clicked.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.CreatePopup">
            <summary>
            Creates the popup menu.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ComboBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenu">
            <summary>
            Popup menu control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuBase" />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenu.ItemsPanel">
            <summary>
            The items container.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.ItemsPanel.#ctor(FlaxEngine.GUI.ContextMenu)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenu.ItemsPanel"/> class.
            </summary>
            <param name="menu">The menu.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.ItemsPanel.Arrange">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenu._itemsAreaMargin">
            <summary>
            The items area margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenu._itemsMargin">
            <summary>
            The items margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenu._panel">
            <summary>
            The items panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenu.ItemsAreaMargin">
            <summary>
            Gets or sets the items area margin (items container area margin).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenu.ItemsMargin">
            <summary>
            Gets or sets the items margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenu.MinimumWidth">
            <summary>
            Gets or sets the minimum popup width.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenu.MaximumItemsInViewCount">
            <summary>
            Gets or sets the maximum amount of items in the view. If popup has more items to show it uses a additional scroll panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenu.Items">
            <summary>
            Gets the items (readonly).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ContextMenu.ButtonClicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenu.ItemsContainer">
            <summary>
            Gets the context menu items container control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.DisposeAllItems">
            <summary>
            Removes all the added items (buttons, separators, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddButton(System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddButton(System.String,System.String)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="shortKeys">The short keys.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddButton(System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="clicked">On button clicked event.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddButton(System.String,System.Action{FlaxEngine.GUI.ContextMenuButton})">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="clicked">On button clicked event.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddButton(System.String,System.String,System.Action)">
            <summary>
            Adds the button.
            </summary>
            <param name="text">The text.</param>
            <param name="shortKeys">The shortKeys.</param>
            <param name="clicked">On button clicked event.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.GetChildMenu(System.String)">
            <summary>
            Gets the child menu (with that name).
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.GetOrAddChildMenu(System.String)">
            <summary>
            Adds the child menu or gets it if already created (with that name).
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddChildMenu(System.String)">
            <summary>
            Adds the child menu.
            </summary>
            <param name="text">The text.</param>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.AddSeparator">
            <summary>
            Adds the separator.
            </summary>
            <returns>Created context menu item control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.OnButtonClicked(FlaxEngine.GUI.ContextMenuButton)">
            <summary>
            Called when button get clicked.
            </summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenu.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenuDirection">
            <summary>
            Context menu popup directions.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuDirection.RightDown">
            <summary>
            The right down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuDirection.RightUp">
            <summary>
            The right up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuDirection.LeftDown">
            <summary>
            The left down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuDirection.LeftUp">
            <summary>
            The left up.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenuBase">
            <summary>
            Base class for all context menu controls.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuBase.IsOpened">
            <summary>
            Returns true if context menu is opened
            </summary>
            <returns>True if opened, otherwise false</returns>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuBase.Direction">
            <summary>
            Gets the popup direction.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuBase.HasChildCMOpened">
            <summary>
            Gets a value indicating whether any child context menu has been opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuBase.TopmostCM">
            <summary>
            Gets the topmost context menu.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuBase.IsSubMenu">
            <summary>
            Gets a value indicating whether this context menu is a sub-menu. Sub menus are treated like child context menus of the other menu (eg. hierarchy).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenuBase"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2)">
            <summary>
            Show context menu over given control.
            </summary>
            <param name="parent">Parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.Hide">
            <summary>
            Hide popup menu and all child menus.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.ShowChild(FlaxEngine.GUI.ContextMenuBase,FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Shows new child context menu.
            </summary>
            <param name="child">The child menu.</param>
            <param name="location">The child menu initial location.</param>
            <param name="isSubMenu">True if context menu is a normal sub-menu, otherwise it is a custom menu popup linked as child.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.HideChild">
            <summary>
            Hides child popup menu if any opened.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.UpdateWindowSize">
            <summary>
            Updates the size of the window to match context menu dimensions.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.OnShow">
            <summary>
            Called on context menu show.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.OnHide">
            <summary>
            Called on context menu hide.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuBase.IsMouseOver">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuBase.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenuButton">
            <summary>
            Context Menu button control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuItem" />
        </member>
        <member name="E:FlaxEngine.GUI.ContextMenuButton.Clicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ContextMenuButton.ButtonClicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuButton.Text">
            <summary>
            The button text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuButton.Shortkeys">
            <summary>
            The button short keys information (eg. 'Ctrl+C').
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuButton.Icon">
            <summary>
            Item icon (best is 16x16).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuButton.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuButton.AutoCheck">
            <summary>
            The automatic check mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.#ctor(FlaxEngine.GUI.ContextMenu,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenuButton"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
            <param name="text">The text.</param>
            <param name="shortKeys">The short keys tip.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.SetAutoCheck(System.Boolean)">
            <summary>
            Sets the automatic check mode. In auto check mode the button sets the check sprite as an icon when user clicks it.
            </summary>
            <param name="value">True if use auto check, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.SetChecked(System.Boolean)">
            <summary>
            Sets the checked state.
            </summary>
            <param name="value">True if check it, otherwise false.</param>
            <returns>This button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuButton.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuButton.MinimumWidth">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenuChildMenu">
            <summary>
            Context Menu control that cn be expanded to the child popup menu.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuItem" />
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuChildMenu.Text">
            <summary>
            The item text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContextMenuChildMenu.ContextMenu">
            <summary>
            The child context menu.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuChildMenu.#ctor(FlaxEngine.GUI.ContextMenu,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenuChildMenu"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuChildMenu.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuChildMenu.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuChildMenu.MinimumWidth">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenuItem">
            <summary>
            Context Menu child control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuItem.ParentContextMenu">
            <summary>
            Gets the parent context menu.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContextMenuItem.MinimumWidth">
            <summary>
            Gets the minimum width of this item.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuItem.#ctor(FlaxEngine.GUI.ContextMenu,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenuItem"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
            <param name="width">The initial width.</param>
            <param name="height">The initial height.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuItem.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContextMenuSeparator">
            <summary>
            Context Menu separator control that visually separate chunks of the popup menu items.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContextMenuItem" />
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuSeparator.#ctor(FlaxEngine.GUI.ContextMenu)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContextMenuSeparator"/> class.
            </summary>
            <param name="parent">The parent context menu.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContextMenuSeparator.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ColorValueBox">
            <summary>
            Color value editor with picking support.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="T:FlaxEngine.GUI.ColorValueBox.ColorPickerEvent">
            <summary>
            Delegate function used for the color picker events handling.
            </summary>
            <param name="color">The selected color.</param>
            <param name="sliding">True if user is using a slider, otherwise false.</param>
        </member>
        <member name="T:FlaxEngine.GUI.ColorValueBox.ShowPickColorDialogDelegate">
            <summary>
            Delegate function used to handle showing color picking dialog.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="colorChanged">The color changed event.</param>
            <param name="useDynamicEditing">True if allow dynamic value editing (slider-like usage), otherwise will fire color change event only on editing end.</param>
            <returns>The created color picker dialog or null if failed.</returns>
        </member>
        <member name="F:FlaxEngine.GUI.ColorValueBox.ShowPickColorDialog">
            <summary>
            Shows picking color dialog (see <see cref="T:FlaxEngine.GUI.ColorValueBox.ShowPickColorDialogDelegate"/>).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ColorValueBox._currentDialog">
            <summary>
            The current opened dialog.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ColorValueBox._isSliding">
            <summary>
            True if slider is in use.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ColorValueBox._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ColorValueBox.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ColorValueBox.Value">
            <summary>
            Gets or sets the color value.
            </summary>
            <value>
            The color value.
            </value>
        </member>
        <member name="P:FlaxEngine.GUI.ColorValueBox.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ColorValueBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ColorValueBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ColorValueBox.#ctor(FlaxEngine.Color,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ColorValueBox"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="x">The x location</param>
            <param name="y">The y location</param>
        </member>
        <member name="M:FlaxEngine.GUI.ColorValueBox.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ColorValueBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ColorValueBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ColorValueBox.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.DoubleValueBox">
            <summary>
            Double precision floating point value editor.
            </summary>
            <seealso cref="T:System.Double" />
        </member>
        <member name="P:FlaxEngine.GUI.DoubleValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.DoubleValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.DoubleValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.#ctor(System.Double,System.Single,System.Single,System.Single,System.Double,System.Double,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.FloatValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.SetLimits(System.Double,System.Double)">
            <summary>
            Sets the value limits.
            </summary>
            <param name="min">The minimum value (bottom range).</param>
            <param name="max">The maximum value (upper range).</param>
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.SetLimits(FlaxEngine.GUI.DoubleValueBox)">
            <summary>
            Sets the limits from the other <see cref="T:FlaxEngine.GUI.DoubleValueBox"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DoubleValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.FloatValueBox">
            <summary>
            Floating point value editor.
            </summary>
            <seealso cref="T:System.Single" />
        </member>
        <member name="P:FlaxEngine.GUI.FloatValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.FloatValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.FloatValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.FloatValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the value limits.
            </summary>
            <param name="min">The minimum value (bottom range).</param>
            <param name="max">The maximum value (upper range).</param>
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.SetLimits(FlaxEngine.GUI.FloatValueBox)">
            <summary>
            Sets the limits from the other <see cref="T:FlaxEngine.GUI.FloatValueBox"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.FloatValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.IntValueBox">
            <summary>
            Integer value editor.
            </summary>
            <seealso cref="T:System.Int32" />
        </member>
        <member name="P:FlaxEngine.GUI.IntValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.IntValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.IntValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.IntValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.SetLimits(System.Int32,System.Int32)">
            <summary>
            Sets the value limits.
            </summary>
            <param name="min">The minimum value (bottom range).</param>
            <param name="max">The maximum value (upper range).</param>
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.SetLimits(FlaxEngine.GUI.IntValueBox)">
            <summary>
            Sets the limits from the other <see cref="T:FlaxEngine.GUI.IntValueBox"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.IntValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.LongValueBox">
            <summary>
            Integer (long type) value editor.
            </summary>
            <seealso cref="T:System.Int64" />
        </member>
        <member name="P:FlaxEngine.GUI.LongValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.LongValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.LongValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.LongValueBox.#ctor(System.Int64,System.Single,System.Single,System.Single,System.Int64,System.Int64,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LongValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEngine.GUI.LongValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.LongValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.LongValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.LongValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SliderControl">
            <summary>
            Float value editor with fixed size text box and slider.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.SliderControl.Slider">
            <summary>
            The horizontal slider control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.DefaultSize">
            <summary>
            The default size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.DefaultThickness">
            <summary>
            The default thickness.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.DefaultMinimumSize">
            <summary>
            The default minimum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.Minimum">
            <summary>
            The minimum value (constant)
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.Maximum">
            <summary>
            The maximum value (constant).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.Slider.Value">
            <summary>
            Gets or sets the value (normalized to range 0-100).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.Slider.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.SlidingStart">
            <summary>
            Occurs when sliding starts.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.Slider.SlidingEnd">
            <summary>
            Occurs when sliding ends.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SliderControl.Slider"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.Slider.TrackSize">
            <summary>
            Gets the size of the track.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.Slider.SetSizeInternal(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl._slider">
            <summary>
            The slider.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl._textBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SliderControl.TextBoxSize">
            <summary>
            The text box size (rest will be the slider area).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.SliderControl.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SliderControl.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.SliderControl.SlidingStart">
            <summary>
            Occurs when sliding starts.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.SliderControl.SlidingEnd">
            <summary>
            Occurs when sliding ends.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SliderControl"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The position x.</param>
            <param name="y">The position y.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.SetLimits(FlaxEngine.RangeAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.UpdateText">
            <summary>
            Updates the text of the textbox.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.UpdateSlider">
            <summary>
            Updates the slider value.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SliderControl.PerformLayoutSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ULongValueBox">
            <summary>
            Unsigned integer (ulong type) value editor.
            </summary>
            <seealso cref="T:System.UInt64" />
        </member>
        <member name="P:FlaxEngine.GUI.ULongValueBox.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ULongValueBox.MinValue">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ULongValueBox.MaxValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ULongValueBox.#ctor(System.UInt64,System.Single,System.Single,System.Single,System.UInt64,System.UInt64,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ULongValueBox"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="slideSpeed">The slide speed.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ULongValueBox.SetLimits(FlaxEngine.LimitAttribute)">
            <summary>
            Sets the limits from the attribute.
            </summary>
            <param name="limits">The limits.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ULongValueBox.UpdateText">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ULongValueBox.TryGetValue">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ULongValueBox.ApplySliding(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ValueBox`1">
            <summary>
            Base class for text boxes for float/int value editing. Supports slider and range clamping.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <seealso cref="T:FlaxEngine.GUI.TextBox" />
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1.SlidingBoxSize">
            <summary>
            The sliding box size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1._value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1._min">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1._max">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1._slideSpeed">
            <summary>
            The slider speed.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1._isSliding">
            <summary>
            True if slider is in use.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ValueBox`1._startSlideValue">
            <summary>
            The value cached on sliding start.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ValueBox`1.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.IsSliding">
            <summary>
            Gets a value indicating whether user is using a slider.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ValueBox`1.SlidingStart">
            <summary>
            Occurs when sliding starts.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ValueBox`1.SlidingEnd">
            <summary>
            Occurs when sliding ends.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.SlideSpeed">
            <summary>
            Gets or sets the slider speed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.#ctor(`0,System.Single,System.Single,System.Single,`0,`0,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ValueBox`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="sliderSpeed">The slider speed.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.UpdateText">
            <summary>
            Updates the text of the textbox.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.TryGetValue">
            <summary>
            Tries the get value from the textbox text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.ApplySliding(System.Single)">
            <summary>
            Applies the sliding delta to the value.
            </summary>
            <param name="delta">The delta (scaled).</param>
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.CanUseSliding">
            <summary>
            Gets a value indicating whether this value box can use sliding.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.SlideRect">
            <summary>
            Gets the slide rectangle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnEditEnd">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ValueBox`1.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.TextRectangle">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ValueBox`1.TextClipRectangle">
            <inheritdoc />
        </member>
    </members>
</doc>
